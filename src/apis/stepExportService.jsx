import instance from './axiosInterceptors';

const BASE_URL = import.meta.env.VITE_API_URL;
const SUB_URL = '/api/step-export';
const URL = BASE_URL + SUB_URL;

/**
 * L·∫•y th√¥ng tin preview tr∆∞·ªõc khi export
 * @param {string} templateId - ID c·ªßa template
 * @param {string} stepId - ID c·ªßa step
 * @returns {Promise<Object>} - Th√¥ng tin preview
 */
export const getStepExportPreview = async (templateId, stepId) => {
    try {
        const response = await instance.get(`${URL}/preview/${templateId}/${stepId}`);
        return response.data;
    } catch (error) {
        console.error('L·ªói khi l·∫•y th√¥ng tin preview export:', error);
        throw error;
    }
};

/**
 * Export d·ªØ li·ªáu step th√†nh file Excel
 * @param {string} templateId - ID c·ªßa template
 * @param {string} stepId - ID c·ªßa step
 * @param {string} fileName - T√™n file (optional)
 * @returns {Promise<void>}
 */
export const exportStepDataToExcel = async (templateId, stepId, fileName = null) => {
    try {
        console.log(`üöÄ exportStepDataToExcel - Starting export for template ${templateId}, step ${stepId}`);
        
        const response = await instance.get(`${URL}/${templateId}/${stepId}`, {
            responseType: 'blob', // Quan tr·ªçng: ph·∫£i set responseType l√† 'blob' ƒë·ªÉ nh·∫≠n file binary
        });

        // T·∫°o URL cho file blob
        const blob = new Blob([response.data], {
            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        });
        
        // T·∫°o t√™n file n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const finalFileName = fileName || `step_${stepId}_data_${timestamp}.xlsx`;
        
        // T·∫°o link download
        const downloadUrl = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = finalFileName;
        
        // Trigger download
        document.body.appendChild(link);
        link.click();
        
        // Cleanup
        document.body.removeChild(link);
        window.URL.revokeObjectURL(downloadUrl);
        
        console.log(`‚úÖ exportStepDataToExcel - Successfully downloaded ${finalFileName}`);
        
        return {
            success: true,
            fileName: finalFileName,
            message: 'T·∫£i xu·ªëng th√†nh c√¥ng!'
        };
        
    } catch (error) {
        console.error('‚ùå exportStepDataToExcel - Error:', error);
        
        // X·ª≠ l√Ω l·ªói t·ª´ server
        if (error.response?.data?.message) {
            throw new Error(error.response.data.message);
        }
        
        throw new Error('L·ªói khi t·∫£i xu·ªëng file Excel: ' + error.message);
    }
};

/**
 * Ki·ªÉm tra xem c√≥ th·ªÉ export step kh√¥ng
 * @param {string} templateId - ID c·ªßa template
 * @param {string} stepId - ID c·ªßa step
 * @returns {Promise<boolean>} - True n·∫øu c√≥ th·ªÉ export
 */
export const canExportStep = async (templateId, stepId) => {
    try {
        const preview = await getStepExportPreview(templateId, stepId);
        return preview.success && preview.data.totalRows > 0;
    } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra kh·∫£ nƒÉng export:', error);
        return false;
    }
};

export default {
    getStepExportPreview,
    exportStepDataToExcel,
    canExportStep
};
