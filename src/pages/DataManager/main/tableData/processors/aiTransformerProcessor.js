import { createSetting, getSettingByType, updateSetting } from '../../../../../apis/settingService.jsx';
import { aiGen, aiGen2 } from '../../../../../apis/botService.jsx';


export async function checkTokenQuota() {
	try {
		const usedTokenSetting = await getSettingByType('USED_TOKEN_APP');
		const totalTokenSetting = await getSettingByType('TOTAL_TOKEN');
		const arr = Array.isArray(usedTokenSetting?.setting) ? usedTokenSetting.setting : [];
		const totalUsed = arr.reduce((sum, item) => sum + (item.usedToken || 0), 0);
		const totalToken = typeof totalTokenSetting?.setting === 'number' ? totalTokenSetting.setting : 0;
		
		if (totalToken > 0 && totalUsed >= totalToken) {
			throw new Error('B·∫°n kh√¥ng th·ªÉ y√™u c·∫ßu do ƒë√£ v∆∞·ª£t qu√° token');
		}
		return true;
	} catch (error) {
		console.error('Error checking token quota:', error);
		throw error;
	}
}

export async function updateUsedTokenApp(aiResult, model = 'gpt-5-nano-2025-08-07') {
	try {
		console.log('üîç [DEBUG] updateUsedTokenApp - aiResult structure:', aiResult);
		console.log('üîç [DEBUG] updateUsedTokenApp - aiResult.usedToken:', aiResult?.usedToken);
		console.log('üîç [DEBUG] updateUsedTokenApp - aiResult.usage:', aiResult?.usage);
		console.log('üîç [DEBUG] updateUsedTokenApp - aiResult.tokens:', aiResult?.tokens);
		
		// T√¨m token usage t·ª´ c√°c tr∆∞·ªùng c√≥ th·ªÉ c√≥
		let usedToken = null;
		if (aiResult?.usedToken) {
			usedToken = aiResult.usedToken;
		} else if (aiResult?.usage?.total_tokens) {
			usedToken = aiResult.usage.total_tokens;
		} else if (aiResult?.usage?.completion_tokens) {
			usedToken = aiResult.usage.completion_tokens;
		} else if (aiResult?.tokens) {
			usedToken = aiResult.tokens;
		} else if (aiResult?.usage?.prompt_tokens && aiResult?.usage?.completion_tokens) {
			// T√≠nh t·ªïng token n·∫øu c√≥ prompt_tokens v√† completion_tokens
			usedToken = aiResult.usage.prompt_tokens + aiResult.usage.completion_tokens;
		}
		
		console.log('üîç [DEBUG] updateUsedTokenApp - extracted usedToken:', usedToken);
		
		// N·∫øu kh√¥ng c√≥ th√¥ng tin token, ∆∞·ªõc t√≠nh d·ª±a tr√™n ƒë·ªô d√†i text
		if (!usedToken && aiResult?.generated) {
			const textLength = aiResult.generated.length;
			// ∆Ø·ªõc t√≠nh: 1 token ‚âà 4 k√Ω t·ª± (rough estimate)
			usedToken = Math.ceil(textLength / 4);
			console.log('üîç [DEBUG] updateUsedTokenApp - estimated usedToken based on text length:', usedToken);
		}
		
		if (!aiResult || !usedToken) {
			console.log('üîç [DEBUG] updateUsedTokenApp - No token information found, skipping update');
			return;
		}
		
		const usedTokenSetting = await getSettingByType('USED_TOKEN_APP');
		const arr = Array.isArray(usedTokenSetting?.setting) ? usedTokenSetting.setting : [];
		
		const newTokenRecord = {
			usedToken: usedToken,
			date: new Date().toISOString(),
			model: model
		};
		
		arr.push(newTokenRecord);
		
		if (usedTokenSetting) {
			await updateSetting({ ...usedTokenSetting, setting: arr });
		} else {
			await createSetting({
				type: 'USED_TOKEN_APP',
				setting: arr
			});
		}
	} catch (error) {
		console.error('Error updating used token:', error);
	}
}

/**
 * X·ª≠ l√Ω AI Transformer v·ªõi batch processing
 * @param {Array} data - D·ªØ li·ªáu ƒë·∫ßu v√†o
 * @param {Object} config - C·∫•u h√¨nh AI Transformer
 * @param {Function} progressCallback - Callback ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh (optional)
 * @returns {Array} - D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c bi·∫øn ƒë·ªïi v·ªõi c·ªôt k·∫øt qu·∫£ m·ªõi
 */
export const processAITransformer = async (data, config, progressCallback = null) => {
	try {
		// Ki·ªÉm tra c·∫•u h√¨nh
		if (!config.conditionColumns || !config.resultColumn || !config.aiPrompt) {
			throw new Error('Thi·∫øu c·∫•u h√¨nh b·∫Øt bu·ªôc: conditionColumns, resultColumn, ho·∫∑c aiPrompt');
		}

		// Ki·ªÉm tra token quota
		await checkTokenQuota();

		// T·∫°o b·∫£n sao c·ªßa d·ªØ li·ªáu ƒë·ªÉ kh√¥ng l√†m thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
		const processedData = [...data];
		
		// T·∫°o c·ªôt k·∫øt qu·∫£ m·ªõi trong t·∫•t c·∫£ c√°c d√≤ng
		processedData.forEach(row => {
			// Lu√¥n t·∫°o c·ªôt m·ªõi v·ªõi gi√° tr·ªã r·ªóng
			row[config.resultColumn] = '';
		});
		
		const BATCH_SIZE = 1000; // X·ª≠ l√Ω 100 d√≤ng m·ªói batch
		const totalRows = processedData.length;
		const totalBatches = Math.ceil(totalRows / BATCH_SIZE);
		
		// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh b·∫Øt ƒë·∫ßu
		if (progressCallback) {
			progressCallback({
				current: 0,
				total: totalRows,
				message: `B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ${totalBatches} batch d·ªØ li·ªáu...`
			});
		}
		
		// X·ª≠ l√Ω t·ª´ng batch
		for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
			const startIndex = batchIndex * BATCH_SIZE;
			const endIndex = Math.min(startIndex + BATCH_SIZE, totalRows);
			const batchData = processedData.slice(startIndex, endIndex);
			
			// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh batch hi·ªán t·∫°i
			if (progressCallback) {
				progressCallback({
					current: startIndex,
					total: totalRows,
					message: `ƒêang x·ª≠ l√Ω batch ${batchIndex + 1}/${totalBatches} (d√≤ng ${startIndex + 1}-${endIndex})...`
				});
			}
			
			try {
				// Chu·∫©n b·ªã d·ªØ li·ªáu cho batch hi·ªán t·∫°i
				const batchDataForAI = batchData.map((row, localIndex) => {
					const globalIndex = startIndex + localIndex;
					const conditionData = {};
					config.conditionColumns.forEach(col => {
						conditionData[col] = row[col];
					});
					return {
						rowIndex: globalIndex,
						data: conditionData
					};
				});
				
				// T·∫°o prompt cho AI v·ªõi batch d·ªØ li·ªáu
				const aiPrompt = buildBulkAITransformerPrompt(config.aiPrompt, batchDataForAI, config.resultColumn);
				
				// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ƒëang g·ª≠i batch ƒë·∫øn AI
				if (progressCallback) {
					progressCallback({
						current: startIndex,
						total: totalRows,
						message: `ƒêang g·ª≠i batch ${batchIndex + 1}/${totalBatches} ƒë·∫øn AI...`
					});
				}
				console.log( 'config.aiModel', config.aiModel)
				console.log(aiPrompt)
				// G·ªçi AI cho batch hi·ªán t·∫°i v·ªõi timeout ng·∫Øn h∆°n
				const aiResult = await Promise.race([
					aiGen2(aiPrompt, null, config.aiModel || 'gemini-2.5-flash'),
					new Promise((_, reject) => 
						setTimeout(() => reject(new Error(`AI request timeout cho batch ${batchIndex + 1}`)), 600000) // 1 ph√∫t cho m·ªói batch
					)
				]);
				console.log(aiResult)
				// C·∫≠p nh·∫≠t token ƒë√£ s·ª≠ d·ª•ng
				await updateUsedTokenApp(aiResult, config.aiModel || 'gemini-2.5-flash');
				
				// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ƒëang x·ª≠ l√Ω k·∫øt qu·∫£ batch
				if (progressCallback) {
					progressCallback({
						current: startIndex,
						total: totalRows,
						message: `ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ batch ${batchIndex + 1}/${totalBatches}...`
					});
				}
				
				// X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ AI cho batch hi·ªán t·∫°i
				const transformedResults = extractBulkAIResult(aiResult, batchData.length);
				
				// C·∫≠p nh·∫≠t d·ªØ li·ªáu v·ªõi k·∫øt qu·∫£ t·ª´ AI cho batch hi·ªán t·∫°i
				transformedResults.forEach((result, localIndex) => {
					const globalIndex = startIndex + localIndex;
					if (globalIndex < processedData.length) {
						processedData[globalIndex][config.resultColumn] = result;
					}
				});
				
			} catch (batchError) {
				console.error(`Error processing batch ${batchIndex + 1}:`, batchError);
				
				// N·∫øu batch b·ªã l·ªói, ƒëi·ªÅn gi√° tr·ªã l·ªói cho c√°c d√≤ng trong batch ƒë√≥
				for (let i = startIndex; i < endIndex; i++) {
					processedData[i][config.resultColumn] = `[L·ªói batch ${batchIndex + 1}]`;
				}
			}
			
			// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ho√†n th√†nh batch
			if (progressCallback) {
				progressCallback({
					current: endIndex,
					total: totalRows,
					message: `Ho√†n th√†nh batch ${batchIndex + 1}/${totalBatches}`
				});
			}
			
			// Th√™m delay nh·ªè gi·ªØa c√°c batch ƒë·ªÉ tr√°nh qu√° t·∫£i
			if (batchIndex < totalBatches - 1) {
				await new Promise(resolve => setTimeout(resolve, 1000)); // 1 gi√¢y delay
			}
		}
		
		// Ki·ªÉm tra v√† ƒëi·ªÅn n·ªët nh·ªØng d√≤ng c√≤n tr·ªëng
		const emptyRows = processedData.filter((row, index) => {
			const value = row[config.resultColumn];
			// Ki·ªÉm tra an to√†n: value c√≥ th·ªÉ l√† string ho·∫∑c s·ªë
			const stringValue = String(value || '');
			return !value || stringValue.trim() === '' || stringValue.includes('[L·ªói batch');
		});
		
		if (emptyRows.length > 0) {
			console.log(`AI Transformer: Ph√°t hi·ªán ${emptyRows.length} d√≤ng c√≤n tr·ªëng, ƒëang ƒëi·ªÅn n·ªët...`);
			
			// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ƒëi·ªÅn n·ªët
			if (progressCallback) {
				progressCallback({
					current: totalRows,
					total: totalRows,
					message: `Ph√°t hi·ªán ${emptyRows.length} d√≤ng c√≤n tr·ªëng, ƒëang ƒëi·ªÅn n·ªët...`
				});
			}
			
			// T·∫°o batch cho nh·ªØng d√≤ng c√≤n tr·ªëng
			const emptyRowIndices = [];
			processedData.forEach((row, index) => {
				const value = row[config.resultColumn];
				// Ki·ªÉm tra an to√†n: value c√≥ th·ªÉ l√† string ho·∫∑c s·ªë
				const stringValue = String(value || '');
				if (!value || stringValue.trim() === '' || stringValue.includes('[L·ªói batch')) {
					emptyRowIndices.push(index);
				}
			});
			
			// Chia th√†nh batch nh·ªè h∆°n cho nh·ªØng d√≤ng c√≤n tr·ªëng (30 d√≤ng/batch)
			const EMPTY_BATCH_SIZE = 30;
			const emptyBatches = Math.ceil(emptyRowIndices.length / EMPTY_BATCH_SIZE);
			
			for (let emptyBatchIndex = 0; emptyBatchIndex < emptyBatches; emptyBatchIndex++) {
				const startIndex = emptyBatchIndex * EMPTY_BATCH_SIZE;
				const endIndex = Math.min(startIndex + EMPTY_BATCH_SIZE, emptyRowIndices.length);
				const currentEmptyIndices = emptyRowIndices.slice(startIndex, endIndex);
				
				console.log(`AI Transformer: ƒêi·ªÅn n·ªët batch ${emptyBatchIndex + 1}/${emptyBatches} (${currentEmptyIndices.length} d√≤ng)...`);
				
				// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ƒëi·ªÅn n·ªët batch
				if (progressCallback) {
					progressCallback({
						current: totalRows,
						total: totalRows,
						message: `ƒêi·ªÅn n·ªët batch ${emptyBatchIndex + 1}/${emptyBatches} (${currentEmptyIndices.length} d√≤ng)...`
					});
				}
				
				try {
					// Chu·∫©n b·ªã d·ªØ li·ªáu cho batch ƒëi·ªÅn n·ªët
					const emptyBatchDataForAI = currentEmptyIndices.map((rowIndex, localIndex) => {
						const row = processedData[rowIndex];
						const conditionData = {};
						config.conditionColumns.forEach(col => {
							conditionData[col] = row[col];
						});
						return {
							rowIndex: rowIndex,
							data: conditionData
						};
					});
					
					// T·∫°o prompt ƒë·∫∑c bi·ªát cho vi·ªác ƒëi·ªÅn n·ªët
					const fillPrompt = buildFillMissingPrompt(config.aiPrompt, emptyBatchDataForAI, config.resultColumn);
					
					// G·ªçi AI cho batch ƒëi·ªÅn n·ªët
					const fillResult = await Promise.race([
						aiGen2(fillPrompt,null, 'gemini-2.5-flash'),
						new Promise((_, reject) => 
							setTimeout(() => reject(new Error(`AI request timeout cho fill batch ${emptyBatchIndex + 1}`)), 300000) // 5 ph√∫t cho fill batch
						)
					]);
					
					// C·∫≠p nh·∫≠t token ƒë√£ s·ª≠ d·ª•ng
					await updateUsedTokenApp(fillResult);
					
					// X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ AI cho batch ƒëi·ªÅn n·ªët
					const fillResults = extractBulkAIResult(fillResult, currentEmptyIndices.length);
					
					// C·∫≠p nh·∫≠t d·ªØ li·ªáu v·ªõi k·∫øt qu·∫£ t·ª´ AI cho batch ƒëi·ªÅn n·ªët
					fillResults.forEach((result, localIndex) => {
						const globalIndex = currentEmptyIndices[localIndex];
						if (globalIndex < processedData.length) {
							processedData[globalIndex][config.resultColumn] = result;
						}
					});
					
					console.log(`AI Transformer: Ho√†n th√†nh ƒëi·ªÅn n·ªët batch ${emptyBatchIndex + 1}/${emptyBatches}`);
					
				} catch (fillError) {
					console.error(`Error filling missing batch ${emptyBatchIndex + 1}:`, fillError);
				
				}
				
				// Th√™m delay nh·ªè gi·ªØa c√°c batch ƒëi·ªÅn n·ªët
				if (emptyBatchIndex < emptyBatches - 1) {
					await new Promise(resolve => setTimeout(resolve, 2000)); // 2 gi√¢y delay cho fill batch
				}
			}
			
			console.log(`AI Transformer: Ho√†n th√†nh ƒëi·ªÅn n·ªët ${emptyRows.length} d√≤ng c√≤n tr·ªëng`);
		}
		
		// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ho√†n th√†nh
		if (progressCallback) {
			progressCallback({
				current: totalRows,
				total: totalRows,
				message: 'Ho√†n th√†nh x·ª≠ l√Ω AI Transformer'
			});
		}
		return processedData;
		
	} catch (error) {
		console.error('Error in processAITransformer:', error);
		throw error;
	}
};

/**
 * X√¢y d·ª±ng prompt cho AI
 * @param {string} basePrompt - Prompt c∆° b·∫£n t·ª´ ng∆∞·ªùi d√πng
 * @param {Object} conditionData - D·ªØ li·ªáu t·ª´ c√°c c·ªôt ƒëi·ªÅu ki·ªán
 * @param {string} resultColumn - T√™n c·ªôt k·∫øt qu·∫£
 * @returns {string} - Prompt ho√†n ch·ªânh cho AI
 */
export function buildAITransformerPrompt(basePrompt, conditionData, resultColumn) {
	const dataContext = Object.entries(conditionData)
		.map(([col, value]) => `${col}: ${JSON.stringify(value)}`)
		.join('\n');
	
	return `B·∫°n l√† m·ªôt AI chuy√™n gia x·ª≠ l√Ω d·ªØ li·ªáu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra gi√° tr·ªã cho c·ªôt m·ªõi "${resultColumn}" d·ª±a tr√™n d·ªØ li·ªáu t·ª´ c√°c c·ªôt ƒëi·ªÅu ki·ªán v√† prompt ƒë∆∞·ª£c cung c·∫•p.

D·ªØ li·ªáu t·ª´ c√°c c·ªôt ƒëi·ªÅu ki·ªán:
${dataContext}

Prompt y√™u c·∫ßu:
${basePrompt}

Y√™u c·∫ßu:
1. Ch·ªâ tr·∫£ v·ªÅ gi√° tr·ªã k·∫øt qu·∫£, kh√¥ng bao g·ªìm gi·∫£i th√≠ch hay text th·ª´a
2. Gi√° tr·ªã ph·∫£i ph√π h·ª£p v·ªõi ki·ªÉu d·ªØ li·ªáu mong mu·ªën
3. N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã ph√π h·ª£p, h√£y tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p

K·∫øt qu·∫£:`;
}

/**
 * Tr√≠ch xu·∫•t k·∫øt qu·∫£ t·ª´ AI response
 * @param {Object} aiResult - K·∫øt qu·∫£ t·ª´ AI
 * @returns {string} - Gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t
 */
function extractAIResult(aiResult) {
	try {
		let result = aiResult;
		
		// N·∫øu aiResult l√† object, l·∫•y thu·ªôc t√≠nh result
		if (typeof aiResult === 'object' && aiResult.result) {
			result = aiResult.result;
		}
		
		// N·∫øu result l√† string, l√†m s·∫°ch
		if (typeof result === 'string') {
			// Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† whitespace th·ª´a
			result = result.trim();
			
			// Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
			if ((result.startsWith('"') && result.endsWith('"')) || 
				(result.startsWith("'") && result.endsWith("'"))) {
				result = result.slice(1, -1);
			}
			
			// Lo·∫°i b·ªè c√°c t·ª´ kh√≥a kh√¥ng c·∫ßn thi·∫øt
			const unwantedKeywords = ['k·∫øt qu·∫£:', 'result:', 'gi√° tr·ªã:', 'value:'];
			unwantedKeywords.forEach(keyword => {
				if (result.toLowerCase().includes(keyword.toLowerCase())) {
					result = result.replace(new RegExp(keyword, 'gi'), '').trim();
				}
			});
		}
		
		return result || '';
		
	} catch (error) {
		console.error('Error extracting AI result:', error);
		return '[L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ AI]';
	}
}

/**
 * X√¢y d·ª±ng prompt cho AI ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu d√≤ng d·ªØ li·ªáu c√πng l√∫c (batch processing)
 * @param {string} basePrompt - Prompt c∆° b·∫£n t·ª´ ng∆∞·ªùi d√πng
 * @param {Array} dataForAI - D·ªØ li·ªáu ƒë·ªÉ g·ª≠i ƒë·∫øn AI, m·ªói ph·∫ßn t·ª≠ l√† { rowIndex: number, data: object }
 * @param {string} resultColumn - T√™n c·ªôt k·∫øt qu·∫£
 * @returns {string} - Prompt ho√†n ch·ªânh cho AI
 */
export function buildBulkAITransformerPrompt(basePrompt, dataForAI, resultColumn) {
	const dataContext = dataForAI.map((item, index) => {
		const { rowIndex, data } = item;
		const dataStr = Object.entries(data)
			.map(([col, value]) => `${col}: ${JSON.stringify(value)}`)
			.join(', ');
		return `D√≤ng ${index + 1}: {${dataStr}}`;
	}).join('\n');

	return `B·∫°n l√† m·ªôt AI chuy√™n gia x·ª≠ l√Ω d·ªØ li·ªáu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra gi√° tr·ªã cho c·ªôt m·ªõi "${resultColumn}" d·ª±a tr√™n d·ªØ li·ªáu t·ª´ batch d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p.

D·ªØ li·ªáu t·ª´ ${dataForAI.length} d√≤ng trong batch n√†y:
${dataContext}

Prompt y√™u c·∫ßu:
${basePrompt}

Y√™u c·∫ßu:
1. Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON ch·ª©a gi√° tr·ªã k·∫øt qu·∫£ cho t·ª´ng d√≤ng, theo th·ª© t·ª± t·ª´ d√≤ng 1 ƒë·∫øn d√≤ng ${dataForAI.length}
2. M·ªói ph·∫ßn t·ª≠ trong m·∫£ng l√† gi√° tr·ªã cho m·ªôt d√≤ng t∆∞∆°ng ·ª©ng
3. Gi√° tr·ªã ph·∫£i ph√π h·ª£p v·ªõi ki·ªÉu d·ªØ li·ªáu mong mu·ªën
4. N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã ph√π h·ª£p cho m·ªôt d√≤ng, h√£y tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p
5. Ch·ªâ tr·∫£ v·ªÅ m·∫£ng JSON, kh√¥ng c√≥ text gi·∫£i th√≠ch th√™m

V√≠ d·ª• k·∫øt qu·∫£ mong mu·ªën:
["gi√° tr·ªã d√≤ng 1", "gi√° tr·ªã d√≤ng 2", "gi√° tr·ªã d√≤ng 3", ...]

K·∫øt qu·∫£:`;
}

/**
 * X√¢y d·ª±ng prompt ƒë·∫∑c bi·ªát cho template-based categorization
 * @param {string} basePrompt - Prompt c∆° b·∫£n t·ª´ ng∆∞·ªùi d√πng
 * @param {Array} dataForAI - D·ªØ li·ªáu ƒë·ªÉ g·ª≠i ƒë·∫øn AI
 * @param {string} resultColumn - T√™n c·ªôt k·∫øt qu·∫£
 * @param {Array} templateData - D·ªØ li·ªáu m·∫´u t·ª´ template
 * @param {Object} templateConfig - C·∫•u h√¨nh m·∫´u
 * @returns {string} - Prompt ho√†n ch·ªânh cho AI
 */
export function buildTemplateBasedCategorizePrompt(basePrompt, dataForAI, resultColumn, templateData, templateConfig) {
	const dataContext = dataForAI.map((item, index) => {
		const { rowIndex, data } = item;
		const dataStr = Object.entries(data)
			.map(([col, value]) => `${col}: ${JSON.stringify(value)}`)
			.join(', ');
		return `D√≤ng ${index + 1}: {${dataStr}}`;
	}).join('\n');

	// T·∫°o d·ªØ li·ªáu m·∫´u t·ª´ template
	let templateContext = '';
	if (templateData && Array.isArray(templateData) && templateData.length > 0) {
		// L·ªçc unique d·ªØ li·ªáu m·∫´u d·ª±a tr√™n c√°c c·ªôt ƒëi·ªÅu ki·ªán
		const uniqueTemplateData = [];
		const seenCombinations = new Set();
		
		for (const row of templateData) {
			// T·∫°o key ch·ªâ t·ª´ c√°c c·ªôt ƒëi·ªÅu ki·ªán
			const conditionValues = templateConfig.templateConditionColumns.map(col => 
				String(row[col] || '').toLowerCase().trim()
			);
			const combinationKey = conditionValues.join('|');
			
			if (!seenCombinations.has(combinationKey)) {
				seenCombinations.add(combinationKey);
				uniqueTemplateData.push(row);
			}
		}
		
		const templateExamples = uniqueTemplateData.slice(0, 200); // Gi·ªõi h·∫°n 200 m·∫´u ƒë·ªÉ kh√¥ng qu√° d√†i
		templateContext = templateExamples.map((row, index) => {
			const conditionData = {};
			templateConfig.templateConditionColumns.forEach(col => {
				conditionData[col] = row[col];
			});
			const targetValue = row[templateConfig.templateTargetColumn];
			const dataStr = Object.entries(conditionData)
				.map(([col, value]) => `${col}: ${JSON.stringify(value)}`)
				.join(', ');
			return `M·∫´u ${index + 1}: {${dataStr}} ‚Üí K·∫øt qu·∫£: ${JSON.stringify(targetValue)}`;
		}).join('\n');
	}

	return `B·∫°n l√† m·ªôt AI chuy√™n gia ph√¢n lo·∫°i d·ªØ li·ªáu d·ª±a tr√™n m·∫´u. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ch·ªçn kho·∫£n m·ª•c ph√π h·ª£p cho d·ªØ li·ªáu ƒë·∫ßu v√†o d·ª±a tr√™n c√°c m·∫´u ƒë√£ h·ªçc.

D·ªÆ LI·ªÜU M·∫™U ƒê√É H·ªåC (${templateData ? templateData.length : 0} m·∫´u):
${templateContext}

D·ªÆ LI·ªÜU C·∫¶N PH√ÇN LO·∫†I (${dataForAI.length} d√≤ng):
${dataContext}

H∆Ø·ªöNG D·∫™N:
1. Ph√¢n t√≠ch c√°c m·∫´u ƒë√£ h·ªçc ƒë·ªÉ hi·ªÉu m·ªëi quan h·ªá gi·ªØa d·ªØ li·ªáu ƒë·∫ßu v√†o v√† k·∫øt qu·∫£
2. √Åp d·ª•ng logic ƒë√£ h·ªçc ƒë·ªÉ ch·ªçn kho·∫£n m·ª•c ph√π h·ª£p cho t·ª´ng d√≤ng d·ªØ li·ªáu m·ªõi
3. N·∫øu kh√¥ng t√¨m th·∫•y m·∫´u ph√π h·ª£p, tr·∫£ v·ªÅ "Kh√¥ng x√°c ƒë·ªãnh"

Y√äU C·∫¶U:
1. Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON ch·ª©a gi√° tr·ªã kho·∫£n m·ª•c cho t·ª´ng d√≤ng, theo th·ª© t·ª± t·ª´ d√≤ng 1 ƒë·∫øn d√≤ng ${dataForAI.length}
2. M·ªói ph·∫ßn t·ª≠ trong m·∫£ng l√† gi√° tr·ªã kho·∫£n m·ª•c ph√π h·ª£p nh·∫•t
3. Ch·ªâ tr·∫£ v·ªÅ m·∫£ng JSON, kh√¥ng c√≥ text gi·∫£i th√≠ch th√™m

V√≠ d·ª• k·∫øt qu·∫£ mong mu·ªën:
["Kho·∫£n m·ª•c A", "Kho·∫£n m·ª•c B", "Kh√¥ng x√°c ƒë·ªãnh", ...]

K·∫øt qu·∫£:`;
}

/**
 * X√¢y d·ª±ng prompt ƒë·∫∑c bi·ªát cho vi·ªác ƒëi·ªÅn n·ªët nh·ªØng d√≤ng c√≤n tr·ªëng
 * @param {string} basePrompt - Prompt c∆° b·∫£n t·ª´ ng∆∞·ªùi d√πng
 * @param {Array} dataForAI - D·ªØ li·ªáu ƒë·ªÉ g·ª≠i ƒë·∫øn AI, m·ªói ph·∫ßn t·ª≠ l√† { rowIndex: number, data: object }
 * @param {string} resultColumn - T√™n c·ªôt k·∫øt qu·∫£
 * @returns {string} - Prompt ho√†n ch·ªânh cho AI
 */
function buildFillMissingPrompt(basePrompt, dataForAI, resultColumn) {
	const dataContext = dataForAI.map((item, index) => {
		const { rowIndex, data } = item;
		const dataStr = Object.entries(data)
			.map(([col, value]) => `${col}: ${JSON.stringify(value)}`)
			.join(', ');
		return `D√≤ng ${index + 1}: {${dataStr}}`;
	}).join('\n');

	return `B·∫°n l√† m·ªôt AI chuy√™n gia x·ª≠ l√Ω d·ªØ li·ªáu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒëi·ªÅn n·ªët gi√° tr·ªã cho c·ªôt "${resultColumn}" cho nh·ªØng d√≤ng d·ªØ li·ªáu c√≤n tr·ªëng.

QUAN TR·ªåNG: ƒê√¢y l√† batch ƒëi·ªÅn n·ªët cho nh·ªØng d√≤ng b·ªã b·ªè s√≥t trong l·∫ßn x·ª≠ l√Ω tr∆∞·ªõc. B·∫°n c·∫ßn ƒë·∫£m b·∫£o tr·∫£ v·ªÅ ƒë√∫ng s·ªë l∆∞·ª£ng k·∫øt qu·∫£.

D·ªØ li·ªáu t·ª´ ${dataForAI.length} d√≤ng c·∫ßn ƒëi·ªÅn n·ªët:
${dataContext}

Prompt y√™u c·∫ßu:
${basePrompt}

Y√™u c·∫ßu:
1. Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON ch·ª©a gi√° tr·ªã k·∫øt qu·∫£ cho t·ª´ng d√≤ng, theo th·ª© t·ª± t·ª´ d√≤ng 1 ƒë·∫øn d√≤ng ${dataForAI.length}
2. M·ªói ph·∫ßn t·ª≠ trong m·∫£ng l√† gi√° tr·ªã cho m·ªôt d√≤ng t∆∞∆°ng ·ª©ng
3. Gi√° tr·ªã ph·∫£i ph√π h·ª£p v·ªõi ki·ªÉu d·ªØ li·ªáu mong mu·ªën
4. N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã ph√π h·ª£p cho m·ªôt d√≤ng, h√£y tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh ph√π h·ª£p
5. QUAN TR·ªåNG: Ph·∫£i tr·∫£ v·ªÅ ƒë√∫ng ${dataForAI.length} ph·∫ßn t·ª≠ trong m·∫£ng
6. Ch·ªâ tr·∫£ v·ªÅ m·∫£ng JSON, kh√¥ng c√≥ text gi·∫£i th√≠ch th√™m

V√≠ d·ª• k·∫øt qu·∫£ mong mu·ªën:
["gi√° tr·ªã d√≤ng 1", "gi√° tr·ªã d√≤ng 2", "gi√° tr·ªã d√≤ng 3", ...]

K·∫øt qu·∫£:`;
}

/**
 * Tr√≠ch xu·∫•t k·∫øt qu·∫£ t·ª´ AI response cho nhi·ªÅu d√≤ng d·ªØ li·ªáu
 * @param {Object} aiResult - K·∫øt qu·∫£ t·ª´ AI
 * @param {number} totalRows - T·ªïng s·ªë d√≤ng d·ªØ li·ªáu ƒë·∫ßu v√†o
 * @returns {Array} - M·∫£ng k·∫øt qu·∫£, m·ªói ph·∫ßn t·ª≠ l√† gi√° tr·ªã cho m·ªôt d√≤ng
 */
export function extractBulkAIResult(aiResult, totalRows) {
	try {
		let results = aiResult;
		
		// N·∫øu aiResult l√† object, l·∫•y thu·ªôc t√≠nh result
		if (typeof aiResult === 'object') {
			if (aiResult.generated) {
				results = aiResult.generated;
			} else if (aiResult.result) {
				results = aiResult.result;
			}
		}
		
		// N·∫øu results l√† string, th·ª≠ parse JSON
		if (typeof results === 'string') {
			const parsedResults = extractJSONFromAIResult(results);
			if (parsedResults) {
				results = parsedResults;
				console.log('results', results)
			} else {
				console.error('Error parsing AI result as JSON');
				// N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, tr·∫£ v·ªÅ m·∫£ng m·∫∑c ƒë·ªãnh
				return Array(totalRows).fill('[L·ªói: Kh√¥ng th·ªÉ parse k·∫øt qu·∫£ AI]');
			}
		}
		
        // N·∫øu results l√† m·ªôt m·∫£ng, x·ª≠ l√Ω t·ª´ng ph·∫ßn t·ª≠
		if (Array.isArray(results)) {
			return results.map((item, index) => {
				let result = item;
				
				// N·∫øu item l√† object, l·∫•y thu·ªôc t√≠nh result
				if (typeof item === 'object' && item) {
                    if (item.generated) {
                        result = item.generated;
                    } else if (item.result) {
                        result = item.result;
                    } else {
                        // Heuristic: n·∫øu object ch·ªâ c√≥ 1 key, l·∫•y gi√° tr·ªã c·ªßa key ƒë√≥
                        const keys = Object.keys(item);
                        if (keys.length === 1) {
                            result = item[keys[0]];
                        } else {
                            // L·∫•y gi√° tr·ªã string ƒë·∫ßu ti√™n n·∫øu c√≥
                            const firstStringEntry = Object.entries(item).find(([, v]) => typeof v === 'string');
                            if (firstStringEntry) {
                                result = firstStringEntry[1];
                            } else {
                                // Cu·ªëi c√πng: stringify object ƒë·ªÉ kh√¥ng g√°n object v√†o √¥ k·∫øt qu·∫£
                                try { result = JSON.stringify(item); } catch { result = String(item); }
                            }
                        }
                    }
				}
				
				// N·∫øu result l√† string, l√†m s·∫°ch
				if (typeof result === 'string') {
					// Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† whitespace th·ª´a
					result = result.trim();
					
					// Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
					if ((result.startsWith('"') && result.endsWith('"')) || 
						(result.startsWith("'") && result.endsWith("'"))) {
						result = result.slice(1, -1);
					}
					
					// Lo·∫°i b·ªè c√°c t·ª´ kh√≥a kh√¥ng c·∫ßn thi·∫øt
					const unwantedKeywords = ['k·∫øt qu·∫£:', 'result:', 'gi√° tr·ªã:', 'value:'];
					unwantedKeywords.forEach(keyword => {
						if (result.toLowerCase().includes(keyword.toLowerCase())) {
							result = result.replace(new RegExp(keyword, 'gi'), '').trim();
						}
					});
				}
				
				return result || '';
			});
		}
		
		// N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c k·∫øt qu·∫£, tr·∫£ v·ªÅ m·∫£ng m·∫∑c ƒë·ªãnh
		console.warn('AI result format not recognized, returning default values');
		return Array(totalRows).fill('[L·ªói: ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ AI kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán]');
		
	} catch (error) {
		console.error('Error extracting bulk AI result:', error);
		return Array(totalRows).fill('[L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ AI]');
	}
}

/**
 * Tr√≠ch xu·∫•t JSON t·ª´ AI result c√≥ th·ªÉ ch·ª©a markdown ho·∫∑c text th·ª´a
 * @param {string} aiResultString - Chu·ªói k·∫øt qu·∫£ t·ª´ AI
 * @returns {Array|null} - M·∫£ng JSON ƒë√£ parse ho·∫∑c null n·∫øu kh√¥ng parse ƒë∆∞·ª£c
 */
function extractJSONFromAIResult(aiResultString) {
	try {
		let cleanedString = aiResultString.trim();
		
		// Lo·∫°i b·ªè markdown code fences n·∫øu c√≥, gi·ªØ l·∫°i ph·∫ßn n·ªôi dung b√™n trong
		// V√≠ d·ª•: ```json\n[ ... ]\n```
		const fencedMatch = cleanedString.match(/```(?:json)?\s*([\s\S]*?)\s*```/i);
		if (fencedMatch && fencedMatch[1]) {
			cleanedString = fencedMatch[1].trim();
		}
		
		// Lo·∫°i b·ªè c√°c text th·ª´a tr∆∞·ªõc v√† sau JSON
		const jsonStart = cleanedString.indexOf('[');
		const jsonEnd = cleanedString.lastIndexOf(']');
		
		if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
			const jsonString = cleanedString.substring(jsonStart, jsonEnd + 1);
			return JSON.parse(jsonString);
		}
		
		// Th·ª≠ parse to√†n b·ªô string n·∫øu kh√¥ng t√¨m th·∫•y m·∫£ng
		return JSON.parse(cleanedString);
	} catch (error) {
		console.error('Error extracting JSON from AI result:', error);
		return null;
	}
}

/**
 * X√°c th·ª±c c·∫•u h√¨nh AI Transformer
 * @param {Object} config - C·∫•u h√¨nh c·∫ßn x√°c th·ª±c
 * @returns {Object} - K·∫øt qu·∫£ x√°c th·ª±c {isValid: boolean, errors: string[]}
 */
export const validateAITransformerConfig = (config) => {
	const errors = [];
	
	if (!config.conditionColumns || config.conditionColumns.length === 0) {
		errors.push('Ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt ƒëi·ªÅu ki·ªán');
	}
	
	if (!config.resultColumn || config.resultColumn.trim() === '') {
		errors.push('Ph·∫£i nh·∫≠p t√™n c·ªôt k·∫øt qu·∫£');
	}
	
	if (!config.aiPrompt || config.aiPrompt.trim() === '') {
		errors.push('Ph·∫£i nh·∫≠p prompt cho AI');
	}
	
	// Kh√¥ng c·∫ßn ki·ªÉm tra processMode n·ªØa v√¨ lu√¥n t·∫°o c·ªôt m·ªõi
	
	return {
		isValid: errors.length === 0,
		errors
	};
};

/**
 * L·∫•y th√¥ng tin t√≥m t·∫Øt c·ªßa step AI Transformer
 * @param {Object} config - C·∫•u h√¨nh c·ªßa step
 * @returns {string} - Th√¥ng tin t√≥m t·∫Øt
 */
export const getAITransformerSummary = (config) => {
	if (!config) return 'Ch∆∞a c√≥ c·∫•u h√¨nh';
	
	const conditionCols = config.conditionColumns?.length > 0 
		? config.conditionColumns.join(', ') 
		: 'Ch∆∞a ch·ªçn';
	
	const resultCol = config.resultColumn || 'Ch∆∞a nh·∫≠p';
	const hasPrompt = config.aiPrompt ? 'C√≥ prompt' : 'Ch∆∞a c√≥ prompt';
	
	return `ƒêi·ªÅu ki·ªán: ${conditionCols} ‚Üí T·∫°o c·ªôt m·ªõi: ${resultCol} | ${hasPrompt}`;
};
