import React, { useEffect, useState } from 'react';
import { Button, Form, Select, Table } from 'antd';
import { DeleteOutlined, PlusOutlined } from '@ant-design/icons';

const { Option } = Select;

const ConvertToValueConfig = ({ availableColumns = [], outputColumns = [], initialConfig = {}, onChange }) => {
  const [columnMappings, setColumnMappings] = useState(
    initialConfig.columnMappings || 
    (initialConfig.columns && initialConfig.convertToType ? 
      initialConfig.columns.map(col => ({ column: col, dataType: initialConfig.convertToType })) : 
      [])
  );

  useEffect(() => {
    if (onChange) {
      const columns = columnMappings.map(mapping => mapping.column).filter(Boolean);
      const convertToType = columnMappings.length > 0 ? columnMappings[0].dataType : 'text';
      onChange({ 
        columns, 
        convertToType, 
        columnMappings
      });
    }
    // eslint-disable-next-line
  }, [columnMappings]);

  const dataTypeOptions = [
    { value: 'text', label: 'Text' },
    { value: 'number', label: 'Number ' },
    // { value: 'databar', label: 'DataBar' },
    // { value: 'integer', label: 'Integer (S·ªë nguy√™n)', icon: 'üî¢' },
    // { value: 'boolean', label: 'Boolean (ƒê√∫ng/Sai)', icon: '‚úÖ' },
    // { value: 'date', label: 'Date (Ng√†y th√°ng)', icon: 'üìÖ' },
    // { value: 'currency', label: 'Currency (Ti·ªÅn t·ªá)', icon: 'üí∞' },
    // { value: 'percentage', label: 'Percentage (Ph·∫ßn trƒÉm)', icon: 'üìä' },
    // { value: 'email', label: 'Email', icon: 'üìß' },
    // { value: 'url', label: 'URL', icon: 'üîó' },
    // { value: 'phone', label: 'Phone (S·ªë ƒëi·ªán tho·∫°i)', icon: 'üìû' },
    // { value: 'json', label: 'JSON (ƒê·ªëi t∆∞·ª£ng)', icon: 'üìã' }
  ];


  const addColumnMapping = () => {
    setColumnMappings([...columnMappings, { column: '', dataType: 'text' }]);
  };

  const removeColumnMapping = (index) => {
    const newMappings = columnMappings.filter((_, i) => i !== index);
    setColumnMappings(newMappings);
  };

  const updateColumnMapping = (index, field, value) => {
    const newMappings = [...columnMappings];
    newMappings[index] = { ...newMappings[index], [field]: value };
    setColumnMappings(newMappings);
  };

  const getAvailableColumnsForMapping = (currentIndex) => {
    const usedColumns = columnMappings
      .map((mapping, index) => index !== currentIndex ? mapping.column : null)
      .filter(Boolean);
    // S·ª≠ d·ª•ng outputColumns n·∫øu c√≥, ng∆∞·ª£c l·∫°i fallback v·ªÅ availableColumns
    const sourceColumns = outputColumns.length > 0 ? outputColumns : availableColumns;
    return sourceColumns.filter(col => !usedColumns.includes(col));
  };

  const columns = [
    {
      title: 'C·ªôt',
      dataIndex: 'column',
      key: 'column',
      width: '40%',
      render: (value, record, index) => (
        <Select
          value={value}
          onChange={(val) => updateColumnMapping(index, 'column', val)}
          placeholder="Ch·ªçn c·ªôt"
          style={{ width: '100%' }}
          showSearch
          filterOption={(input, option) =>
            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
          }
          virtual={false}
        >
          {getAvailableColumnsForMapping(index).map(col => (
            <Option key={col} value={col}>
              {col}
            </Option>
          ))}
        </Select>
      ),
    },
    {
      title: 'Ki·ªÉu d·ªØ li·ªáu',
      dataIndex: 'dataType',
      key: 'dataType',
      width: '50%',
      render: (value, record, index) => (
        <Select
          value={value}
          onChange={(val) => updateColumnMapping(index, 'dataType', val)}
          style={{ width: '100%' }}
          placeholder="Ch·ªçn ki·ªÉu d·ªØ li·ªáu"
        >
          {dataTypeOptions.map(option => (
            <Option key={option.value} value={option.value}>
              <span style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                {/* <span>{option.icon}</span> */}
                <span>{option.label}</span>
              </span>
            </Option>
          ))}
        </Select>
      ),
    },
    {
      title: 'Thao t√°c',
      key: 'action',
      width: '10%',
      render: (_, record, index) => (
        <Button
          type="text"
          danger
          icon={<DeleteOutlined />}
          onClick={() => removeColumnMapping(index)}
          size="small"
        />
      ),
    },
  ];

  return (
    <Form layout="vertical" style={{ display: 'flex', flexDirection: 'column', gap: 24, minWidth: 600 }}>
      <Form.Item>
        <div style={{ border: '1px solid #d9d9d9', borderRadius: 6, padding: 16 }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
            <div>
              <span style={{ fontWeight: 500 }}>Ch·ªçn c·ªôt v√† ki·ªÉu d·ªØ li·ªáu ƒë√≠ch</span>
              {outputColumns.length > 0 && (
                <div style={{ fontSize: 12, color: '#666', marginTop: 4 }}>
                  D·ª±a tr√™n output columns c·ªßa step tr∆∞·ªõc ({outputColumns.length} c·ªôt)
                </div>
              )}
            </div>
            <Button
              type="dashed"
              icon={<PlusOutlined />}
              onClick={addColumnMapping}
              size="small"
            >
              Th√™m c·ªôt
            </Button>
          </div>
          
          {columnMappings.length === 0 ? (
            <div style={{ 
              textAlign: 'center', 
              padding: '40px 20px', 
              color: '#999',
              border: '2px dashed #d9d9d9',
              borderRadius: 6
            }}>
              <p>Ch∆∞a c√≥ c·ªôt n√†o ƒë∆∞·ª£c ch·ªçn</p>
              <p style={{ fontSize: 12 }}>
                {outputColumns.length > 0 
                  ? `Nh·∫•n "Th√™m c·ªôt" ƒë·ªÉ ch·ªçn t·ª´ ${outputColumns.length} c·ªôt c√≥ s·∫µn`
                  : 'Nh·∫•n "Th√™m c·ªôt" ƒë·ªÉ b·∫Øt ƒë·∫ßu c·∫•u h√¨nh'
                }
              </p>
            </div>
          ) : (
            <Table
              columns={columns}
              dataSource={columnMappings.map((mapping, index) => ({ ...mapping, key: index }))}
              pagination={false}
              size="small"
              scroll={{ y: 300 }}
            />
          )}
        </div>
      </Form.Item>

      <Form.Item>
        <div style={{ 
          padding: 16, 
          backgroundColor: '#f0f9ff', 
          borderRadius: 8,
          fontSize: 13,
          color: '#1e40af',
          border: '1px solid #bfdbfe'
        }}>
          <div style={{ fontWeight: 600, marginBottom: 12, color: '#1e40af' }}>
            ‚ÑπÔ∏è Th√¥ng tin v·ªÅ step n√†y
          </div>
          <div style={{ marginBottom: 12 }}>
            <strong>M·ª•c ƒë√≠ch:</strong> Step n√†y chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c c·ªôt ƒë∆∞·ª£c ch·ªçn v√† x·ª≠ l√Ω d·ªØ li·ªáu th·ª±c t·∫ø.
          </div>
          <div style={{ marginBottom: 12 }}>
            <strong>C√°ch ho·∫°t ƒë·ªông:</strong> D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω v√† chuy·ªÉn ƒë·ªïi theo ki·ªÉu d·ªØ li·ªáu ƒë∆∞·ª£c ch·ªçn.
          </div>
          
          <div style={{ 
            padding: 12, 
            backgroundColor: '#fff3cd', 
            borderRadius: 6,
            border: '1px solid #ffeaa7',
            marginBottom: 12
          }}>
            <div style={{ fontWeight: 600, marginBottom: 8, color: '#856404' }}>
              ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng v·ªÅ x·ª≠ l√Ω d·ªØ li·ªáu
            </div>
            <ul style={{ margin: 0, paddingLeft: 20, color: '#856404' }}>
              <li style={{ marginBottom: 4 }}>
                <strong>Number:</strong> Gi√° tr·ªã kh√¥ng ph·∫£i s·ªë s·∫Ω b√°o l·ªói (ERROR)
              </li>
              <li>
                <strong>Text:</strong> T·∫•t c·∫£ gi√° tr·ªã s·∫Ω ƒë∆∞·ª£c chuy·ªÉn th√†nh chu·ªói k√Ω t·ª±
              </li>
            </ul>
          </div>

          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 8, marginTop: 12 }}>
            <div style={{ padding: 8, backgroundColor: 'white', borderRadius: 4, border: '1px solid #e5e7eb' }}>
              <div style={{ fontWeight: 500, marginBottom: 4 }}>üìù Text</div>
              <div style={{ fontSize: 11 }}>Chu·ªói k√Ω t·ª± - Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ th√†nh text</div>
            </div>
            <div style={{ padding: 8, backgroundColor: 'white', borderRadius: 4, border: '1px solid #e5e7eb' }}>
              <div style={{ fontWeight: 500, marginBottom: 4 }}>üî¢ Number</div>
              <div style={{ fontSize: 11 }}>S·ªë th·ª±c - Gi√° tr·ªã kh√¥ng h·ª£p l·ªá ‚Üí ERROR</div>
            </div>
          </div>
        </div>
      </Form.Item>
    </Form>
  );
};

export default ConvertToValueConfig;
