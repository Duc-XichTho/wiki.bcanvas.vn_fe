import React, { useState } from 'react';
import { Upload, FileText, AlertCircle, CheckCircle } from 'lucide-react';
import { Modal, Button, Upload as AntUpload, message, Alert, Input } from 'antd';
import { createKpiMetric } from '../../../../apis/kpiMetricService';
import { createMeasure, fetchAllMeasures } from '../../../../apis/measureService';

import styles from './ImportModal.module.css';

const ImportModal = ({ onClose, onImport, selectedCategory }) => {
  const [file, setFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [textContent, setTextContent] = useState('');

  const handleFileChange = async (info) => {
    const selectedFile = info.file;
    if (selectedFile) {
      setFile(selectedFile);
      setError(null);

      // Preview file info
      setPreview({
        name: selectedFile.name,
        size: (selectedFile.size / 1024).toFixed(2),
        type: selectedFile.type
      });

      // ƒê·ªçc n·ªôi dung file v√† hi·ªÉn th·ªã trong textarea
      try {
        const fileContent = await new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = (e) => resolve(e.target.result);
          reader.onerror = reject;
          reader.readAsText(selectedFile);
        });
        setTextContent(fileContent);
      } catch (err) {
        setError('Kh√¥ng th·ªÉ ƒë·ªçc file. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  const handleTextContentChange = (e) => {
    setTextContent(e.target.value);
    setError(null);
  };

  const handleImport = async () => {
    if (!textContent.trim()) {
      message.error('Vui l√≤ng nh·∫≠p n·ªôi dung JSON ƒë·ªÉ import');
      return;
    }

    try {
      // Parse JSON t·ª´ text content
      const jsonData = JSON.parse(textContent);
      await processImportData(jsonData);
    } catch (err) {
      if (err.name === 'SyntaxError') {
        setError('N·ªôi dung JSON kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng.');
      } else {
        setError(err.message || 'C√≥ l·ªói x·∫£y ra khi import d·ªØ li·ªáu');
      }
      setLoading(false);
    }
  };

  const processImportData = async (jsonData) => {
    setLoading(true);
    setError(null);

    try {

      console.log('üìÑ D·ªØ li·ªáu JSON ƒë∆∞·ª£c parse:', jsonData);

      // B∆∞·ªõc 1: L·∫•y danh s√°ch measures hi·ªán t·∫°i t·ª´ DB
      const existingMeasures = await fetchAllMeasures({ business_category_id: selectedCategory , show: true});
      console.log('üìã Measures hi·ªán t·∫°i trong DB:', existingMeasures);

      // B∆∞·ªõc 2: T·∫°o map t√™n measure -> ID t·ª´ t·∫•t c·∫£ measures trong DB
      const measureNameToId = {};
      existingMeasures.forEach(measure => {
        measureNameToId[measure.name] = measure.id;
      });

      console.log('üó∫Ô∏è Map t√™n measure -> ID t·ª´ DB:', measureNameToId);

      // B∆∞·ªõc 3: Thu th·∫≠p t·∫•t c·∫£ measures ƒë∆∞·ª£c tham chi·∫øu trong KPIs
      const allReferencedMeasures = new Set();
      jsonData.kpis?.forEach(kpi => {
        (kpi.measures || []).forEach(measureName => {
          allReferencedMeasures.add(measureName);
        });
      });

      console.log('üîç T·∫•t c·∫£ measures ƒë∆∞·ª£c tham chi·∫øu trong KPIs:', Array.from(allReferencedMeasures));

      // B∆∞·ªõc 4: T·∫°o danh s√°ch measures c·∫ßn x·ª≠ l√Ω (t·ª´ file + thi·∫øu)
      const measuresToProcess = new Map();

      // Th√™m measures t·ª´ file JSON
      jsonData.measures?.forEach(measure => {
        measuresToProcess.set(measure.name, {
          ...measure,
          business_category_id: selectedCategory
        });
      });

      // Th√™m measures thi·∫øu (ƒë∆∞·ª£c tham chi·∫øu nh∆∞ng kh√¥ng c√≥ trong file)
      Array.from(allReferencedMeasures).forEach(measureName => {
        if (!measuresToProcess.has(measureName) && !measureNameToId[measureName]) {
          // T·∫°o measure m·∫∑c ƒë·ªãnh cho nh·ªØng measures thi·∫øu
          measuresToProcess.set(measureName, {
            name: measureName,
            description: `Measure t·ª± ƒë·ªông t·∫°o cho ${measureName}`,
            source: 'Auto-generated',
            business_category_id: selectedCategory
          });
          console.log('üÜï T·ª± ƒë·ªông t·∫°o measure thi·∫øu:', measureName);
        }
      });

      console.log('üìä T·∫•t c·∫£ measures s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω:', Array.from(measuresToProcess.keys()));

      // B∆∞·ªõc 5: X·ª≠ l√Ω t·∫•t c·∫£ measures
      const newlyCreatedMeasures = [];
      for (const [measureName, measureData] of measuresToProcess) {
        try {
          // Ki·ªÉm tra xem measure ƒë√£ t·ªìn t·∫°i trong DB ch∆∞a
          const existingMeasure = existingMeasures.find(
            measure => measure.name === measureName &&
              measure.business_category_id === selectedCategory
          );

          if (existingMeasure) {
            // S·ª≠ d·ª•ng measure ƒë√£ t·ªìn t·∫°i trong DB
            newlyCreatedMeasures.push(existingMeasure);
            console.log('üîÑ S·ª≠ d·ª•ng measure ƒë√£ t·ªìn t·∫°i trong DB:', existingMeasure.name, 'ID:', existingMeasure.id);
          } else {
            // T·∫°o measure m·ªõi
            const createdMeasure = await createMeasure(measureData);
            newlyCreatedMeasures.push(createdMeasure);
            // Th√™m v√†o map ƒë·ªÉ KPI c√≥ th·ªÉ s·ª≠ d·ª•ng
            measureNameToId[createdMeasure.name] = createdMeasure.id;
            console.log('‚úÖ ƒê√£ t·∫°o measure m·ªõi:', createdMeasure.name, 'ID:', createdMeasure.id);
          }
        } catch (error) {
          console.error('‚ùå L·ªói x·ª≠ l√Ω measure:', measureName, error);
          throw new Error(`Kh√¥ng th·ªÉ x·ª≠ l√Ω measure "${measureName}": ${error.message}`);
        }
      }

      console.log('üó∫Ô∏è Map t√™n measure -> ID (DB + m·ªõi):', measureNameToId);
      console.log('üìù Danh s√°ch t√™n measures c√≥ s·∫µn:', Object.keys(measureNameToId));
      console.log('üìä Chi ti·∫øt measures m·ªõi ƒë∆∞·ª£c x·ª≠ l√Ω:', newlyCreatedMeasures.map(m => ({ name: m.name, id: m.id, source: m.source })));

      // Validation: Ki·ªÉm tra t·∫•t c·∫£ measures ƒë∆∞·ª£c tham chi·∫øu trong KPIs
      // B√¢y gi·ªù t·∫•t c·∫£ measures ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, ch·ªâ c·∫ßn ki·ªÉm tra cu·ªëi c√πng
      const finalMissingMeasures = Array.from(allReferencedMeasures).filter(
        measureName => !measureNameToId[measureName]
      );

      if (finalMissingMeasures.length > 0) {
        console.error('‚ùå Validation failed:', {
          missingMeasures: finalMissingMeasures,
          availableMeasures: Object.keys(measureNameToId),
          allReferencedMeasures: Array.from(allReferencedMeasures)
        });
        throw new Error(
          `C√°c measures sau kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y:\n` +
          `‚ùå Thi·∫øu: ${finalMissingMeasures.join(', ')}\n` +
          `‚úÖ C√≥ s·∫µn: ${Object.keys(measureNameToId).join(', ')}\n\n` +
          `H√£y ki·ªÉm tra:\n` +
          `1. T√™n measures trong KPI c√≥ kh·ªõp v·ªõi t√™n trong danh s√°ch measures\n` +
          `2. Kh√¥ng c√≥ kho·∫£ng tr·∫Øng th·ª´a ho·∫∑c l·ªói ch√≠nh t·∫£\n` +
          `3. T·∫•t c·∫£ measures ƒë∆∞·ª£c tham chi·∫øu ƒë·ªÅu c√≥ trong danh s√°ch measures`
        );
      }

      // B∆∞·ªõc 4: T·∫°o KPIs v·ªõi measures IDs
      const kpisToCreate = jsonData.kpis?.map(kpi => {
        console.log(`üîç ƒêang x·ª≠ l√Ω KPI: ${kpi.name}`);
        console.log(`üìã Measures ƒë∆∞·ª£c tham chi·∫øu:`, kpi.measures || []);

        // Chuy·ªÉn ƒë·ªïi t√™n measures th√†nh IDs
        const measureIds = (kpi.measures || []).map(measureName => {
          console.log(`üîé T√¨m measure: "${measureName}"`);
          const measureId = measureNameToId[measureName];
          if (!measureId) {
            console.error(`‚ùå Kh√¥ng t√¨m th·∫•y measure "${measureName}"`);
            console.error(`üìù Measures c√≥ s·∫µn:`, Object.keys(measureNameToId));
            console.error(`üìä Measures m·ªõi ƒë∆∞·ª£c t·∫°o:`, newlyCreatedMeasures.map(m => ({ name: m.name, id: m.id })));
            throw new Error(`Kh√¥ng t√¨m th·∫•y measure "${measureName}". Measures c√≥ s·∫µn: ${Object.keys(measureNameToId).join(', ')}`);
          }
          console.log(`‚úÖ T√¨m th·∫•y measure "${measureName}" -> ID: ${measureId}`);
          return measureId;
        });

        // X·ª≠ l√Ω calc field n·∫øu c√≥ - chuy·ªÉn ƒë·ªïi t√™n measures th√†nh IDs
        let processedCalc = kpi.calc || null;
        if (processedCalc) {
          try {
            const calcData = JSON.parse(processedCalc);
            if (calcData.variables) {
              // Chuy·ªÉn ƒë·ªïi t√™n measures th√†nh IDs trong variables
              Object.keys(calcData.variables).forEach(variableKey => {
                const variable = calcData.variables[variableKey];
                if (variable.type === 'measure' && variable.id) {
                  const measureId = measureNameToId[variable.id];
                  if (measureId) {
                    calcData.variables[variableKey].id = measureId;
                    console.log(`üîÑ Chuy·ªÉn ƒë·ªïi measure "${variable.id}" -> ID: ${measureId} trong calc`);
                  } else {
                    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y measure "${variable.id}" trong calc`);
                  }
                }
              });
              processedCalc = JSON.stringify(calcData);
            }
          } catch (error) {
            console.error('‚ùå L·ªói x·ª≠ l√Ω calc field:', error);
            processedCalc = null;
          }
        }

        const result = {
          ...kpi,
          business_category_id: selectedCategory,
          measures: measureIds,
          // X·ª≠ l√Ω calc field ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi
          calc: processedCalc
        };

        console.log(`‚úÖ KPI "${kpi.name}" ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω:`, result);
        return result;
      }) || [];

      console.log('üìà KPIs s·∫Ω ƒë∆∞·ª£c t·∫°o:', kpisToCreate);

      // T·∫°o t·∫•t c·∫£ KPIs
      const createdKpis = [];
      for (const kpiData of kpisToCreate) {
        try {
          const createdKpi = await createKpiMetric(kpiData);
          createdKpis.push(createdKpi);
          console.log('‚úÖ ƒê√£ t·∫°o KPI:', createdKpi.name, 'ID:', createdKpi.id);
        } catch (error) {
          console.error('‚ùå L·ªói t·∫°o KPI:', kpiData.name, error);
          throw new Error(`Kh√¥ng th·ªÉ t·∫°o KPI "${kpiData.name}": ${error.message}`);
        }
      }

      console.log('üéâ Import th√†nh c√¥ng!');
      console.log('üìä Measures m·ªõi ƒë∆∞·ª£c x·ª≠ l√Ω:', newlyCreatedMeasures.length);
      console.log('üìà KPIs ƒë√£ t·∫°o:', createdKpis.length);

      // G·ªçi callback ƒë·ªÉ refresh data
      await onImport({
        success: true,
        message: `ƒê√£ import th√†nh c√¥ng ${createdKpis.length} KPIs (s·ª≠ d·ª•ng ${newlyCreatedMeasures.length} measures m·ªõi)`,
        data: {
          measures: newlyCreatedMeasures,
          kpis: createdKpis
        }
      });

      message.success(`ƒê√£ import th√†nh c√¥ng ${createdKpis.length} KPIs (s·ª≠ d·ª•ng ${newlyCreatedMeasures.length} measures m·ªõi)`);
      onClose();
    } catch (err) {
      setError(err.message || 'C√≥ l·ªói x·∫£y ra khi import d·ªØ li·ªáu');
    } finally {
      setLoading(false);
    }
  };

  const downloadTemplate = () => {
    const template = {
      "metadata": {
        "version": "1.0",
        "description": "Template import KPIs v√† Measures cho Developer",
        "created_at": new Date().toISOString(),
                "instructions": [
           "1. ƒêi·ªÅn th√¥ng tin KPIs v√† Measures theo c·∫•u tr√∫c JSON",
           "2. Tr∆∞·ªùng 'measures' trong KPI: array c√°c t√™n measures (kh√¥ng ph·∫£i ID)",
           "3. Trong ph·∫ßn 'measures': li·ªát k√™ measures v·ªõi th√¥ng tin chi ti·∫øt (t√πy ch·ªçn)",
           "4. KPI c√≥ th·ªÉ tham chi·∫øu ƒë·∫øn measures c≈© (c√≥ s·∫µn trong DB) v√† measures m·ªõi",
           "5. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫°o measures thi·∫øu v·ªõi th√¥ng tin m·∫∑c ƒë·ªãnh",
           "6. ƒê·∫£m b·∫£o t√™n measures trong KPI kh·ªõp ch√≠nh x√°c v·ªõi t√™n trong danh s√°ch measures",
           "7. Trong 'calc' field: s·ª≠ d·ª•ng t√™n measures (kh√¥ng ph·∫£i ID) trong variables",
           "8. V√≠ d·ª• calc: {\"formula\":\"a/b\",\"variables\":{\"a\":{\"type\":\"measure\",\"id\":\"T√™n Measure\"}}}",
           "9. Upload file JSON ƒë·ªÉ import"
         ]
      },
      "kpis": [
         {
           "name": "T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi (CVR)",
           "description": "ƒêo l∆∞·ªùng hi·ªáu qu·∫£ c·ªßa gian h√†ng trong vi·ªác bi·∫øn ng∆∞·ªùi xem th√†nh ng∆∞·ªùi mua",
           "category": "Kinh doanh",
           "measures": ["T·ªïng S·ªë ƒë∆°n h√†ng", "T·ªïng L∆∞·ª£t truy c·∫≠p"],
           "calc": "{\"formula\":\"a/b\",\"variables\":{\"a\":{\"type\":\"measure\",\"id\":\"T·ªïng S·ªë ƒë∆°n h√†ng\"},\"b\":{\"type\":\"measure\",\"id\":\"T·ªïng L∆∞·ª£t truy c·∫≠p\"}}}"
         },
         {
           "name": "Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh (AOV)",
           "description": "ƒêo l∆∞·ªùng s·ªë ti·ªÅn trung b√¨nh kh√°ch h√†ng chi ti√™u m·ªói l·∫ßn mua",
           "category": "Kinh doanh",
           "measures": ["T·ªïng Doanh thu", "T·ªïng S·ªë kh√°ch h√†ng"],
           "calc": "{\"formula\":\"a/b\",\"variables\":{\"a\":{\"type\":\"measure\",\"id\":\"T·ªïng Doanh thu\"},\"b\":{\"type\":\"measure\",\"id\":\"T·ªïng S·ªë kh√°ch h√†ng\"}}}"
         },
         {
           "name": "Bi√™n l·ª£i nhu·∫≠n g·ªôp",
           "description": "Ph·∫£n √°nh l·ª£i nhu·∫≠n th·ª±c t·∫ø sau khi tr·ª´ ƒëi gi√° v·ªën s·∫£n ph·∫©m",
           "category": "T√†i ch√≠nh",
           "measures": ["T·ªïng Doanh thu g·ªôp", "T·ªïng Gi√° v·ªën"],
           "calc": "{\"formula\":\"(a-b)/a\",\"variables\":{\"a\":{\"type\":\"measure\",\"id\":\"T·ªïng Doanh thu g·ªôp\"},\"b\":{\"type\":\"measure\",\"id\":\"T·ªïng Gi√° v·ªën\"}}}"
         }
      ],
      "measures": [
        {
          "name": "T·ªïng S·ªë ƒë∆°n h√†ng",
          "description": "T·ªïng s·ªë ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o trong k·ª≥",
          "unit": "ƒë∆°n h√†ng"
        },
        {
          "name": "T·ªïng L∆∞·ª£t truy c·∫≠p",
          "description": "T·ªïng s·ªë l∆∞·ª£t truy c·∫≠p website trong k·ª≥",
          "unit": "l∆∞·ª£t"
        },
        {
          "name": "T·ªïng Doanh thu",
          "description": "T·ªïng doanh thu t·ª´ b√°n h√†ng trong k·ª≥",
          "unit": "VND"
        },
        {
          "name": "T·ªïng S·ªë kh√°ch h√†ng",
          "description": "T·ªïng s·ªë kh√°ch h√†ng mua h√†ng trong k·ª≥",
          "unit": "kh√°ch h√†ng"
        },
        {
          "name": "T·ªïng Doanh thu g·ªôp",
          "description": "T·ªïng doanh thu tr∆∞·ªõc khi tr·ª´ chi ph√≠",
          "unit": "VND"
        },
        {
          "name": "T·ªïng Gi√° v·ªën",
          "description": "T·ªïng gi√° v·ªën h√†ng b√°n trong k·ª≥",
          "unit": "VND"
        }
      ]
    };

    const blob = new Blob([JSON.stringify(template, null, 2)], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'metric_map_template.json';
    a.click();
    window.URL.revokeObjectURL(url);
  };

  return (
    <Modal
      title="Import d·ªØ li·ªáu"
      open={true}
      onCancel={onClose}
      footer={[
        <Button key="cancel" onClick={onClose}>
          H·ªßy
        </Button>,
        <Button
          key="import"
          type="primary"
          loading={loading}
          disabled={!textContent.trim()}
          onClick={handleImport}
        >
          {loading ? 'ƒêang import...' : 'Import d·ªØ li·ªáu'}
        </Button>
      ]}
      width={600}
    >
      <div className={styles.content}>
        <div className={styles.section}>
          <Button
            type="dashed"
            icon={<FileText />}
            onClick={downloadTemplate}
            style={{ marginBottom: 16 }}
          >
            T·∫£i template m·∫´u
          </Button>
        </div>

        <div className={styles.section}>
          <h4 style={{ marginBottom: 16 }}>
            <Upload style={{ marginRight: 8 }} />
            Upload file JSON
          </h4>

          <AntUpload
            accept=".json"
            beforeUpload={() => false}
            onChange={handleFileChange}
            showUploadList={false}
          >
            <Button icon={<Upload />}>
              Ch·ªçn file JSON
            </Button>
          </AntUpload>

          {preview && (
            <div style={{ marginTop: 16, padding: 12, backgroundColor: '#f6ffed', border: '1px solid #b7eb8f', borderRadius: 6 }}>
              <CheckCircle style={{ color: '#52c41a', marginRight: 8 }} />
              <span style={{ fontWeight: 500 }}>{preview.name}</span>
              <span style={{ marginLeft: 8, color: '#666' }}>({preview.size} KB)</span>
            </div>
          )}
        </div>

        <div className={styles.section}>
          <h4 style={{ marginBottom: 16 }}>
            üìù Preview & Ch·ªânh s·ª≠a d·ªØ li·ªáu
          </h4>
          
          <Input.TextArea
            value={textContent}
            onChange={handleTextContentChange}
            placeholder="Upload file JSON ho·∫∑c nh·∫≠p tr·ª±c ti·∫øp n·ªôi dung JSON v√†o ƒë√¢y..."
            rows={15}
            style={{ fontFamily: 'monospace', fontSize: '13px' }}
          />
          
          <div style={{ marginTop: 8, fontSize: 12, color: '#666' }}>
            üí° Tip: B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a JSON tr·ª±c ti·∫øp trong √¥ n√†y tr∆∞·ªõc khi import
          </div>
        </div>

        {error && (
          <Alert
            message={error}
            type="error"
            showIcon
            style={{ marginTop: 16 }}
          />
        )}
      </div>
    </Modal>
  );
};

export default ImportModal;
