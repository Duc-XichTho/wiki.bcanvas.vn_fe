import React, { useState, useEffect, useContext } from 'react';
import { Input, Button, Avatar, Dropdown, Modal, Select, message, List, Card, Popconfirm, Empty } from 'antd';
import { 
  SendOutlined, 
  RobotOutlined, 
  UserOutlined, 
  BulbOutlined, 
  SaveOutlined, 
  PlusOutlined,
  DeleteOutlined,
  MessageOutlined,
  HistoryOutlined 
} from '@ant-design/icons';
import styles from '../../K9.module.css';
import { aiChat } from '../../../../apis/aiGen/botService';
import { 
  createNewChatSession, 
  addMessageToChat, 
  getActiveChatSessions,
  getAiChatHistoryById,
  deleteAiChatHistory 
} from '../../../../apis/aiGen/aiChatHistoryService';
import { MyContext } from '../../../../MyContext';

const { TextArea } = Input;
const { Option } = Select;

const PlaygroundTab = ({ onSaveToThesis, thesis }) => {
  const { currentUser } = useContext(MyContext);
  const [selectedAdvisor, setSelectedAdvisor] = useState('alex');
  const [selectedJob, setSelectedJob] = useState('');
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [saveModalVisible, setSaveModalVisible] = useState(false);
  const [selectedResponse, setSelectedResponse] = useState('');
  const [selectedThesisId, setSelectedThesisId] = useState('');
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'assistant',
      content: 'Xin ch√†o! T√¥i l√† Alex, chuy√™n gia ph√¢n t√≠ch ƒë·∫ßu t∆∞. T√¥i s·∫Ω gi√∫p b·∫°n ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† t·∫°o investment thesis. B·∫°n c√≥ th·ªÉ ch·ªçn job template ho·∫∑c ƒë·∫∑t c√¢u h·ªèi tr·ª±c ti·∫øp.',
      timestamp: new Date(),
      canSave: false
    }
  ]);

  // Chat session management
  const [currentSessionId, setCurrentSessionId] = useState(null);
  const [chatSessions, setChatSessions] = useState([]);
  const [loadingSessions, setLoadingSessions] = useState(false);
  const [newSessionTitle, setNewSessionTitle] = useState('');
  const [newSessionModalVisible, setNewSessionModalVisible] = useState(false);

  // Advisor configurations
  const advisors = [
    {
      key: 'alex',
      name: 'Alex - Market Analyst',
      description: 'Chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† xu h∆∞·ªõng ƒë·∫ßu t∆∞',
      avatar: 'üìä',
      specialty: 'Market Analysis',
      systemMessage: 'B·∫°n l√† Alex, chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† xu h∆∞·ªõng ƒë·∫ßu t∆∞. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ph√¢n t√≠ch th·ªã tr∆∞·ªùng, xu h∆∞·ªõng ƒë·∫ßu t∆∞, v√† ƒë√°nh gi√° c·ªï phi·∫øu m·ªôt c√°ch chuy√™n nghi·ªáp v√† chi ti·∫øt.'
    },
    {
      key: 'sophia',
      name: 'Sophia - Financial Expert',
      description: 'Chuy√™n gia t√†i ch√≠nh v√† b√°o c√°o doanh nghi·ªáp',
      avatar: 'üìà',
      specialty: 'Financial Analysis',
      systemMessage: 'B·∫°n l√† Sophia, chuy√™n gia t√†i ch√≠nh v√† b√°o c√°o doanh nghi·ªáp. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ph√¢n t√≠ch t√†i ch√≠nh, b√°o c√°o t√†i ch√≠nh, v√† ƒë√°nh gi√° hi·ªáu qu·∫£ ho·∫°t ƒë·ªông doanh nghi·ªáp m·ªôt c√°ch chuy√™n nghi·ªáp v√† chi ti·∫øt.'
    },
    {
      key: 'david',
      name: 'David - Sector Specialist',
      description: 'Chuy√™n gia ph√¢n t√≠ch ng√†nh v√† c∆° h·ªôi ƒë·∫ßu t∆∞',
      avatar: 'üè≠',
      specialty: 'Sector Analysis',
      systemMessage: 'B·∫°n l√† David, chuy√™n gia ph√¢n t√≠ch ng√†nh v√† c∆° h·ªôi ƒë·∫ßu t∆∞. H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ph√¢n t√≠ch ng√†nh, c∆° h·ªôi ƒë·∫ßu t∆∞ theo ng√†nh, v√† xu h∆∞·ªõng ph√°t tri·ªÉn c·ªßa c√°c lƒ©nh v·ª±c kinh t·∫ø m·ªôt c√°ch chuy√™n nghi·ªáp v√† chi ti·∫øt.'
    }
  ];

  // Job templates
  const jobTemplates = [
    {
      key: 'stock-news',
      label: 'T√≥m t·∫Øt tin t·ª©c c·ªï phi·∫øu',
      template: 'H√£y t√≥m t·∫Øt v√† ph√¢n t√≠ch nh·ªØng tin t·ª©c g·∫ßn ƒë√¢y li√™n quan ƒë·∫øn c·ªï phi·∫øu [STOCK_CODE]. ƒê√°nh gi√° t√°c ƒë·ªông ƒë·∫øn gi√° c·ªï phi·∫øu v√† ƒë∆∞a ra khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞.'
    },
    {
      key: 'sector-analysis',
      label: 'Ph√¢n t√≠ch ng√†nh v√† c∆° h·ªôi',
      template: 'Ph√¢n t√≠ch t√¨nh h√¨nh ng√†nh [SECTOR] hi·ªán t·∫°i, x√°c ƒë·ªãnh c√°c c∆° h·ªôi ƒë·∫ßu t∆∞ ti·ªÅm nƒÉng v√† nh·ªØng r·ªßi ro c·∫ßn l∆∞u √Ω.'
    },
    {
      key: 'financial-comparison',
      label: 'So s√°nh t·ª∑ s·ªë t√†i ch√≠nh',
      template: 'So s√°nh c√°c t·ª∑ s·ªë t√†i ch√≠nh ch√≠nh c·ªßa [STOCK_CODES] trong c√πng ng√†nh. Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu v√† ƒë∆∞a ra khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞.'
    },
    {
      key: 'valuation-analysis',
      label: 'Ph√¢n t√≠ch ƒë·ªãnh gi√°',
      template: 'Th·ª±c hi·ªán ph√¢n t√≠ch ƒë·ªãnh gi√° cho c·ªï phi·∫øu [STOCK_CODE] s·ª≠ d·ª•ng c√°c ph∆∞∆°ng ph√°p DCF, P/E, P/B. ƒê√°nh gi√° li·ªáu c·ªï phi·∫øu c√≥ ƒëang ƒë∆∞·ª£c ƒë·ªãnh gi√° th·∫•p hay cao.'
    },
    {
      key: 'risk-assessment',
      label: 'ƒê√°nh gi√° r·ªßi ro',
      template: 'ƒê√°nh gi√° c√°c r·ªßi ro ti·ªÅm ·∫©n khi ƒë·∫ßu t∆∞ v√†o [STOCK_CODE/SECTOR]. ƒê∆∞a ra chi·∫øn l∆∞·ª£c qu·∫£n l√Ω r·ªßi ro ph√π h·ª£p.'
    }
  ];

  const currentAdvisor = advisors.find(a => a.key === selectedAdvisor);

  // Load chat sessions on component mount
  useEffect(() => {
    if (currentUser) {
      loadChatSessions();
    }
  }, [currentUser]);

  // Load chat sessions
  const loadChatSessions = async () => {
    if (!currentUser) return;
    
    setLoadingSessions(true);
    try {
      const sessions = await getActiveChatSessions(currentUser.email || currentUser.id);
      setChatSessions(sessions || []);
    } catch (error) {
      console.error('Error loading chat sessions:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch chat sessions');
    } finally {
      setLoadingSessions(false);
    }
  };

  // Load chat history for selected session
  const loadChatHistory = async (sessionId) => {
    try {
      const chatData = await getAiChatHistoryById(sessionId);
      if (chatData?.chat_history) {
        const formattedMessages = chatData.chat_history.map((msg, index) => ({
          id: index + 1,
          type: msg.role === 'user' ? 'user' : 'assistant',
          content: msg.content,
          timestamp: new Date(msg.timestamp || new Date()),
          canSave: msg.role === 'assistant' && msg.role !== 'system'
        }));
        setMessages(formattedMessages);
        setSelectedAdvisor(chatData.advisorType || 'alex');
      }
    } catch (error) {
      console.error('Error loading chat history:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ chat');
    }
  };

  // Convert UI messages to API format
  const convertToApiFormat = (uiMessages) => {
    const apiMessages = [];
    
    // Add system message first
    apiMessages.push({
      role: 'system',
      content: currentAdvisor?.systemMessage || 'B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu v√† ƒë·∫ßu t∆∞.'
    });
    
    // Convert UI messages to API format
    uiMessages.forEach(msg => {
      if (msg.type === 'user') {
        apiMessages.push({
          role: 'user',
          content: msg.content
        });
      } else if (msg.type === 'assistant' && msg.id !== 1) { // Skip welcome message
        apiMessages.push({
          role: 'assistant',
          content: msg.content
        });
      }
    });
    
    return apiMessages;
  };

  // Create new chat session
  const createNewSession = async () => {
    if (!currentUser) {
      message.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o chat session');
      return;
    }

    if (!newSessionTitle.trim()) {
      message.error('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ cho chat session');
      return;
    }

    try {
      const newSession = await createNewChatSession(
        currentUser.email || currentUser.id,
        selectedAdvisor,
        newSessionTitle.trim(),
        'claude-3-5-haiku-20241022'
      );

      if (newSession.success) {
        message.success('T·∫°o chat session th√†nh c√¥ng');
        setNewSessionModalVisible(false);
        setNewSessionTitle('');
        await loadChatSessions();
        
        // Switch to new session
        setCurrentSessionId(newSession.data.id);
        setMessages([{
          id: 1,
          type: 'assistant',
          content: `Xin ch√†o! T√¥i l√† ${currentAdvisor.name}. ${currentAdvisor.description}. T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n trong lƒ©nh v·ª±c ${currentAdvisor.specialty}. B·∫°n c·∫ßn t√¥i gi√∫p g√¨?`,
          timestamp: new Date(),
          canSave: false
        }]);
      }
    } catch (error) {
      console.error('Error creating new session:', error);
      message.error('Kh√¥ng th·ªÉ t·∫°o chat session m·ªõi');
    }
  };

  // Select chat session
  const selectChatSession = (sessionId) => {
    setCurrentSessionId(sessionId);
    loadChatHistory(sessionId);
  };

  // Delete chat session
  const deleteChatSession = async (sessionId) => {
    try {
      await deleteAiChatHistory(sessionId);
      message.success('X√≥a chat session th√†nh c√¥ng');
      
      // If deleted session was current session, clear current session
      if (currentSessionId === sessionId) {
        setCurrentSessionId(null);
        setMessages([{
          id: 1,
          type: 'assistant',
          content: 'Xin ch√†o! T√¥i l√† Alex, chuy√™n gia ph√¢n t√≠ch ƒë·∫ßu t∆∞. T√¥i s·∫Ω gi√∫p b·∫°n ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† t·∫°o investment thesis. B·∫°n c√≥ th·ªÉ ch·ªçn job template ho·∫∑c ƒë·∫∑t c√¢u h·ªèi tr·ª±c ti·∫øp.',
          timestamp: new Date(),
          canSave: false
        }]);
      }
      
      await loadChatSessions();
    } catch (error) {
      console.error('Error deleting chat session:', error);
      message.error('Kh√¥ng th·ªÉ x√≥a chat session');
    }
  };

  const handleAdvisorChange = (advisor) => {
    setSelectedAdvisor(advisor.key);
    const welcomeMessage = {
      id: Date.now(),
      type: 'assistant',
      content: `Xin ch√†o! T√¥i l√† ${advisor.name}. ${advisor.description}. T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n trong lƒ©nh v·ª±c ${advisor.specialty}. B·∫°n c·∫ßn t√¥i gi√∫p g√¨?`,
      timestamp: new Date(),
      canSave: false
    };
    setMessages([welcomeMessage]);
    setCurrentSessionId(null); // Reset current session when changing advisor
  };

  const handleJobSelect = (jobKey) => {
    const job = jobTemplates.find(j => j.key === jobKey);
    if (job) {
      setInputMessage(job.template);
      setSelectedJob(jobKey);
    }
  };

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date(),
      canSave: false
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInputMessage = inputMessage;
    setInputMessage('');
    setIsTyping(true);

    try {
      // Check if we need to create a new session
      if (!currentSessionId) {
        if (!currentUser) {
          message.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ chat');
          setIsTyping(false);
          return;
        }

        // Create new session automatically
        const sessionTitle = `Chat ${new Date().toLocaleString('vi-VN')}`;
        const newSession = await createNewChatSession(
          currentUser.email || currentUser.id,
          selectedAdvisor,
          sessionTitle,
          'claude-3-5-haiku-20241022'
        );

        if (newSession.success) {
          setCurrentSessionId(newSession.data.id);
          await loadChatSessions();
        }
      }

      // Convert current messages to API format
      const chatHistory = convertToApiFormat([...messages, userMessage]);
      
      // Call the real AI API
      const response = await aiChat(
        chatHistory,
        currentInputMessage,
        'claude-3-5-haiku-20241022'
      );

      // Add AI response to messages
      const assistantMessage = {
        id: Date.now() + 1,
        type: 'assistant',
        content: response.response || response.message || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.',
        timestamp: new Date(),
        canSave: true
      };
      
      setMessages(prev => [...prev, assistantMessage]);

      // Save messages to database if we have a session
      if (currentSessionId) {
        try {
          // Add user message
          await addMessageToChat(currentSessionId, {
            role: 'user',
            content: currentInputMessage,
            timestamp: new Date().toISOString()
          });

          // Add assistant message
          await addMessageToChat(currentSessionId, {
            role: 'assistant',
            content: assistantMessage.content,
            timestamp: new Date().toISOString()
          });

          // Check if we've reached the 5 message limit
          const currentSession = await getAiChatHistoryById(currentSessionId);
          if (currentSession?.chat_history?.length >= 5) {
            message.warning('ƒê√£ ƒë·∫°t gi·ªõi h·∫°n 5 tin nh·∫Øn cho session n√†y. Vui l√≤ng t·∫°o session m·ªõi ƒë·ªÉ ti·∫øp t·ª•c.');
          }
        } catch (error) {
          console.error('Error saving messages:', error);
          message.warning('Kh√¥ng th·ªÉ l∆∞u tin nh·∫Øn v√†o database');
        }
      }

    } catch (error) {
      console.error('Error sending message to AI:', error);
      
      // Add error message
      const errorMessage = {
        id: Date.now() + 1,
        type: 'assistant',
        content: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.',
        timestamp: new Date(),
        canSave: false
      };
      
      setMessages(prev => [...prev, errorMessage]);
      message.error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsTyping(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const handleSaveResponse = (messageContent) => {
    setSelectedResponse(messageContent);
    setSaveModalVisible(true);
  };

  const handleConfirmSave = () => {
    if (!selectedThesisId) {
      message.error('Vui l√≤ng ch·ªçn thesis ƒë·ªÉ l∆∞u');
      return;
    }
    
    onSaveToThesis(selectedResponse, selectedThesisId);
    message.success('ƒê√£ l∆∞u ph·∫£n h·ªìi v√†o thesis');
    setSaveModalVisible(false);
    setSelectedResponse('');
    setSelectedThesisId('');
  };

  const advisorMenuItems = advisors.map(advisor => ({
    key: advisor.key,
    label: (
      <div className={styles.advisorMenuItem}>
        <span className={styles.advisorAvatar}>{advisor.avatar}</span>
        <div>
          <div className={styles.advisorName}>{advisor.name}</div>
          <div className={styles.advisorDesc}>{advisor.description}</div>
        </div>
      </div>
    ),
    onClick: () => handleAdvisorChange(advisor)
  }));

  return (
    <div className={styles.playgroundContainer}>
      <div className={styles.playgroundContent}>
        {/* Chat Sessions Sidebar */}
        <div className={styles.chatSessionsSidebar}>
          <div className={styles.sidebarHeader}>
            <h3><HistoryOutlined /> Chat Sessions</h3>
            <Button 
              type="primary" 
              icon={<PlusOutlined />}
              size="small"
              onClick={() => setNewSessionModalVisible(true)}
            >
              T·∫°o m·ªõi
            </Button>
          </div>
          
          <div className={styles.sessionsList}>
            {loadingSessions ? (
              <div className={styles.loadingText}>ƒêang t·∫£i...</div>
            ) : chatSessions.length === 0 ? (
              <Empty 
                description="Ch∆∞a c√≥ chat session n√†o"
                image={Empty.PRESENTED_IMAGE_SIMPLE}
              />
            ) : (
              <List
                size="small"
                dataSource={chatSessions}
                renderItem={(session) => (
                  <List.Item
                    className={`${styles.sessionItem} ${currentSessionId === session.id ? styles.activeSession : ''}`}
                    onClick={() => selectChatSession(session.id)}
                  >
                    <div className={styles.sessionContent}>
                      <div className={styles.sessionTitle}>
                        <MessageOutlined /> {session.title}
                      </div>
                      <div className={styles.sessionInfo}>
                        <span className={styles.advisorType}>{session.advisorType}</span>
                        <span className={styles.messageCount}>
                          {session.chat_history?.length || 0}/5
                        </span>
                      </div>
                    </div>
                    <Popconfirm
                      title="X√≥a chat session?"
                      description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a chat session n√†y?"
                      onConfirm={(e) => {
                        e.stopPropagation();
                        deleteChatSession(session.id);
                      }}
                      okText="X√≥a"
                      cancelText="H·ªßy"
                    >
                      <Button
                        type="text"
                        icon={<DeleteOutlined />}
                        size="small"
                        className={styles.deleteButton}
                        onClick={(e) => e.stopPropagation()}
                      />
                    </Popconfirm>
                  </List.Item>
                )}
              />
            )}
          </div>
        </div>

        {/* Main Chat Area */}
        <div className={styles.chatMainArea}>
          {/* Advisor Selection */}
          <div className={styles.advisorSection}>
            <div className={styles.sectionLabel}>Ch·ªçn Advisor:</div>
            <Dropdown
              menu={{ items: advisorMenuItems }}
              placement="bottomLeft"
              trigger={['click']}
            >
              <Button className={styles.advisorButton}>
                <span className={styles.advisorAvatar}>{currentAdvisor?.avatar}</span>
                <div className={styles.advisorInfo}>
                  <div className={styles.advisorName}>{currentAdvisor?.name}</div>
                  <div className={styles.advisorSpecialty}>{currentAdvisor?.specialty}</div>
                </div>
              </Button>
            </Dropdown>
          </div>

          {/* Job Templates */}
          <div className={styles.jobSection}>
            <div className={styles.sectionLabel}>Job Templates:</div>
            <div className={styles.jobButtons}>
              {jobTemplates.map(job => (
                <Button
                  key={job.key}
                  size="small"
                  icon={<BulbOutlined />}
                  onClick={() => handleJobSelect(job.key)}
                  className={`${styles.jobButton} ${selectedJob === job.key ? styles.selected : ''}`}
                >
                  {job.label}
                </Button>
              ))}
            </div>
          </div>

          {/* Current Session Info */}
          {currentSessionId && (
            <div className={styles.currentSessionInfo}>
              <span>Session hi·ªán t·∫°i: {chatSessions.find(s => s.id === currentSessionId)?.title}</span>
              <span className={styles.messageLimit}>
                {messages.filter(m => m.type !== 'system').length}/5 tin nh·∫Øn
              </span>
            </div>
          )}

          {/* Chat Interface */}
          <div className={styles.chatContainer}>
            <div className={styles.messagesArea}>
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`${styles.messageWrapper} ${
                    message.type === 'user' ? styles.userMessage : styles.assistantMessage
                  }`}
                >
                  <Avatar
                    size={32}
                    icon={message.type === 'user' ? <UserOutlined /> : <RobotOutlined />}
                    className={styles.messageAvatar}
                    style={message.type === 'assistant' ? { background: '#667eea' } : {}}
                  />
                  <div className={styles.messageContent}>
                    <div className={styles.messageText}>
                      {message.content}
                      {message.canSave && (
                        <Button
                          size="small"
                          icon={<SaveOutlined />}
                          onClick={() => handleSaveResponse(message.content)}
                          className={styles.saveButton}
                          type="link"
                        >
                          L∆∞u v√†o Thesis
                        </Button>
                      )}
                    </div>
                    <div className={styles.messageTime}>
                      {message.timestamp.toLocaleTimeString('vi-VN', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                </div>
              ))}
              
              {isTyping && (
                <div className={`${styles.messageWrapper} ${styles.assistantMessage}`}>
                  <Avatar
                    size={32}
                    icon={<RobotOutlined />}
                    className={styles.messageAvatar}
                    style={{ background: '#667eea' }}
                  />
                  <div className={styles.messageContent}>
                    <div className={styles.typingIndicator}>
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className={styles.inputArea}>
              <div className={styles.inputWrapper}>
                <TextArea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p c√¢u h·ªèi ho·∫∑c ch·ªçn job template..."
                  autoSize={{ minRows: 1, maxRows: 4 }}
                  className={styles.messageInput}
                />
                <Button
                  type="primary"
                  icon={<SendOutlined />}
                  onClick={sendMessage}
                  disabled={!inputMessage.trim() || isTyping}
                  className={styles.sendButton}
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* New Session Modal */}
      <Modal
        title="T·∫°o Chat Session M·ªõi"
        open={newSessionModalVisible}
        onOk={createNewSession}
        onCancel={() => {
          setNewSessionModalVisible(false);
          setNewSessionTitle('');
        }}
        okText="T·∫°o"
        cancelText="H·ªßy"
      >
        <div className={styles.newSessionForm}>
          <div className={styles.formLabel}>Ti√™u ƒë·ªÅ session:</div>
          <Input
            value={newSessionTitle}
            onChange={(e) => setNewSessionTitle(e.target.value)}
            placeholder="Nh·∫≠p ti√™u ƒë·ªÅ cho chat session..."
            onKeyPress={(e) => {
              if (e.key === 'Enter') {
                createNewSession();
              }
            }}
          />
        </div>
      </Modal>

      {/* Save to Thesis Modal */}
      <Modal
        title="L∆∞u ph·∫£n h·ªìi v√†o Thesis"
        open={saveModalVisible}
        onOk={handleConfirmSave}
        onCancel={() => setSaveModalVisible(false)}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <div className={styles.saveModalContent}>
          <div className={styles.modalLabel}>Ch·ªçn Thesis:</div>
          <Select
            placeholder="Ch·ªçn thesis ƒë·ªÉ l∆∞u ph·∫£n h·ªìi"
            style={{ width: '100%', marginBottom: 16 }}
            value={selectedThesisId}
            onChange={setSelectedThesisId}
          >
            {thesis.map(t => (
              <Option key={t.id} value={t.id}>
                {t.title} - {new Date(t.date).toLocaleDateString('vi-VN')}
              </Option>
            ))}
          </Select>
          <div className={styles.modalLabel}>N·ªôi dung s·∫Ω l∆∞u:</div>
          <div className={styles.responsePreview}>
            {selectedResponse.substring(0, 200)}...
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default PlaygroundTab;
