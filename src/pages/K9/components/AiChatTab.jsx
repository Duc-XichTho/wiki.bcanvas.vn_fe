import {
	BookOutlined,
	DeleteOutlined,
	GlobalOutlined,
	HistoryOutlined,
	MenuOutlined,
	MessageOutlined,
	PlusOutlined,
	QuestionCircleOutlined,
	RobotOutlined,
	SendOutlined,
	SettingOutlined,
} from '@ant-design/icons';
import {
	Alert,
	Avatar,
	Button,
	Empty,
	Form,
	Input,
	List,
	message,
	Modal,
	Popconfirm,
	Select,
	Space,
	Switch,
	Tooltip,
} from 'antd';
import DOMPurify from 'dompurify';
import { Sparkles } from 'lucide-react';
import { marked } from 'marked';
import React, { useContext, useEffect, useRef, useState } from 'react';
import { aiChat, aiGen, webSearchChat } from '../../../apis/botService.jsx';
import {
	addMessageToChat,
	createNewChatSession,
	deleteAiChatHistory,
	getActiveChatSessions,
	getAiChatHistoryById,
	getAISummaryById,
	getK9Id,
	updateAiChatHistory,
	getAllThesis,
	createThesis,
	updateThesis,
	getSettingByTypeExternal,
	createOrUpdateSettingByTypeExternal,
	aiGenWithEmbedding, getEmbedingDataBySourceId, searchEmbedingDataByTextForTable,
} from '../../../apis/serviceApi/k9Service';
import { MyContext } from '../../../MyContext';
import styles from '../K9.module.css';
import AdvisorSettingModal from './AdvisorSettingModal';
import AiPipelineSettingModal from './AiPipelineSettingModal';
import TemplateSettingModal from './TemplateSettingModal';
import TemplateEditModal from './TemplateEditModal';

// Component ƒë·ªÉ hi·ªÉn th·ªã title v·ªõi async data
const SourceTitle = ({ sourceId, table, fallbackTitle }) => {
	const [title, setTitle] = useState(fallbackTitle);
	const [loading, setLoading] = useState(false);

	useEffect(() => {
		const fetchTitle = async () => {
			if (!sourceId || !table) return;

			setLoading(true);
			try {
				let data;
				if (table === 'news') {
					data = await getK9Id(sourceId);
				} else if (table === 'report') {
					data = await getAISummaryById(sourceId);
				}

				if (data && data.data && data.data.title) {
					setTitle(data.data.title);
				}
			} catch (error) {
				console.error('Error fetching title:', error);
			} finally {
				setLoading(false);
			}
		};

		fetchTitle();
	}, [sourceId, table]);

	return (
		<span>
			{loading ? 'ƒêang t·∫£i...' : title}
		</span>
	);
};

// Constants for localStorage keys
const STORAGE_KEYS = {
	LAST_SELECTED_SESSION: 'ai_chat_last_selected_session',
	LAST_SELECTED_ADVISOR: 'ai_chat_last_selected_advisor',
};

const { TextArea } = Input;
const { Option } = Select;

// H√†m t√≠nh th·ªùi gian ƒë√£ t·∫°o (gi·ªëng nh∆∞ tab news)
const formatTimeAgo = (createdAt) => {
	if (!createdAt) return '-';

	const date = new Date(createdAt);
	if (isNaN(date.getTime())) return '-';

	const now = new Date();
	const diffMs = now - date;
	const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
	const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

	if (diffDays > 0) {
		return `${diffDays} ng√†y tr∆∞·ªõc`;
	} else if (diffHours > 0) {
		return `${diffHours} gi·ªù tr∆∞·ªõc`;
	} else {
		const diffMinutes = Math.floor(diffMs / (1000 * 60));
		return diffMinutes > 0 ? `${diffMinutes} ph√∫t tr∆∞·ªõc` : 'V·ª´a xong';
	}
};

const advisors = [
	{
		key: 'Ch·ªçn Advisor',
		name: 'Analyst',
		systemMessage: '',
	},
];

const jobTemplates = [
	{
		key: 'stock-news',
		label: 'T√≥m t·∫Øt tin t·ª©c c·ªï phi·∫øu',
		template: 'H√£y t√≥m t·∫Øt v√† ph√¢n t√≠ch nh·ªØng tin t·ª©c g·∫ßn ƒë√¢y li√™n quan ƒë·∫øn c·ªï phi·∫øu &&&. ƒê√°nh gi√° t√°c ƒë·ªông ƒë·∫øn gi√° c·ªï phi·∫øu v√† ƒë∆∞a ra khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞.',
	},
	{
		key: 'sector-analysis',
		label: 'Ph√¢n t√≠ch ng√†nh v√† c∆° h·ªôi',
		template: 'Ph√¢n t√≠ch t√¨nh h√¨nh ng√†nh &&& hi·ªán t·∫°i, x√°c ƒë·ªãnh c√°c c∆° h·ªôi ƒë·∫ßu t∆∞ ti·ªÅm nƒÉng v√† nh·ªØng r·ªßi ro c·∫ßn l∆∞u √Ω.',
	},
	{
		key: 'financial-comparison',
		label: 'So s√°nh t·ª∑ s·ªë t√†i ch√≠nh',
		template: 'So s√°nh c√°c t·ª∑ s·ªë t√†i ch√≠nh ch√≠nh c·ªßa &&& trong c√πng ng√†nh. Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh, ƒëi·ªÉm y·∫øu v√† ƒë∆∞a ra khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞.',
	},
	{
		key: 'valuation-analysis',
		label: 'Ph√¢n t√≠ch ƒë·ªãnh gi√°',
		template: 'Th·ª±c hi·ªán ph√¢n t√≠ch ƒë·ªãnh gi√° cho c·ªï phi·∫øu &&& s·ª≠ d·ª•ng c√°c ph∆∞∆°ng ph√°p DCF, P/E, P/B. ƒê√°nh gi√° li·ªáu c·ªï phi·∫øu c√≥ ƒëang ƒë∆∞·ª£c ƒë·ªãnh gi√° th·∫•p hay cao.',
	},
	{
		key: 'risk-assessment',
		label: 'ƒê√°nh gi√° r·ªßi ro',
		template: 'ƒê√°nh gi√° c√°c r·ªßi ro ti·ªÅm ·∫©n khi ƒë·∫ßu t∆∞ v√†o &&&. ƒê∆∞a ra chi·∫øn l∆∞·ª£c qu·∫£n l√Ω r·ªßi ro ph√π h·ª£p.',
	},
];

const AiChatTab = () => {
	const { currentUser } = useContext(MyContext);
	const [selectedAdvisor, setSelectedAdvisor] = useState('Ch·ªçn Advisor');
	const [inputMessage, setInputMessage] = useState('');
	const [isTyping, setIsTyping] = useState(false);
	const [messages, setMessages] = useState([]);
	const [currentSessionId, setCurrentSessionId] = useState(null);
	const [chatSessions, setChatSessions] = useState([]);
	const [loadingSessions, setLoadingSessions] = useState(false);

	const [advisorModalVisible, setAdvisorModalVisible] = useState(false);
	const [templateModalVisible, setTemplateModalVisible] = useState(false);
	const [pipelineModalVisible, setPipelineModalVisible] = useState(false);
	const [templateEditModalVisible, setTemplateEditModalVisible] = useState(false);
	const [selectedTemplate, setSelectedTemplate] = useState(null);
	const [advisorList, setAdvisorList] = useState([]);
	const [pipelineList, setPipelineList] = useState([]);
	const [advisorLoading, setAdvisorLoading] = useState(false);
	const [templateList, setTemplateList] = useState(jobTemplates);
	const [showTemplateSuggestions, setShowTemplateSuggestions] = useState(false);
	const [templateSuggestions, setTemplateSuggestions] = useState([]);
	const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState(-1);
	const [cursorPosition, setCursorPosition] = useState(0);
	const suggestionsRef = useRef(null);
	const [editingKey, setEditingKey] = useState('');
	const [form] = Form.useForm();
	const [advisorEditModal, setAdvisorEditModal] = useState({ visible: false, editing: null });
	const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
	const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
	const [templateError, setTemplateError] = useState(false);

	// Embedding search states
	const [useEmbeddingSearch, setUseEmbeddingSearch] = useState(false);
	const [embeddingSearchLoading, setEmbeddingSearchLoading] = useState(false);
	const [noEmbeddingResults, setNoEmbeddingResults] = useState(false);

	// Embedding detail popup states
	const [embeddingDetailModal, setEmbeddingDetailModal] = useState({ visible: false, data: null });
	const [embeddingDetailLoading, setEmbeddingDetailLoading] = useState(false);
	const [hasRestoredSession, setHasRestoredSession] = useState(false);

	// Thesis states
	const [thesisModalVisible, setThesisModalVisible] = useState(false);
	const [thesisForm] = Form.useForm();
	const [creatingThesis, setCreatingThesis] = useState(false);
	const [thesisData, setThesisData] = useState({ content: '', summary: '', name: '' });
	const [thesisList, setThesisList] = useState([]);
	const [selectedThesisId, setSelectedThesisId] = useState(null);
	const [isCreatingNewThesis, setIsCreatingNewThesis] = useState(true);
	const [generatingSummary, setGeneratingSummary] = useState(false);
	const [thesisMode, setThesisMode] = useState('original'); // 'original' ho·∫∑c 'summarized'
	const [isChatThesis, setIsChatThesis] = useState(false); // Ph√¢n bi·ªát l∆∞u 1 chat hay c·∫£ h·ªôi tho·∫°i
	const [summarizePrompt, setSummarizePrompt] = useState('D·ª±a v√†o n·ªôi dung nh·∫≠n ƒë∆∞·ª£c, t·ªïng h·ª£p v√† t√≥m t·∫Øt l·∫°i ƒëi·ªÉm ch√≠nh theo c·∫•u tr√∫c, trong ƒë√≥ n·ªôi dung g·ªìm TITLE, c√°c header c·∫•p 1, v√† c√°c short paragraph. T·∫°o ra ƒë·ªãnh d·∫°ng t√≥m t·∫Øt l√† markdown style.\n\nY√™u c·∫ßu:\n- ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng b·∫£n t·ªïng h·ª£p t√≥m t·∫Øt l√† Markdown\n- R√∫t g·ªçn, nh∆∞ng gi·ªØ ƒë·ªß √Ω ch√≠nh, l·ªëi vi·∫øt s√∫c t√≠ch ng·∫Øn g·ªçn, lo·∫°i b·ªè ƒëi c√¢u t·ª´ th·ª´a th√£i\n- C·∫•u tr√∫c ph√π h·ª£p, logic');

	// Template sidebar states
	const [templateSidebarCollapsed, setTemplateSidebarCollapsed] = useState(false);

	// H√†m load danh s√°ch thesis
	const loadThesisList = async () => {
		try {
			const data = await getAllThesis();
			const thesisArray = Array.isArray(data) ? data : (data?.data || data?.thesis || []);

			setThesisList(thesisArray);
		} catch (error) {
			console.error('Error loading thesis list:', error);
			setThesisList([]);
		}
	};

	// H√†m t·∫°o t√™n s·ªï theo ng√†y
	const getDailyThesisTitle = (date = new Date()) => {
		const day = date.getDate().toString().padStart(2, '0');
		const month = (date.getMonth() + 1).toString().padStart(2, '0');
		const year = date.getFullYear();
		return `S·ªï ng√†y ${day}/${month}/${year}`;
	};

	// H√†m t·∫°o t√™n thesis m·∫∑c ƒë·ªãnh
	const getDefaultThesisName = (date = new Date()) => {
		const day = date.getDate().toString().padStart(2, '0');
		const month = (date.getMonth() + 1).toString().padStart(2, '0');
		const year = date.getFullYear();
		return `S·ªï ng√†y ${day}/${month}/${year}`;
	};

	// H√†m t√¨m ho·∫∑c t·∫°o thesis theo ng√†y
	const findOrCreateDailyThesis = async (targetDate = new Date()) => {
		const dailyTitle = getDailyThesisTitle(targetDate);
		const userEmail = currentUser?.email || currentUser?.id;

		// T√¨m thesis theo ng√†y ƒë√£ t·ªìn t·∫°i
		const existingThesis = thesisList.find(thesis =>
			thesis.summary === dailyTitle &&
			thesis.userCreated === userEmail
		);

		if (existingThesis) {
			console.log('üìÖ Found existing daily thesis:', existingThesis.id);
			return existingThesis.id;
		}

		// T·∫°o thesis m·ªõi theo ng√†y
		try {
			const newDailyThesis = {
				content: `S·ªï c√° nh√¢n ng√†y ${targetDate.toLocaleDateString('vi-VN')}`,
				summary: dailyTitle,
				name: dailyTitle, // S·ª≠ d·ª•ng dailyTitle l√†m t√™n
				userCreated: userEmail,
				list_chat: [],
				createAt: new Date().toISOString(),
			};

			console.log('üìÖ Creating new daily thesis:', newDailyThesis);
			const result = await createThesis(newDailyThesis);

			if (result && result.data && result.data.id) {
				// Reload thesis list ƒë·ªÉ c·∫≠p nh·∫≠t
				await loadThesisList();
				console.log('‚úÖ Daily thesis created successfully:', result.data.id);
				return result.data.id;
			}
		} catch (error) {
			console.error('‚ùå Error creating daily thesis:', error);
			throw error;
		}

		return null;
	};

	// H√†m lo·∫°i b·ªè markdown code block wrapper
	const cleanMarkdownWrapper = (text) => {
		if (!text) return text;

		// Lo·∫°i b·ªè ```markdown ... ``` ho·∫∑c ``` ... ```
		const markdownBlockRegex = /^```(?:markdown)?\s*\n?([\s\S]*?)\n?```$/;
		const match = text.trim().match(markdownBlockRegex);

		if (match) {
			console.log('üßπ Cleaned markdown wrapper from AI response');
			return match[1].trim();
		}

		return text;
	};

	// H√†m r√∫t g·ªçn n·ªôi dung b·∫±ng AI
	const summarizeContent = async (content) => {
		try {
			const response = await aiGen(
				`${summarizePrompt}

${content}`,
				'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n t√≥m t·∫Øt n·ªôi dung m·ªôt c√°ch ng·∫Øn g·ªçn v√† ch√≠nh x√°c. S·ª≠ d·ª•ng ng√¥n ng·ªØ Vi·ªát Nam, c√¢u t·ª´ tr·ªãnh tr·ªçng.',
				'gpt-4.1-2025-04-14',
				'text',
			);

			if (response && response.result) {
				const cleanedResult = cleanMarkdownWrapper(response.result.trim());
				return cleanedResult;
			}
		} catch (error) {
			console.error('‚ùå Error summarizing content:', error);
		}
		return content; // Fallback v·ªÅ n·ªôi dung g·ªëc n·∫øu kh√¥ng t√≥m t·∫Øt ƒë∆∞·ª£c
	};

	// H√†m m·ªü modal t·∫°o thesis cho 1 chat
	const openThesisModal = async (messageContent, messageId) => {
		if (!messageContent || !currentUser) return;

		// Load danh s√°ch thesis
		await loadThesisList();

		// Set mode cho l∆∞u 1 chat (m·∫∑c ƒë·ªãnh l√† nguy√™n vƒÉn)
		setIsChatThesis(false);
		setThesisMode('original');

		// T·∫°o summary t·∫°m th·ªùi t·ª´ n·ªôi dung (l·∫•y 100 k√Ω t·ª± ƒë·∫ßu)
		const tempSummary = messageContent.length > 100
			? messageContent.substring(0, 100) + '...'
			: messageContent;

		// T·∫°o t√™n thesis m·∫∑c ƒë·ªãnh
		const defaultName = getDefaultThesisName();

		// M·ªü modal tr∆∞·ªõc v·ªõi summary t·∫°m th·ªùi
		setThesisData({
			content: messageContent,
			summary: tempSummary,
			name: defaultName,
		});

		thesisForm.setFieldsValue({
			content: messageContent,
			summary: tempSummary,
			name: defaultName,
		});

		// M·∫∑c ƒë·ªãnh ch·ªçn s·ªï theo ng√†y
		setIsCreatingNewThesis(false);

		// Ch·ªâ t√¨m thesis theo ng√†y (kh√¥ng t·∫°o m·ªõi), s·∫Ω t·∫°o khi user b·∫•m l∆∞u
		const dailyTitle = getDailyThesisTitle();
		const userEmail = currentUser?.email || currentUser?.id;
		const existingThesis = thesisList.find(thesis =>
			thesis.summary === dailyTitle &&
			thesis.userCreated === userEmail
		);

		if (existingThesis) {
			setSelectedThesisId(existingThesis.id);
			console.log('üìÖ Found existing daily thesis:', existingThesis.id);
		} else {
			// N·∫øu ch∆∞a c√≥ s·ªï ng√†y h√¥m nay, s·∫Ω t·∫°o khi user b·∫•m l∆∞u
			setSelectedThesisId(null);
			console.log('üìÖ No daily thesis found, will create when user saves');
		}

		setThesisModalVisible(true);

		// Sau khi m·ªü modal, b·∫Øt ƒë·∫ßu t·∫°o t√≥m t·∫Øt b·∫±ng AI
		setGeneratingSummary(true);
		try {
			console.log('ü§ñ Generating AI summary for single chat thesis modal...');

			// S·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o t√≥m t·∫Øt
			const prompt = `H√£y t·∫°o m·ªôt t√≥m t·∫Øt ng·∫Øn g·ªçn v√† s√∫c t√≠ch cho n·ªôi dung sau ƒë√¢y. T√≥m t·∫Øt n√™n c√≥ ƒë·ªô d√†i kho·∫£ng 100-150 k√Ω t·ª± v√† n√™u b·∫≠t nh·ªØng ƒëi·ªÉm ch√≠nh:

${messageContent}

T√≥m t·∫Øt:`;

			const response = await aiGen(
				prompt,
				'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n t·∫°o t√≥m t·∫Øt ng·∫Øn g·ªçn v√† ch√≠nh x√°c. S·ª≠ d·ª•ng ng√¥n ng·ªØ Vi·ªát Nam, c√¢u t·ª´ tr·ªãnh tr·ªçng.',
				'gpt-4.1-2025-04-14',
				'text',
			);
			console.log('ü§ñ AI summary response:', response);

			if (response && response.result) {
				const rawSummary = response.result.trim();
				const aiSummary = cleanMarkdownWrapper(rawSummary);
				console.log('‚úÖ AI summary generated successfully:', aiSummary);

				// C·∫≠p nh·∫≠t form v√† state v·ªõi AI summary
				thesisForm.setFieldValue('summary', aiSummary);
				setThesisData(prev => ({ ...prev, summary: aiSummary }));
			} else {
				console.log('‚ö†Ô∏è AI summary generation failed, keeping temp summary');
				message.warning('Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông. Vui l√≤ng ch·ªânh s·ª≠a t√≥m t·∫Øt th·ªß c√¥ng.');
			}
		} catch (error) {
			console.error('‚ùå Error generating AI summary:', error);
			message.warning('Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông. Vui l√≤ng ch·ªânh s·ª≠a t√≥m t·∫Øt th·ªß c√¥ng.');
		} finally {
			setGeneratingSummary(false);
		}
	};

	// H√†m chuy·ªÉn ƒë·ªïi to√†n b·ªô chat th√†nh ƒë·ªãnh d·∫°ng thesis
	const formatChatForThesis = (chatMessages) => {
		const chatContent = chatMessages
			.filter(msg => msg.type !== 'data-sources' && msg.id !== 1) // Lo·∫°i b·ªè tin nh·∫Øn ch√†o v√† data sources
			.map(msg => {
				const timestamp = msg.timestamp.toLocaleString('vi-VN', {
					year: 'numeric',
					month: '2-digit',
					day: '2-digit',
					hour: '2-digit',
					minute: '2-digit'
				});

				if (msg.type === 'user') {
					return `**Ng∆∞·ªùi d√πng** (${timestamp}):\n${msg.content}\n`;
				} else if (msg.type === 'assistant') {
					const advisorName = msg.advisor?.name || 'AI Assistant';
					return `**${advisorName}** (${timestamp}):\n${msg.content}\n`;
				}
				return '';
			})
			.filter(content => content.length > 0)
			.join('\n---\n\n');

		return chatContent;
	};

	// H√†m m·ªü modal t·∫°o thesis cho to√†n b·ªô cu·ªôc tr√≤ chuy·ªán
	const openChatThesisModal = async () => {
		if (!currentUser || !messages || messages.length <= 1) {
			message.warning('Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒë·ªÉ l∆∞u');
			return;
		}

		// Load danh s√°ch thesis
		await loadThesisList();

		// Set mode cho l∆∞u c·∫£ h·ªôi tho·∫°i (m·∫∑c ƒë·ªãnh l√† r√∫t g·ªçn)
		setIsChatThesis(true);
		setThesisMode('summarized');

		// Chuy·ªÉn ƒë·ªïi to√†n b·ªô chat th√†nh ƒë·ªãnh d·∫°ng thesis
		const chatContent = formatChatForThesis(messages);

		// T·∫°o summary t·∫°m th·ªùi t·ª´ session title ho·∫∑c tin nh·∫Øn ƒë·∫ßu ti√™n
		const currentSession = chatSessions.find(s => s.id === currentSessionId);
		const sessionTitle = currentSession?.title || 'Cu·ªôc tr√≤ chuy·ªán';
		const tempSummary = `Cu·ªôc tr√≤ chuy·ªán: ${sessionTitle}`;

		// T·∫°o t√™n thesis m·∫∑c ƒë·ªãnh
		const defaultName = getDefaultThesisName();

		// M·ªü modal tr∆∞·ªõc v·ªõi summary t·∫°m th·ªùi
		setThesisData({
			content: chatContent,
			summary: tempSummary,
			name: defaultName,
		});

		thesisForm.setFieldsValue({
			content: chatContent,
			summary: tempSummary,
			name: defaultName,
		});

		// M·∫∑c ƒë·ªãnh ch·ªçn s·ªï theo ng√†y
		setIsCreatingNewThesis(false);

		// Ch·ªâ t√¨m thesis theo ng√†y (kh√¥ng t·∫°o m·ªõi), s·∫Ω t·∫°o khi user b·∫•m l∆∞u
		const dailyTitle = getDailyThesisTitle();
		const userEmail = currentUser?.email || currentUser?.id;
		const existingThesis = thesisList.find(thesis =>
			thesis.summary === dailyTitle &&
			thesis.userCreated === userEmail
		);

		if (existingThesis) {
			setSelectedThesisId(existingThesis.id);
			console.log('üìÖ Found existing daily thesis for chat:', existingThesis.id);
		} else {
			// N·∫øu ch∆∞a c√≥ s·ªï ng√†y h√¥m nay, s·∫Ω t·∫°o khi user b·∫•m l∆∞u
			setSelectedThesisId(null);
			console.log('üìÖ No daily thesis found for chat, will create when user saves');
		}

		setThesisModalVisible(true);

		// Sau khi m·ªü modal, b·∫Øt ƒë·∫ßu t·∫°o t√≥m t·∫Øt b·∫±ng AI
		setGeneratingSummary(true);
		try {
			console.log('ü§ñ Generating AI summary for full chat thesis modal...');

			// L·∫•y n·ªôi dung ch√≠nh t·ª´ cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ t·∫°o t√≥m t·∫Øt
			const mainContent = messages
				.filter(msg => msg.type !== 'data-sources' && msg.id !== 1)
				.slice(0, 3) // L·∫•y 3 tin nh·∫Øn ƒë·∫ßu ti√™n
				.map(msg => msg.content)
				.join(' ');

			const prompt = `H√£y t·∫°o m·ªôt t√≥m t·∫Øt ng·∫Øn g·ªçn cho cu·ªôc tr√≤ chuy·ªán sau ƒë√¢y. T√≥m t·∫Øt n√™n c√≥ ƒë·ªô d√†i kho·∫£ng 100-150 k√Ω t·ª± v√† n√™u b·∫≠t ch·ªß ƒë·ªÅ ch√≠nh c·ªßa cu·ªôc tr√≤ chuy·ªán:

${mainContent}

T√≥m t·∫Øt cu·ªôc tr√≤ chuy·ªán:`;

			const response = await aiGen(
				prompt,
				'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n t·∫°o t√≥m t·∫Øt ng·∫Øn g·ªçn v√† ch√≠nh x√°c cho c√°c cu·ªôc tr√≤ chuy·ªán. S·ª≠ d·ª•ng ng√¥n ng·ªØ Vi·ªát Nam, c√¢u t·ª´ tr·ªãnh tr·ªçng.',
				'gpt-4.1-2025-04-14',
				'text',
			);
			console.log('ü§ñ AI chat summary response:', response);

			if (response && response.result) {
				const rawSummary = response.result.trim();
				const aiSummary = cleanMarkdownWrapper(rawSummary);
				console.log('‚úÖ AI chat summary generated successfully:', aiSummary);

				// C·∫≠p nh·∫≠t form v√† state v·ªõi AI summary
				thesisForm.setFieldValue('summary', aiSummary);
				setThesisData(prev => ({ ...prev, summary: aiSummary }));
			} else {
				console.log('‚ö†Ô∏è AI chat summary generation failed, keeping temp summary');
				message.warning('Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông. Vui l√≤ng ch·ªânh s·ª≠a t√≥m t·∫Øt th·ªß c√¥ng.');
			}
		} catch (error) {
			console.error('‚ùå Error generating AI chat summary:', error);
			message.warning('Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông. Vui l√≤ng ch·ªânh s·ª≠a t√≥m t·∫Øt th·ªß c√¥ng.');
		} finally {
			setGeneratingSummary(false);
		}
	};

	// H√†m t·∫°o thesis t·ª´ modal
	const createThesisFromModal = async (values) => {
		if (!currentUser) return;

		// Validation
		if (!isCreatingNewThesis && !selectedThesisId) {
			message.error('Vui l√≤ng ch·ªçn thesis ƒë·ªÉ th√™m v√†o');
			return;
		}

		setCreatingThesis(true);
		try {
			console.log('Creating thesis with values:', values);
			console.log('Thesis mode:', thesisMode);
			console.log('Is chat thesis:', isChatThesis);

			// X·ª≠ l√Ω n·ªôi dung d·ª±a tr√™n mode
			let finalContent = values.content;

			// N·∫øu mode l√† r√∫t g·ªçn, s·ª≠ d·ª•ng AI ƒë·ªÉ r√∫t g·ªçn
			if (thesisMode === 'summarized') {
				finalContent = await summarizeContent(values.content);
			}

			const chatData = {
				order: 1, // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t n·∫øu th√™m v√†o thesis s·∫µn c√≥
				content: finalContent,
				summary: values.summary,
				mode: thesisMode, // L∆∞u th√¥ng tin mode
				originalContent: thesisMode === 'summarized' ? values.content : null, // L∆∞u n·ªôi dung g·ªëc n·∫øu r√∫t g·ªçn
			};

			if (isCreatingNewThesis) {
				// T·∫°o thesis m·ªõi v·ªõi summary t·ª´ form
				const newThesisData = {
					content: finalContent, // L∆∞u content ƒë√£ x·ª≠ l√Ω v√†o thesis ch√≠nh
					summary: values.summary, // L∆∞u summary v√†o thesis ch√≠nh
					name: values.name || getDefaultThesisName(), // L∆∞u t√™n thesis
					userCreated: currentUser?.email || currentUser?.id,
					list_chat: [chatData],
					createAt: new Date().toISOString(),
				};
				const result = await createThesis(newThesisData);
				console.log('Thesis creation result:', result);
				message.success('ƒê√£ t·∫°o thesis m·ªõi th√†nh c√¥ng!');
				loadThesisList(); // Reload the list
			} else {
				// Th√™m v√†o thesis s·∫µn c√≥ ho·∫∑c t·∫°o m·ªõi thesis theo ng√†y
				let targetThesisId = selectedThesisId;

				// N·∫øu kh√¥ng c√≥ selectedThesisId, t·∫°o thesis theo ng√†y m·ªõi
				if (!targetThesisId) {
					console.log('üìÖ Creating new daily thesis...');
					const dailyThesisId = await findOrCreateDailyThesis();
					if (dailyThesisId) {
						targetThesisId = dailyThesisId;
						console.log('üìÖ Created daily thesis:', dailyThesisId);
					} else {
						message.error('Kh√¥ng th·ªÉ t·∫°o s·ªï theo ng√†y');
						return;
					}
				}

				const selectedThesis = thesisList.find(t => t.id === targetThesisId);
				if (!selectedThesis) {
					// Reload thesis list v√† th·ª≠ l·∫°i
					await loadThesisList();
					const reloadedThesis = thesisList.find(t => t.id === targetThesisId);
					if (!reloadedThesis) {
						message.error('Kh√¥ng t√¨m th·∫•y thesis ƒë√£ ch·ªçn');
						return;
					}
				}

				const currentThesis = selectedThesis || thesisList.find(t => t.id === targetThesisId);
				const existingListChat = currentThesis.list_chat || [];
				const newOrder = existingListChat.length + 1;
				chatData.order = newOrder;

				const updatedListChat = [...existingListChat, chatData];
				console.log('Updated list chat:', { ...currentThesis, list_chat: updatedListChat });
				const updateResult = await updateThesis(targetThesisId, {
					...currentThesis,
					list_chat: updatedListChat,
					updateAt: new Date().toISOString(),
				});
				console.log('Update thesis result:', updateResult);
				console.log('Updated thesis list_chat:', updateResult?.data?.list_chat);

				const thesisName = currentThesis.name || currentThesis.summary || ` S·ªï ng√†y #${targetThesisId}`;
				message.success(`ƒê√£ l∆∞u v√†o ${thesisName} th√†nh c√¥ng!`);
				loadThesisList(); // Reload the list
			}

			setThesisModalVisible(false);
			thesisForm.resetFields();
			setIsCreatingNewThesis(true);
			setSelectedThesisId(null);
			setThesisMode('original');
			setIsChatThesis(false);
		} catch (error) {
			console.error('Error creating/updating thesis:', error);
			message.error('L·ªói khi t·∫°o/c·∫≠p nh·∫≠t thesis');
		} finally {
			setCreatingThesis(false);
		}
	};

	// H√†m ƒë√≥ng modal thesis
	const closeThesisModal = () => {
		setThesisModalVisible(false);
		thesisForm.resetFields();
		setThesisData({ content: '', summary: '', name: '' });
		setThesisMode('original');
		setIsChatThesis(false);
		setIsCreatingNewThesis(true);
		setSelectedThesisId(null);
	};

	// H√†m t·∫°o t√≥m t·∫Øt b·∫±ng AI
	const generateSummaryWithAI = async () => {
		const content = thesisForm.getFieldValue('content');
		if (!content || content.trim().length === 0) {
			message.warning('Vui l√≤ng nh·∫≠p n·ªôi dung tr∆∞·ªõc khi t·∫°o t√≥m t·∫Øt');
			return;
		}

		setGeneratingSummary(true);
		try {
			// S·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o t√≥m t·∫Øt
			const prompt = `H√£y t·∫°o m·ªôt t√≥m t·∫Øt ng·∫Øn g·ªçn v√† s√∫c t√≠ch cho n·ªôi dung sau ƒë√¢y. T√≥m t·∫Øt n√™n c√≥ ƒë·ªô d√†i kho·∫£ng 100-150 k√Ω t·ª± v√† n√™u b·∫≠t nh·ªØng ƒëi·ªÉm ch√≠nh:

${content}

T√≥m t·∫Øt:`;

			const response = await aiGen(
				prompt,
				'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n t·∫°o t√≥m t·∫Øt ng·∫Øn g·ªçn v√† ch√≠nh x√°c. S·ª≠ d·ª•ng ng√¥n ng·ªØ Vi·ªát Nam, c√¢u t·ª´ tr·ªãnh tr·ªçng.',
				'gemini-2.5-flash',
				'text',
			);
			console.log(response);

			if (response && response.result) {
				const rawSummary = response.result.trim();
				const aiSummary = cleanMarkdownWrapper(rawSummary);
				thesisForm.setFieldValue('summary', aiSummary);
				setThesisData(prev => ({ ...prev, summary: aiSummary }));
				message.success('ƒê√£ t·∫°o t√≥m t·∫Øt th√†nh c√¥ng!');
			} else {
				message.error('Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt. Vui l√≤ng th·ª≠ l·∫°i.');
			}
		} catch (error) {
			console.error('Error generating summary:', error);
			message.error('L·ªói khi t·∫°o t√≥m t·∫Øt. Vui l√≤ng th·ª≠ l·∫°i.');
		} finally {
			setGeneratingSummary(false);
		}
	};

	useEffect(() => {
		if (currentUser) {
			// Debug: Ki·ªÉm tra localStorage khi component mount
			const debugSessionId = localStorage.getItem(STORAGE_KEYS.LAST_SELECTED_SESSION);
			const debugAdvisorKey = localStorage.getItem(STORAGE_KEYS.LAST_SELECTED_ADVISOR);
			console.log('Component mount - localStorage check:', { debugSessionId, debugAdvisorKey });

			loadChatSessions();
			// Reset hasRestoredSession khi component mount l·∫°i
			setHasRestoredSession(false);
		}
	}, [currentUser]);

	// Kh√¥i ph·ª•c session ƒë√£ ch·ªçn sau khi chatSessions ƒë∆∞·ª£c load
	useEffect(() => {
		if (chatSessions.length > 0 && currentUser) {
			restoreLastSelectedSession();
		}
	}, [chatSessions]);

	// ƒê·∫£m b·∫£o advisor ƒë∆∞·ª£c ch·ªçn khi advisorList ho·∫∑c pipelineList thay ƒë·ªïi
	useEffect(() => {
		const allAdvisors = [...advisorList, ...pipelineList];
		if (allAdvisors.length > 0 && (!selectedAdvisor || selectedAdvisor === 'Ch·ªçn Advisor')) {
			setSelectedAdvisor(allAdvisors[0].key);
		}
	}, [advisorList, pipelineList, selectedAdvisor]);

	// L∆∞u session khi currentSessionId thay ƒë·ªïi
	useEffect(() => {
		if (currentUser && currentSessionId) {
			saveLastSelectedSession(currentSessionId, selectedAdvisor);
		}
	}, [currentSessionId, selectedAdvisor]);

	// L∆∞u session khi component unmount ho·∫∑c khi user r·ªùi kh·ªèi tab
	useEffect(() => {
		const handleBeforeUnload = () => {
			if (currentUser && currentSessionId) {
				saveLastSelectedSession(currentSessionId, selectedAdvisor);
			}
		};

		const handleVisibilityChange = () => {
			if (document.visibilityState === 'hidden' && currentUser && currentSessionId) {
				saveLastSelectedSession(currentSessionId, selectedAdvisor);
			}
		};

		window.addEventListener('beforeunload', handleBeforeUnload);
		document.addEventListener('visibilitychange', handleVisibilityChange);

		return () => {
			// L∆∞u session khi component unmount
			if (currentUser && currentSessionId) {
				saveLastSelectedSession(currentSessionId, selectedAdvisor);
			}
			window.removeEventListener('beforeunload', handleBeforeUnload);
			document.removeEventListener('visibilitychange', handleVisibilityChange);
		};
	}, [currentSessionId, selectedAdvisor, currentUser]);

	// L∆∞u session ƒë·ªãnh k·ª≥ m·ªói 30 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã m·∫•t
	useEffect(() => {
		if (currentUser && currentSessionId) {
			const interval = setInterval(() => {
				saveLastSelectedSession(currentSessionId, selectedAdvisor);
			}, 30000); // 30 gi√¢y

			return () => clearInterval(interval);
		}
	}, [currentSessionId, selectedAdvisor, currentUser]);

	useEffect(() => {
		if (advisorModalVisible) {
			loadAdvisorList();
		}
	}, [advisorModalVisible]);

	useEffect(() => {
		if (pipelineModalVisible) {
			loadPipelineList();
		}
	}, [pipelineModalVisible]);

	useEffect(() => {
		const handleResize = () => {
			const newIsMobile = window.innerWidth <= 768;
			setIsMobile(newIsMobile);
		};

		// Initial setup
		handleResize();

		window.addEventListener('resize', handleResize);
		return () => window.removeEventListener('resize', handleResize);
	}, []);

	useEffect(() => {
		const fetchAdvisors = async () => {
			try {
				const setting = await getSettingByTypeExternal('ADVISOR_SETTING');
				const advisorData = setting?.setting && Array.isArray(setting.setting) && setting.setting.length > 0 ? setting.setting : advisors;
				setAdvisorList(advisorData);

				// T·ª± ƒë·ªông ch·ªçn advisor ƒë·∫ßu ti√™n n·∫øu ch∆∞a c√≥ advisor n√†o ƒë∆∞·ª£c ch·ªçn
				if (advisorData.length > 0 && (!selectedAdvisor || selectedAdvisor === 'Ch·ªçn Advisor')) {
					setSelectedAdvisor(advisorData[0].key);
				}
			} catch {
				setAdvisorList(advisors);
				// T·ª± ƒë·ªông ch·ªçn advisor ƒë·∫ßu ti√™n t·ª´ danh s√°ch m·∫∑c ƒë·ªãnh
				if (advisors.length > 0 && (!selectedAdvisor || selectedAdvisor === 'Ch·ªçn Advisor')) {
					setSelectedAdvisor(advisors[0].key);
				}
			}
		};
		fetchAdvisors();
	}, [selectedAdvisor]);

	useEffect(() => {
		const fetchPipelines = async () => {
			try {
				const setting = await getSettingByTypeExternal('AI_PIPELINE_SETTING');
				setPipelineList(setting?.setting && Array.isArray(setting.setting) && setting.setting.length > 0 ? setting.setting : []);
			} catch {
				setPipelineList([]);
			}
		};
		fetchPipelines();
	}, []);

	useEffect(() => {
		const fetchTemplates = async () => {
			try {
				const setting = await getSettingByTypeExternal('TEMPLATE_AI_SETTING');
				const allTemplates = setting?.setting && Array.isArray(setting.setting) && setting.setting.length > 0 ? setting.setting : jobTemplates;

				// L·ªçc template theo user hi·ªán t·∫°i: hi·ªÉn th·ªã template c·ªßa user ho·∫∑c template chung (kh√¥ng c√≥ userEmail)
				const userEmail = currentUser?.email || currentUser?.id;
				const filteredTemplates = allTemplates.filter(template =>
					!template.userEmail || template.userEmail === userEmail
				);

				setTemplateList(filteredTemplates);
			} catch {
				setTemplateList(jobTemplates);
			}
		};
		fetchTemplates();
	}, [currentUser]);

	useEffect(() => {
		const handleClickOutside = (event) => {
			if (showTemplateSuggestions) {
				const inputWrapper = document.querySelector(`.${styles.inputWrapper}`);
				if (inputWrapper && !inputWrapper.contains(event.target)) {
					setShowTemplateSuggestions(false);
					setSelectedSuggestionIndex(-1);
				}
			}
		};

		document.addEventListener('mousedown', handleClickOutside);
		return () => {
			document.removeEventListener('mousedown', handleClickOutside);
		};
	}, [showTemplateSuggestions]);

	// Auto-scroll khi selectedSuggestionIndex thay ƒë·ªïi
	useEffect(() => {
		if (showTemplateSuggestions && selectedSuggestionIndex >= 0 && suggestionsRef.current) {
			const selectedElement = suggestionsRef.current.children[selectedSuggestionIndex];
			if (selectedElement) {
				selectedElement.scrollIntoView({
					behavior: 'smooth',
					block: 'nearest'
				});
			}
		}
	}, [selectedSuggestionIndex, showTemplateSuggestions]);

	// Scroll ƒë·∫øn session active khi currentSessionId thay ƒë·ªïi
	useEffect(() => {
		if (currentSessionId && chatSessions.length > 0) {
			setTimeout(() => {
				const activeSessionElement = document.querySelector(`.${styles.activeSession}`);
				if (activeSessionElement) {
					activeSessionElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
				}
			}, 100);
		}
	}, [currentSessionId, chatSessions]);

	// H√†m l∆∞u session ƒë√£ ch·ªçn v√†o localStorage
	const saveLastSelectedSession = (sessionId, advisorKey) => {
		try {
			// Ch·ªâ l∆∞u n·∫øu c√≥ sessionId h·ª£p l·ªá
			if (sessionId) {
				localStorage.setItem(STORAGE_KEYS.LAST_SELECTED_SESSION, sessionId.toString());
				localStorage.setItem(STORAGE_KEYS.LAST_SELECTED_ADVISOR, advisorKey || '');

				// Verify l∆∞u th√†nh c√¥ng
				const savedSessionId = localStorage.getItem(STORAGE_KEYS.LAST_SELECTED_SESSION);
				const savedAdvisorKey = localStorage.getItem(STORAGE_KEYS.LAST_SELECTED_ADVISOR);
			} else {
				// X√≥a localStorage n·∫øu kh√¥ng c√≥ session
				localStorage.removeItem(STORAGE_KEYS.LAST_SELECTED_SESSION);
				localStorage.removeItem(STORAGE_KEYS.LAST_SELECTED_ADVISOR);
				console.log('Cleared localStorage - no session');
			}
		} catch (error) {
			console.error('Error saving to localStorage:', error);
		}
	};

	// H√†m kh√¥i ph·ª•c session ƒë√£ ch·ªçn t·ª´ localStorage
	const restoreLastSelectedSession = async () => {
		try {
			const lastSessionId = localStorage.getItem(STORAGE_KEYS.LAST_SELECTED_SESSION);
			const lastAdvisorKey = localStorage.getItem(STORAGE_KEYS.LAST_SELECTED_ADVISOR);

			console.log('Restoring from localStorage:', {
				lastSessionId,
				lastAdvisorKey,
				chatSessionsLength: chatSessions.length,
			});

			// Kh√¥i ph·ª•c advisor t·ª´ localStorage n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng advisor ƒë·∫ßu ti√™n
			const allAdvisors = [...advisorList, ...pipelineList];
			if (lastAdvisorKey && allAdvisors.some(a => a.key === lastAdvisorKey)) {
				setSelectedAdvisor(lastAdvisorKey);
			} else if (allAdvisors.length > 0 && (!selectedAdvisor || selectedAdvisor === 'Ch·ªçn Advisor')) {
				setSelectedAdvisor(allAdvisors[0].key);
			}

			// Ch·ªâ kh√¥i ph·ª•c session n·∫øu c√≥ session ID v√† danh s√°ch sessions ƒë√£ ƒë∆∞·ª£c load
			if (lastSessionId && chatSessions.length > 0) {
				const sessionExists = chatSessions.find(s => s.id.toString() === lastSessionId);
				console.log('Session exists:', sessionExists);
				if (sessionExists) {
					setCurrentSessionId(parseInt(lastSessionId));
					await loadChatHistory(parseInt(lastSessionId));
					setHasRestoredSession(true);
					console.log('Session restored successfully');
				}
			}
		} catch (error) {
			console.error('Error restoring from localStorage:', error);
		}
	};

	const loadChatSessions = async () => {
		setLoadingSessions(true);
		try {
			const sessions = await getActiveChatSessions(currentUser.email || currentUser.id);
			// S·∫Øp x·∫øp theo ID m·ªõi nh·∫•t ·ªü tr√™n c√πng
			const sortedSessions = (sessions || []).sort((a, b) => b.id - a.id);
			setChatSessions(sortedSessions);
		} catch {
			message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch chat sessions');
		} finally {
			setLoadingSessions(false);
		}
	};

	const loadChatHistory = async (sessionId) => {
		try {
			const chatData = await getAiChatHistoryById(sessionId);
			if (chatData?.chatHistory) {
				setMessages(chatData.chatHistory.map((msg, idx) => ({
					id: idx + 1,
					type: msg.role === 'user' ? 'user' : 'assistant',
					content: msg.content,
					timestamp: new Date(msg.timestamp || new Date()),
					canSave: msg.role === 'assistant',
					// L·∫•y advisor info t·ª´ database n·∫øu c√≥
					advisor: msg.advisor ? {
						...msg.advisor,
						enableWebsearch: msg.advisor.enableWebsearch || false,
					} : null,
					citations: msg.citations || null,
					embeddingResults: msg.embeddingResults || null,
				})));
				// Ch·ªâ set advisor t·ª´ database n·∫øu ch∆∞a kh√¥i ph·ª•c session t·ª´ localStorage v√† ch∆∞a c√≥ advisor n√†o ƒë∆∞·ª£c ch·ªçn
				if (!hasRestoredSession && (!selectedAdvisor || selectedAdvisor === 'Ch·ªçn Advisor')) {
					const allAdvisors = [...advisorList, ...pipelineList];
					setSelectedAdvisor(chatData.advisorType || allAdvisors[0]?.key || 'Ch·ªçn Advisor');
				}
			}
		} catch {
			message.error('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ chat');
		}
	};


	// T·∫°o chat m·ªõi nhanh kh√¥ng c·∫ßn modal
	const createNewSessionQuick = async () => {
		try {
			const sessionTitle = `Chat ${new Date().toLocaleString('vi-VN')}`;
			const newSession = await createNewChatSession(
				currentUser.email || currentUser.id,
				selectedAdvisor,
				sessionTitle,
				'claude-3-5-haiku-20241022',
			);
			if (newSession.success) {
				// Set currentSessionId tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o session m·ªõi ƒë∆∞·ª£c highlight
				setCurrentSessionId(newSession.data.id);
				// Set message ch√†o m·ª´ng cho session m·ªõi
				setMessages([{
					id: 1,
					type: 'assistant',
					content: 'Xin ch√†o! T√¥i l√† AI assistant. B·∫°n c√≥ th·ªÉ ch·ªçn job template ho·∫∑c ƒë·∫∑t c√¢u h·ªèi tr·ª±c ti·∫øp.',
					timestamp: new Date(),
					canSave: false,
				}]);
				setHasRestoredSession(false); // Reset khi t·∫°o session m·ªõi
				// Clear input v√† template selection
				setInputMessage('');
				setTemplateError(false);
				// L∆∞u ngay l·∫≠p t·ª©c khi t·∫°o session m·ªõi
				saveLastSelectedSession(newSession.data.id, selectedAdvisor);

				// Load chat sessions sau khi ƒë√£ set currentSessionId
				await loadChatSessions();

				// Close sidebar on mobile when creating a new session
				closeSidebar();
				message.success('ƒê√£ t·∫°o chat m·ªõi!');

				// Focus v√†o input field ƒë·ªÉ user c√≥ th·ªÉ b·∫Øt ƒë·∫ßu g√µ ngay
				setTimeout(() => {
					const inputElement = document.querySelector(`.${styles.messageInput}`);
					if (inputElement) {
						inputElement.focus();
					}
				}, 100);
			}
		} catch {
			message.error('Kh√¥ng th·ªÉ t·∫°o chat session m·ªõi');
		}
	};

	// C·∫≠p nh·∫≠t t√™n chat session b·∫±ng tin nh·∫Øn ƒë·∫ßu ti√™n
	const updateChatSessionTitle = async (sessionId, firstMessage) => {
		try {
			const currentChat = await getAiChatHistoryById(sessionId);
			const truncatedTitle = firstMessage.length > 20 ?
				firstMessage.substring(0, 20) + '...' : firstMessage;

			const updatedChatData = {
				...currentChat,
				title: truncatedTitle,
			};

			await updateAiChatHistory(updatedChatData);
			await loadChatSessions(); // Refresh sessions list
		} catch (error) {
			console.error('Error updating chat session title:', error);
		}
	};

	const selectChatSession = (sessionId) => {
		setCurrentSessionId(sessionId);
		setHasRestoredSession(false); // Reset khi user ch·ªçn session m·ªõi
		// L∆∞u ngay l·∫≠p t·ª©c khi user ch·ªçn session
		saveLastSelectedSession(sessionId, selectedAdvisor);
		loadChatHistory(sessionId);
		// Close both sidebars on mobile when selecting a session
		closeSidebar();
		closeTemplateSidebar();
	};

	const deleteChatSession = async (sessionId) => {
		try {
			await deleteAiChatHistory(sessionId);
			if (currentSessionId === sessionId) {
				setCurrentSessionId(null);
				setMessages([{
					id: 1,
					type: 'assistant',
					content: 'Xin ch√†o! B·∫°n c√≥ th·ªÉ ch·ªçn job template ho·∫∑c ƒë·∫∑t c√¢u h·ªèi tr·ª±c ti·∫øp.',
					timestamp: new Date(),
					canSave: false,
				}]);
			}
			await loadChatSessions();
		} catch {
			message.error('Kh√¥ng th·ªÉ x√≥a chat session');
		}
	};

	const handleJobSelect = (jobKey) => {
		if (!jobKey) {
			// Khi clear template
			setInputMessage('');
			setTemplateError(false);
			return;
		}
		const job = templateList.find(j => j.key === jobKey);
		if (job) {
			// T·ª± ƒë·ªông ch·ªçn advisor m·∫∑c ƒë·ªãnh n·∫øu c√≥
			if (job.defaultAdvisor) {
				// Ki·ªÉm tra xem advisor c√≥ t·ªìn t·∫°i trong danh s√°ch kh√¥ng
				const allAdvisors = [...advisorList, ...pipelineList];
				const advisorExists = allAdvisors.some(a => a.key === job.defaultAdvisor);

				if (advisorExists) {
					setSelectedAdvisor(job.defaultAdvisor);
					// L∆∞u ngay l·∫≠p t·ª©c khi thay ƒë·ªïi advisor
					saveLastSelectedSession(currentSessionId, job.defaultAdvisor);
					console.log(`üéØ Auto-selected advisor: ${job.defaultAdvisor} for template: ${job.label}`);
				}
			}

			// Ki·ªÉm tra xem template c√≥ ch·ª©a &&& kh√¥ng
			if (job.template.includes('&&&')) {
				// M·ªü modal ƒë·ªÉ edit template
				setSelectedTemplate(job);
				setTemplateEditModalVisible(true);
			} else {
				// Template kh√¥ng c√≥ &&&, ƒëi·ªÅn tr·ª±c ti·∫øp v√†o input
				setInputMessage(job.template);
				setTemplateError(false);
			}
		}
		// Close template sidebar on mobile when selecting a template
		closeTemplateSidebar();
	};

	// C·∫≠p nh·∫≠t advisor selection
	const handleAdvisorChange = (advisorKey) => {
		setSelectedAdvisor(advisorKey);
		// L∆∞u ngay l·∫≠p t·ª©c khi thay ƒë·ªïi advisor
		saveLastSelectedSession(currentSessionId, advisorKey);
	};

	const handleInputChange = (e) => {
		const value = e.target.value;
		setInputMessage(value);

		// Ki·ªÉm tra xem template c√≥ ch·ª©a &&& kh√¥ng
		setTemplateError(value.includes('&&&'));

		// X·ª≠ l√Ω g·ª£i √Ω template khi g√µ @
		const cursorPos = e.target.selectionStart || 0;
		setCursorPosition(cursorPos);

		// T√¨m t·ª´ cu·ªëi c√πng tr∆∞·ªõc con tr·ªè
		const textBeforeCursor = value.substring(0, cursorPos);
		const words = textBeforeCursor.split(/\s/);
		const lastWord = words[words.length - 1];

		if (lastWord.startsWith('@')) {
			const searchTerm = lastWord.substring(1).toLowerCase();
			const suggestions = templateList.filter(template =>
				template.label.toLowerCase().includes(searchTerm),
			);

			if (suggestions.length > 0) {
				setTemplateSuggestions(suggestions);
				setShowTemplateSuggestions(true);
				setSelectedSuggestionIndex(0); // Reset v·ªÅ item ƒë·∫ßu ti√™n
			} else {
				setShowTemplateSuggestions(false);
				setSelectedSuggestionIndex(-1);
			}
		} else {
			setShowTemplateSuggestions(false);
			setSelectedSuggestionIndex(-1);
		}
	};

	const handleTemplateSuggestionClick = (template) => {
		setShowTemplateSuggestions(false);
		setSelectedSuggestionIndex(-1);

		// T·ª± ƒë·ªông ch·ªçn advisor m·∫∑c ƒë·ªãnh n·∫øu c√≥
		if (template.defaultAdvisor) {
			// Ki·ªÉm tra xem advisor c√≥ t·ªìn t·∫°i trong danh s√°ch kh√¥ng
			const allAdvisors = [...advisorList, ...pipelineList];
			const advisorExists = allAdvisors.some(a => a.key === template.defaultAdvisor);

			if (advisorExists) {
				setSelectedAdvisor(template.defaultAdvisor);
				// L∆∞u ngay l·∫≠p t·ª©c khi thay ƒë·ªïi advisor
				saveLastSelectedSession(currentSessionId, template.defaultAdvisor);
				console.log(`üéØ Auto-selected advisor: ${template.defaultAdvisor} for template suggestion: ${template.label}`);
			}
		}

		// Ki·ªÉm tra xem template c√≥ ch·ª©a &&& kh√¥ng
		if (template.template.includes('&&&')) {
			// M·ªü modal ƒë·ªÉ edit template
			setSelectedTemplate(template);
			setTemplateEditModalVisible(true);
		} else {
			// Template kh√¥ng c√≥ &&&, ƒëi·ªÅn tr·ª±c ti·∫øp v√†o input
			const textBeforeCursor = inputMessage.substring(0, cursorPosition);
			const textAfterCursor = inputMessage.substring(cursorPosition);

			// T√¨m t·ª´ cu·ªëi c√πng tr∆∞·ªõc con tr·ªè
			const words = textBeforeCursor.split(/\s/);
			words[words.length - 1] = template.template; // Thay th·∫ø t·ª´ cu·ªëi (bao g·ªìm @) b·∫±ng template

			const newText = words.join(' ') + textAfterCursor;
			setInputMessage(newText);
			setTemplateError(false);
		}
	};

	const handleClickOutside = () => {
		setShowTemplateSuggestions(false);
		setSelectedSuggestionIndex(-1);
	};

	// Template Edit Modal handlers
	const handleTemplateEditCancel = () => {
		setTemplateEditModalVisible(false);
		setSelectedTemplate(null);
	};

	const handleTemplateEditConfirm = (filledTemplate) => {
		// T·ª± ƒë·ªông ch·ªçn advisor m·∫∑c ƒë·ªãnh n·∫øu c√≥ t·ª´ template ƒë√£ ch·ªçn
		if (selectedTemplate && selectedTemplate.defaultAdvisor) {
			// Ki·ªÉm tra xem advisor c√≥ t·ªìn t·∫°i trong danh s√°ch kh√¥ng
			const allAdvisors = [...advisorList, ...pipelineList];
			const advisorExists = allAdvisors.some(a => a.key === selectedTemplate.defaultAdvisor);

			if (advisorExists) {
				setSelectedAdvisor(selectedTemplate.defaultAdvisor);
				// L∆∞u ngay l·∫≠p t·ª©c khi thay ƒë·ªïi advisor
				saveLastSelectedSession(currentSessionId, selectedTemplate.defaultAdvisor);
				console.log(`üéØ Auto-selected advisor: ${selectedTemplate.defaultAdvisor} for template edit: ${selectedTemplate.label}`);
			}
		}

		setInputMessage(filledTemplate);
		setTemplateError(false);
		setTemplateEditModalVisible(false);
		setSelectedTemplate(null);
	};

	const sendMessage = async () => {
		if (!inputMessage.trim()) return;
		if (templateError) {
			message.error('C·∫ßn ƒëi·ªÅn/ thay th·∫ø th√¥ng tin trong &&& tr∆∞·ªõc khi g·ª≠i. Prompt kh√¥ng h·ªó tr·ª£ k√≠ t·ª± &');
			return;
		}
		console.log('inputMessage', inputMessage);
		const userMessage = {
			id: Date.now(),
			type: 'user',
			content: inputMessage,
			timestamp: new Date(),
			canSave: false,
		};
		setMessages(prev => [...prev, userMessage]);
		setInputMessage('');
		setIsTyping(true);
		setNoEmbeddingResults(false); // Reset no results state

		try {
			// Ki·ªÉm tra xem selectedAdvisor c√≥ ph·∫£i l√† pipeline kh√¥ng
			const selectedPipeline = pipelineList.find(p => p.key === selectedAdvisor);
			let finalResponse = null;
			let finalCitations = null;
			let finalEmbeddingResults = null;
			let advisorInfo = null;

			if (selectedPipeline && selectedPipeline.isPipeline) {
				// X·ª≠ l√Ω AI Pipeline
				console.log('üöÄ Processing AI Pipeline:', selectedPipeline.name);
				let currentInput = userMessage.content;
				const pipelineSteps = selectedPipeline.steps || [];
				const stepResults = [];

				for (let i = 0; i < pipelineSteps.length; i++) {
					const step = pipelineSteps[i];
					console.log(`üîß Processing step ${i + 1}: ${step.name}`);

					// T√¨m ki·∫øm th√¥ng tin t·ª´ embedding n·∫øu ƒë∆∞·ª£c b·∫≠t cho step n√†y
					// L∆∞u √Ω: Khi b·∫≠t ch·∫ø ƒë·ªô "Kho d·ªØ li·ªáu", c√¢u h·ªèi s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªôc l·∫≠p
					// kh√¥ng bao g·ªìm context c·ªßa cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥
					let embeddingContext = null;
					if (useEmbeddingSearch && i === 0) { // Ch·ªâ t√¨m ki·∫øm embedding ·ªü b∆∞·ªõc ƒë·∫ßu ti√™n
						// S·ª≠ d·ª•ng AI generation v·ªõi embedding thay v√¨ ch·ªâ search
						const aiResponse = await generateAIResponseWithEmbedding(inputMessage, 5, 0.02, 'gpt-4.1-2025-04-14', 'text');
						if (aiResponse) {
							setNoEmbeddingResults(false);
							embeddingContext = {
								context: aiResponse.answer,
								results: aiResponse.chunks,
								totalFound: aiResponse.searchStats.totalFound,
								searchMethod: 'AI Generation with Embedding',
							};
							finalEmbeddingResults = {
								totalFound: aiResponse.searchStats.totalFound,
								results: aiResponse.chunks,
								searchMethod: 'AI Generation with Embedding',
								answer: aiResponse.answer,
							};
						} else {
							setNoEmbeddingResults(true);
						}
					}

					// Chu·∫©n b·ªã system message cho step n√†y
					let systemMessage = step.systemMessage || '';
					if (embeddingContext) {
						systemMessage += `\n\n=== TH√îNG TIN THAM KH·∫¢O T·ª™ H·ªÜ TH·ªêNG ===\n${embeddingContext.context}\n\nH√£y s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† chi ti·∫øt.`;
					}

					// Chu·∫©n b·ªã chat history cho step n√†y
					// N·∫øu b·∫≠t ch·∫ø ƒë·ªô kho d·ªØ li·ªáu, ch·ªâ s·ª≠ d·ª•ng c√¢u h·ªèi hi·ªán t·∫°i
					let chatHistory;
					if (useEmbeddingSearch && i === 0) {
						// Ch·∫ø ƒë·ªô kho d·ªØ li·ªáu: ch·ªâ s·ª≠ d·ª•ng c√¢u h·ªèi hi·ªán t·∫°i
						chatHistory = [
							{ role: 'system', content: systemMessage },
							{ role: 'user', content: currentInput },
						];
					} else {
						// Ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng: s·ª≠ d·ª•ng to√†n b·ªô chat history
						const previousChatHistory = [...messages, userMessage].filter(m => m.type !== 'assistant' || m.id !== 1).map(m => ({
							role: m.type === 'user' ? 'user' : 'assistant',
							content: m.content,
							advisor: m.advisor,
						}));

						chatHistory = [
							{ role: 'system', content: systemMessage },
							...previousChatHistory, // Th√™m chat history t·ª´ c√°c tin nh·∫Øn tr∆∞·ªõc
							...stepResults.map(result => ({
								role: 'assistant',
								content: result.content,
							})),
							{ role: 'user', content: currentInput },
						];
					}

					let stepResponse;
					if (step.enableWebsearch) {
						// S·ª≠ d·ª•ng webSearchChat n·∫øu step c√≥ b·∫≠t websearch
						try {
							const webSearchResponse = await webSearchChat({
								prompt: currentInput,
								model: step.model,
								chat_history: chatHistory,
							});
							console.log('üåê WebSearch (pipeline) raw response:', webSearchResponse);
							stepResponse = {
								response: webSearchResponse.ai_response || webSearchResponse.message || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ websearch',
								success: webSearchResponse.success,
								citations: webSearchResponse.citations,
							};
						} catch (webSearchError) {
							console.error('L·ªói websearch ·ªü step', i + 1, 'fallback v·ªÅ aiChat:', webSearchError);
							// Ch·ªâ truy·ªÅn th√¥ng tin c·∫ßn thi·∫øt, kh√¥ng bao g·ªìm description
							const stepInfo = {
								name: step.name,
								model: step.model,
								systemMessage: step.systemMessage,
								enableWebsearch: step.enableWebsearch,
							};
							stepResponse = await aiChat(chatHistory, currentInput, step.model, stepInfo);
							console.log('üß† aiChat (pipeline) raw response:', stepResponse);
						}
					} else {
						// S·ª≠ d·ª•ng aiChat b√¨nh th∆∞·ªùng
						// Ch·ªâ truy·ªÅn th√¥ng tin c·∫ßn thi·∫øt, kh√¥ng bao g·ªìm description
						const stepInfo = {
							name: step.name,
							model: step.model,
							systemMessage: step.systemMessage,
							enableWebsearch: step.enableWebsearch,
						};
						stepResponse = await aiChat(chatHistory, currentInput, step.model, stepInfo);
						console.log('üß† aiChat (pipeline) raw response:', stepResponse);
					}

					const stepResult = {
						stepName: step.name,
						content: stepResponse.response || stepResponse.message || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI',
						citations: stepResponse.citations,
					};

					stepResults.push(stepResult);
					currentInput = stepResult.content; // Output c·ªßa step n√†y s·∫Ω l√† input c·ªßa step ti·∫øp theo

					// L∆∞u citations t·ª´ step cu·ªëi c√πng
					if (i === pipelineSteps.length - 1) {
						finalCitations = stepResponse.citations;
					}

					console.log(`‚úÖ Step ${i + 1} completed:`, stepResult.content.substring(0, 100) + '...');
				}

				finalResponse = currentInput; // K·∫øt qu·∫£ cu·ªëi c√πng l√† output c·ªßa step cu·ªëi c√πng
				advisorInfo = {
					key: selectedAdvisor,
					name: selectedPipeline.name,
					enableWebsearch: false, // Pipeline kh√¥ng c√≥ websearch ri√™ng
					isPipeline: true,
					steps: stepResults,
				};

				console.log('üéâ Pipeline completed successfully');
			} else {
				// X·ª≠ l√Ω advisor ƒë∆°n l·∫ª ho·∫∑c pipeline ƒë∆°n l·∫ª
				let advisorKey = selectedAdvisor;
				let advisorObj = advisorList.find(a => a.key === advisorKey) || advisors.find(a => a.key === advisorKey);
				let pipelineObj = pipelineList.find(p => p.key === advisorKey);

				// N·∫øu l√† pipeline ƒë∆°n l·∫ª
				if (pipelineObj && !pipelineObj.isPipeline) {
					advisorObj = pipelineObj;
				}

				let model = advisorObj?.model || 'claude-3-5-haiku-20241022';
				let systemMessage = advisorObj?.systemMessage || '';

				// T√¨m ki·∫øm th√¥ng tin t·ª´ embedding n·∫øu ƒë∆∞·ª£c b·∫≠t
				// L∆∞u √Ω: Khi b·∫≠t ch·∫ø ƒë·ªô "Kho d·ªØ li·ªáu", c√¢u h·ªèi s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ƒë·ªôc l·∫≠p
				// kh√¥ng bao g·ªìm context c·ªßa cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥
				let embeddingContext = null;
				if (useEmbeddingSearch) {
					// S·ª≠ d·ª•ng AI generation v·ªõi embedding thay v√¨ ch·ªâ search
					const aiResponse = await generateAIResponseWithEmbedding(userMessage.content);
					console.log('ü§ñ aiResponse:', aiResponse);
					if (aiResponse && aiResponse.searchStats && aiResponse.searchStats.totalFound > 0) {
						console.log('üìö Found AI response with embedding context, enhancing prompt...');
						setNoEmbeddingResults(false);
						// Th√™m context v√†o system message
						systemMessage += `\n\n=== TH√îNG TIN THAM KH·∫¢O T·ª™ H·ªÜ TH·ªêNG ===\n${aiResponse.answer}\n\nH√£y s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† chi ti·∫øt.`;

						// L∆∞u th√¥ng tin v·ªÅ ph∆∞∆°ng ph√°p t√¨m ki·∫øm
						console.log(`üîç AI Generation method used with embedding`);

						// L∆∞u th√¥ng tin embedding cho hi·ªÉn th·ªã
						finalEmbeddingResults = {
							totalFound: aiResponse.searchStats.totalFound,
							results: aiResponse.chunks,
							searchMethod: 'AI Generation with Embedding',
							answer: aiResponse.answer,
						};
					} else {
						console.log('üìö No relevant information found in database, proceeding without context');
						setNoEmbeddingResults(true);

						// Th√™m th√¥ng b√°o r√µ r√†ng khi b·∫≠t kho d·ªØ li·ªáu nh∆∞ng kh√¥ng t√¨m th·∫•y
						systemMessage += `\n\n=== TH√îNG B√ÅO ===\nT√¥i ƒë√£ t√¨m ki·∫øm trong kho d·ªØ li·ªáu c·ªßa h·ªá th·ªëng nh∆∞ng kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan ƒë·∫øn c√¢u h·ªèi c·ªßa b·∫°n. T√¥i s·∫Ω tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c chung c·ªßa m√¨nh.`;
					}
				}

				const currentAdvisorInfo = advisorList.find(a => a.key === advisorKey) || advisors.find(a => a.key === advisorKey);

				// Ki·ªÉm tra xem advisor c√≥ b·∫≠t websearch kh√¥ng
				let response;

				// Chu·∫©n b·ªã chat history cho c·∫£ websearch v√† aiChat
				// N·∫øu b·∫≠t ch·∫ø ƒë·ªô kho d·ªØ li·ªáu, ch·ªâ s·ª≠ d·ª•ng c√¢u h·ªèi hi·ªán t·∫°i
				let chatHistory;
				if (useEmbeddingSearch) {
					// Ch·∫ø ƒë·ªô kho d·ªØ li·ªáu: ch·ªâ s·ª≠ d·ª•ng c√¢u h·ªèi hi·ªán t·∫°i
					chatHistory = [
						{ role: 'system', content: systemMessage },
						{ role: 'user', content: userMessage.content },
					];
				} else {
					// Ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng: s·ª≠ d·ª•ng to√†n b·ªô chat history
					chatHistory = [
						{ role: 'system', content: systemMessage },
						...[...messages, userMessage].filter(m => m.type !== 'assistant' || m.id !== 1).map(m => ({
							role: m.type === 'user' ? 'user' : 'assistant',
							content: m.content,
							advisor: m.advisor,
						})),
					];
				}

				if (currentAdvisorInfo?.enableWebsearch) {
					// S·ª≠ d·ª•ng webSearchChat v·ªõi chat history n·∫øu advisor c√≥ b·∫≠t websearch
					try {
						const webSearchResponse = await webSearchChat({
							prompt: userMessage.content,
							model: model,
							chat_history: chatHistory,
						});
						console.log('üåê WebSearch raw response:', webSearchResponse);
						// Websearch tr·∫£ v·ªÅ c·∫•u tr√∫c kh√°c v·ªõi aiChat
						response = {
							response: webSearchResponse.ai_response || webSearchResponse.message || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ websearch',
							success: webSearchResponse.success,
							citations: webSearchResponse.citations,
						};
					} catch (webSearchError) {
						console.error('L·ªói websearch, fallback v·ªÅ aiChat:', webSearchError);
						// Fallback v·ªÅ aiChat n·∫øu websearch l·ªói
						// Ch·ªâ truy·ªÅn th√¥ng tin c·∫ßn thi·∫øt, kh√¥ng bao g·ªìm description
						const advisorInfo = {
							name: currentAdvisorInfo?.name,
							model: currentAdvisorInfo?.model,
							systemMessage: currentAdvisorInfo?.systemMessage,
							enableWebsearch: currentAdvisorInfo?.enableWebsearch,
						};
						response = await aiChat(chatHistory, userMessage.content, model, advisorInfo);
						console.log('üß† aiChat (fallback) raw response:', response);
					}
				} else {
					// S·ª≠ d·ª•ng aiChat b√¨nh th∆∞·ªùng
					// Ch·ªâ truy·ªÅn th√¥ng tin c·∫ßn thi·∫øt, kh√¥ng bao g·ªìm description
					const advisorInfo = {
						name: currentAdvisorInfo?.name,
						model: currentAdvisorInfo?.model,
						systemMessage: currentAdvisorInfo?.systemMessage,
						enableWebsearch: currentAdvisorInfo?.enableWebsearch,
					};
					response = await aiChat(chatHistory, userMessage.content, model, advisorInfo);
					console.log('üß† aiChat raw response:', response);
				}

				finalResponse = response.response || response.message || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.';
				finalCitations = response.citations || null;
				// Ch·ªâ set finalEmbeddingResults n·∫øu ch∆∞a ƒë∆∞·ª£c set t·ª´ AI generation
				if (!finalEmbeddingResults) {
					finalEmbeddingResults = embeddingContext ? {
						totalFound: embeddingContext.totalFound,
						results: embeddingContext.results,
						searchMethod: embeddingContext.searchMethod,
					} : null;
				}
				advisorInfo = {
					key: advisorKey,
					name: currentAdvisorInfo?.name || advisorKey,
					enableWebsearch: currentAdvisorInfo?.enableWebsearch || false,
				};
			}

			// T·∫°o session m·ªõi n·∫øu ch∆∞a c√≥
			if (!currentSessionId) {
				const sessionTitle = `Chat ${new Date().toLocaleString('vi-VN')}`;
				const newSession = await createNewChatSession(
					currentUser.email || currentUser.id,
					selectedAdvisor,
					sessionTitle,
					advisorInfo.model || 'claude-3-5-haiku-20241022',
				);
				if (newSession.success) {
					setCurrentSessionId(newSession.data.id);
					await loadChatSessions();
				}
			}

			const assistantMessage = {
				id: Date.now() + 1,
				type: 'assistant',
				content: finalResponse,
				timestamp: new Date(),
				canSave: true,
				advisor: advisorInfo,
				citations: finalCitations,
				embeddingResults: finalEmbeddingResults,
			};
			console.log('‚úÖ Final assistantMessage:', assistantMessage);
			if (finalCitations) {
				console.log('üìé Citations:', finalCitations);
			}
			if (finalEmbeddingResults) {
				console.log('üìö Embedding results summary:', {
					totalFound: finalEmbeddingResults.totalFound,
					method: finalEmbeddingResults.searchMethod,
					chunks: (finalEmbeddingResults.results || []).length,
				});
			}

			// T·∫°o tin nh·∫Øn cho ngu·ªìn d·ªØ li·ªáu n·∫øu c√≥
			let dataSourcesMessage = null;
			if (finalEmbeddingResults && finalEmbeddingResults.results && finalEmbeddingResults.results.length > 0) {
				console.log('üìã Creating data sources message with:', finalEmbeddingResults.results.length, 'results');
				dataSourcesMessage = {
					id: Date.now() + 2,
					type: 'data-sources',
					content: 'üìã Ngu·ªìn d·ªØ li·ªáu ƒë∆∞·ª£c s·ª≠ d·ª•ng:',
					timestamp: new Date(),
					canSave: false,
					advisor: advisorInfo,
					embeddingResults: finalEmbeddingResults,
				};
				console.log('üìù Data sources message:', dataSourcesMessage);
			} else {
				console.log('üìã No data sources message created. finalEmbeddingResults:', finalEmbeddingResults);
			}

			// Th√™m tin nh·∫Øn AI tr∆∞·ªõc, sau ƒë√≥ th√™m tin nh·∫Øn ngu·ªìn d·ªØ li·ªáu n·∫øu c√≥
			setMessages(prev => {
				const newMessages = [...prev, assistantMessage];
				if (dataSourcesMessage) {
					newMessages.push(dataSourcesMessage);
				}
				return newMessages;
			});

			if (currentSessionId) {
				await addMessageToChat(currentSessionId, {
					role: 'user',
					content: userMessage.content,
					timestamp: new Date().toISOString(),
				});
				await addMessageToChat(currentSessionId, {
					role: 'assistant',
					content: assistantMessage.content,
					timestamp: new Date().toISOString(),
					advisor: {
						key: selectedAdvisor,
						name: advisorInfo.name,
						avatar: advisorInfo.avatar || 'ü§ñ',
						enableWebsearch: advisorInfo.enableWebsearch || false,
						isPipeline: advisorInfo.isPipeline || false,
						steps: advisorInfo.steps || null,
					},
					citations: assistantMessage.citations,
					embeddingResults: assistantMessage.embeddingResults,
				});
				// Kh√¥ng l∆∞u tin nh·∫Øn data-sources v√†o database v√¨ n√≥ ch·ªâ l√† hi·ªÉn th·ªã UI

				// Update session title with first message if this is the first user message
				const currentSession = await getAiChatHistoryById(currentSessionId);
				const userMsgCount = currentSession?.chatHistory?.filter(m => m.role === 'user').length || 0;

				if (userMsgCount === 1) {
					await updateChatSessionTitle(currentSessionId, userMessage.content);
				}

				await loadChatSessions();

				// Close sidebar on mobile after sending message
				closeSidebar();
			}
		} catch (error) {
			console.error('Error in sendMessage:', error);
			setMessages(prev => [...prev, {
				id: Date.now() + 1,
				type: 'assistant',
				content: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n.',
				timestamp: new Date(),
				canSave: false,
			}]);
			message.error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
		} finally {
			setIsTyping(false);
		}
	};

	const handleKeyPress = (e) => {
		// N·∫øu ƒëang hi·ªÉn th·ªã g·ª£i √Ω template
		if (showTemplateSuggestions && templateSuggestions.length > 0) {
			switch (e.key) {
				case 'ArrowDown':
					e.preventDefault();
					setSelectedSuggestionIndex(prev => 
						prev < templateSuggestions.length - 1 ? prev + 1 : 0
					);
					break;
				case 'ArrowUp':
					e.preventDefault();
					setSelectedSuggestionIndex(prev => 
						prev > 0 ? prev - 1 : templateSuggestions.length - 1
					);
					break;
				case 'Enter':
				case 'Tab':
					e.preventDefault();
					if (selectedSuggestionIndex >= 0 && selectedSuggestionIndex < templateSuggestions.length) {
						handleTemplateSuggestionClick(templateSuggestions[selectedSuggestionIndex]);
					}
					break;
				case 'Escape':
					e.preventDefault();
					setShowTemplateSuggestions(false);
					setSelectedSuggestionIndex(-1);
					break;
				default:
					// N·∫øu kh√¥ng ph·∫£i Enter th√¥ng th∆∞·ªùng, cho ph√©p x·ª≠ l√Ω b√¨nh th∆∞·ªùng
					if (e.key === 'Enter' && !e.shiftKey) {
						e.preventDefault();
						sendMessage();
					}
					break;
			}
		} else {
			// X·ª≠ l√Ω b√¨nh th∆∞·ªùng khi kh√¥ng c√≥ g·ª£i √Ω
			if (e.key === 'Enter' && !e.shiftKey) {
				e.preventDefault();
				sendMessage();
			}
		}
	};


	const loadAdvisorList = async () => {
		setAdvisorLoading(true);
		try {
			const setting = await getSettingByTypeExternal('ADVISOR_SETTING');
			setAdvisorList(setting?.setting && Array.isArray(setting.setting) && setting.setting.length > 0 ? setting.setting : advisors);
		} catch (e) {
			setAdvisorList(advisors);
		} finally {
			setAdvisorLoading(false);
		}
	};

	const loadPipelineList = async () => {
		try {
			const setting = await getSettingByTypeExternal('AI_PIPELINE_SETTING');
			setPipelineList(setting?.setting && Array.isArray(setting.setting) && setting.setting.length > 0 ? setting.setting : []);
		} catch (e) {
			setPipelineList([]);
		}
	};

	const saveAdvisorList = async (newList) => {
		setAdvisorLoading(true);
		try {
			await createOrUpdateSettingByTypeExternal({
				type: 'ADVISOR_SETTING',
				setting: newList,
			});
			setAdvisorList(newList);
			message.success('ƒê√£ l∆∞u c·∫•u h√¨nh Advisor!');
		} catch (e) {
			message.error('L·ªói khi l∆∞u Advisor!');
		} finally {
			setAdvisorLoading(false);
		}
	};

	const isEditing = (record) => record.key === editingKey;

	const edit = (record) => {
		form.setFieldsValue({ ...record });
		setEditingKey(record.key);
	};

	const cancel = () => {
		setEditingKey('');
	};

	const save = async (key) => {
		try {
			const row = await form.validateFields();
			const newData = [...advisorList];
			const index = newData.findIndex((item) => key === item.key);
			if (index > -1) {
				newData[index] = { ...newData[index], ...row };
				await saveAdvisorList(newData);
				setEditingKey('');
			}
		} catch (errInfo) {
			// ignore
		}
	};

	const handleDelete = async (key) => {
		const newList = advisorList.filter(item => item.key !== key);
		await saveAdvisorList(newList);
	};

	const handleAdd = () => {
		setAdvisorEditModal({ visible: true, editing: null });
	};

	const handleEdit = (record) => {
		setAdvisorEditModal({ visible: true, editing: record });
	};

	const handleSaveAdvisor = async (values) => {
		let newList;
		if (advisorEditModal.editing) {
			// Edit
			newList = advisorList.map(item =>
				item.key === advisorEditModal.editing.key ? { ...item, ...values } : item,
			);
		} else {
			// Add
			newList = [...advisorList, { ...values, key: Date.now().toString() }];
		}
		await saveAdvisorList(newList);
		setAdvisorEditModal({ visible: false, editing: null });
	};

	// Callback ƒë·ªÉ refresh advisor list khi c√≥ thay ƒë·ªïi t·ª´ modal
	const handleAdvisorUpdate = (newAdvisorList) => {
		setAdvisorList(newAdvisorList && Array.isArray(newAdvisorList) && newAdvisorList.length > 0 ? newAdvisorList : advisors);
	};

	// Callback ƒë·ªÉ refresh template list khi c√≥ thay ƒë·ªïi t·ª´ modal
	const handleTemplateUpdate = (newTemplateList) => {
		if (newTemplateList && Array.isArray(newTemplateList) && newTemplateList.length > 0) {
			// L·ªçc template theo user hi·ªán t·∫°i khi c√≥ c·∫≠p nh·∫≠t t·ª´ modal
			const userEmail = currentUser?.email || currentUser?.id;
			const filteredTemplates = newTemplateList.filter(template =>
				!template.userEmail || template.userEmail === userEmail
			);
			setTemplateList(filteredTemplates);
		} else {
			setTemplateList(jobTemplates);
		}
	};

	// Callback ƒë·ªÉ refresh pipeline list khi c√≥ thay ƒë·ªïi t·ª´ modal
	const handlePipelineUpdate = (newPipelineList) => {
		setPipelineList(newPipelineList && Array.isArray(newPipelineList) && newPipelineList.length > 0 ? newPipelineList : []);
	};

	const toggleSidebar = () => {
		// Only allow toggling on mobile devices
		if (isMobile) {
			setSidebarCollapsed(!sidebarCollapsed);
		}
	};

	const closeSidebar = () => {
		if (isMobile) {
			setSidebarCollapsed(true);
		}
	};

	const toggleTemplateSidebar = () => {
		// Only allow toggling on mobile devices
		if (isMobile) {
			setTemplateSidebarCollapsed(!templateSidebarCollapsed);
		}
	};

	const closeTemplateSidebar = () => {
		if (isMobile) {
			setTemplateSidebarCollapsed(true);
		}
	};

	// Function ƒë·ªÉ t√°ch t·ª´ kh√≥a quan tr·ªçng t·ª´ c√¢u h·ªèi
	const extractKeywords = (query) => {
		// Lo·∫°i b·ªè c√°c t·ª´ ph·ªï bi·∫øn kh√¥ng quan tr·ªçng
		const stopWords = [
			'kh√°i ni·ªám', 'ngu·ªìn g·ªëc', 'ƒë·ªãnh nghƒ©a', 'gi·∫£i th√≠ch', 'l√† g√¨', 'c·ªßa', 'v√†', 'ho·∫∑c', 'trong', 'v·ªÅ', 'cho', 't·ª´', 'ƒë·∫øn', 't·∫°i', '·ªü', 'v·ªõi', 'theo', 'nh∆∞', 'c≈©ng', 'n√†y', 'ƒë√≥', '·∫•y', 'n·ªç', 'kia', 'ƒë√¢y', 'ƒë√≥', 'kia', 'n·ªç', '·∫•y', 'n√†y', 'c·ªßa', 'v√†', 'ho·∫∑c', 'trong', 'v·ªÅ', 'cho', 't·ª´', 'ƒë·∫øn', 't·∫°i', '·ªü', 'v·ªõi', 'theo', 'nh∆∞', 'c≈©ng', 'n√†y', 'ƒë√≥', '·∫•y', 'n·ªç', 'kia', 'ƒë√¢y', 'ƒë√≥', 'kia', 'n·ªç', '·∫•y', 'n√†y',
		];

		// T√°ch t·ª´ v√† l·ªçc
		const words = query.toLowerCase().split(/\s+/);
		const keywords = words.filter(word =>
			word.length > 2 &&
			!stopWords.includes(word) &&
			!/^[0-9\s\-\_\.\,\!\?]+$/.test(word),
		);

		// ∆Øu ti√™n c√°c t·ª´ vi·∫øt hoa (th∆∞·ªùng l√† t√™n ri√™ng, thu·∫≠t ng·ªØ)
		const priorityKeywords = words.filter(word =>
			word.length > 2 &&
			/[A-Z]/.test(word) &&
			!stopWords.includes(word.toLowerCase()),
		);

		return {
			allKeywords: keywords,
			priorityKeywords: priorityKeywords,
			originalQuery: query,
		};
	};

	// Function ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin t·ª´ embedding
	const searchEmbeddingInfo = async (query) => {
		if (!useEmbeddingSearch || !query.trim()) {
			return null;
		}

		setEmbeddingSearchLoading(true);
		try {
			console.log('üîç Original query:', query);

			// T√°ch t·ª´ kh√≥a
			const keywords = extractKeywords(query);
			console.log('üîç Extracted keywords:', keywords);

			// Th·ª≠ nhi·ªÅu c√°ch t√¨m ki·∫øm kh√°c nhau
			const searchAttempts = [];

			// 1. T√¨m ki·∫øm v·ªõi t·ª´ kh√≥a ∆∞u ti√™n (n·∫øu c√≥)
			if (keywords.priorityKeywords.length > 0) {
				searchAttempts.push({
					query: keywords.priorityKeywords.join(' '),
					description: 'Priority keywords',
				});
			}

			// 2. T√¨m ki·∫øm v·ªõi t·∫•t c·∫£ t·ª´ kh√≥a
			if (keywords.allKeywords.length > 0) {
				searchAttempts.push({
					query: keywords.allKeywords.join(' '),
					description: 'All keywords',
				});
			}

			// 3. T√¨m ki·∫øm v·ªõi query g·ªëc (fallback)
			searchAttempts.push({
				query: query,
				description: 'Original query',
			});

			// Th·ª≠ t·ª´ng c√°ch t√¨m ki·∫øm
			for (const attempt of searchAttempts) {
				console.log(`üîç Trying search: ${attempt.description} - "${attempt.query}"`);

				try {
					// S·ª≠ d·ª•ng embedingDataService thay v√¨ k9Service
					const response = await searchEmbedingDataByTextForTable(attempt.query, 'k9', 5, 0.3);
					console.log(`üîç Response for ${attempt.description}:`, response);

					if (response.data && response.data.results && response.data.results.length > 0) {
						console.log(`üìä Found results with ${attempt.description}:`, response.data.results.length);

						// T·∫°o context t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm (s·ª≠ d·ª•ng c·∫•u tr√∫c m·ªõi)
						const contextInfo = response.data.results.map((item, index) => {
							// L·∫•y chunk c√≥ similarity cao nh·∫•t cho m·ªói K9Service
							const bestChunk = item.chunks && item.chunks.length > 0
								? item.chunks.reduce((best, chunk) =>
									chunk.similarity > best.similarity ? chunk : best,
								)
								: null;

							return `[Th√¥ng tin ${index + 1} - ƒê·ªô t∆∞∆°ng ƒë·ªìng: ${(item.bestSimilarity * 100).toFixed(1)}%]
Ti√™u ƒë·ªÅ: ${item.title}
Lo·∫°i: ${item.type}
Danh m·ª•c: ${item.category}
N·ªôi dung: ${bestChunk ? bestChunk.chunkText : 'Kh√¥ng c√≥ n·ªôi dung chi ti·∫øt'}`;
						}).join('\n\n');

						return {
							context: contextInfo,
							results: response.data.results,
							totalFound: response.data.totalFound,
							searchMethod: attempt.description,
						};
					}
				} catch (error) {
					console.error(`‚ùå Error with ${attempt.description}:`, error);
					continue; // Th·ª≠ c√°ch ti·∫øp theo
				}
			}

			console.log('‚ùå No embedding results found with any search method');
			return null;
		} catch (error) {
			console.error('‚ùå Embedding search error:', error);
			return null;
		} finally {
			setEmbeddingSearchLoading(false);
		}
	};

	// Function ƒë·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi AI d·ª±a tr√™n embedding
	const generateAIResponseWithEmbedding = async (query, limit = 5, threshold = 0.02, model = 'gpt-4.1-2025-04-14', type = 'text') => {
		if (!useEmbeddingSearch || !query.trim()) {
			return null;
		}
		setEmbeddingSearchLoading(true);
		try {
			console.log('ü§ñ Generating AI response with embedding for query:', query);
			// Kh√¥ng truy·ªÅn table ƒë·ªÉ t√¨m tr√™n t·∫•t c·∫£ c√°c chunk
			const response = await aiGenWithEmbedding(query);
			console.log('ü§ñ AI generation response:', response);

			// Ki·ªÉm tra response structure - handle both direct answer and nested answer.generated
			if (response && response.success && response.data) {
				let answer = response.data.answer;

				// Handle nested answer structure (answer.generated)
				if (answer && typeof answer === 'object' && answer.generated) {
					answer = answer.generated;
				}

				return {
					answer: answer,
					chunks: response.data.chunks || [],
					searchStats: response.data.searchStats || {},
					question: response.data.question,
					table: response.data.table,
				};
			} else if (response && response.data && response.data.answer) {
				// Fallback cho c·∫•u tr√∫c kh√°c
				let answer = response.data.answer;

				// Handle nested answer structure (answer.generated)
				if (answer && typeof answer === 'object' && answer.generated) {
					answer = answer.generated;
				}

				return {
					answer: answer,
					chunks: response.data.chunks || [],
					searchStats: response.data.searchStats || {},
					question: response.data.question,
					table: response.data.table,
				};
			}

			console.log('‚ùå No valid response structure found:', response);
			return null;
		} catch (error) {
			console.error('‚ùå AI generation with embedding error:', error);
			return null;
		} finally {
			setEmbeddingSearchLoading(false);
		}
	};

	// Function ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt t√†i li·ªáu
	const showEmbeddingDetail = async (item) => {
		console.log('üîç Showing embedding detail:', item);
		console.log('üîç Item structure:', {
			sourceId: item.sourceId,
			table: item.table,
			title: item.title,
			chunkText: item.chunkText,
			similarity: item.similarity,
			bestSimilarity: item.bestSimilarity,
		});
		setEmbeddingDetailLoading(true);
		try {
			let fullData = null;

			// L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß t·ª´ database d·ª±a tr√™n table type
			if (item.table === 'news') {
				// L·∫•y t·ª´ k9Service v·ªõi type l√† news
				const k9Data = await getK9ById(item.sourceId);
				console.log('üì∞ K9Service Data:', k9Data);
				if (k9Data && k9Data.data) {
					fullData = {
						...k9Data.data,
						title: k9Data.data.title || item.chunkText.split('\n')[0],
						type: 'news',
						category: 'Kho d·ªØ li·ªáu',
						bestSimilarity: item.similarity,
						chunks: [item],
					};
				}
			} else if (item.table === 'report') {
				// L·∫•y t·ª´ aiSummaryService v·ªõi c√°c tr∆∞·ªùng d·ªØ li·ªáu kh√°c
				console.log('üìä Fetching AI Summary for ID:', item.sourceId);
				const aiSummaryData = await getAISummaryById(item.sourceId);
				console.log('üìä AI Summary Data:', aiSummaryData);

				// X·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p tr·∫£ v·ªÅ tr·ª±c ti·∫øp ho·∫∑c trong data property
				const summaryData = aiSummaryData?.data || aiSummaryData;

				if (summaryData) {
					// L·∫•y th√¥ng tin t·ª´ tr∆∞·ªùng info n·∫øu c√≥
					let info = {};
					try {
						info = typeof summaryData.info === 'string'
							? JSON.parse(summaryData.info)
							: summaryData.info || {};
					} catch (e) {
						console.error('Error parsing info:', e);
						info = {};
					}

					fullData = {
						id: summaryData.id,
						title: info.title || summaryData.title || 'AI Summary',
						info: summaryData.info,
						summary1: summaryData.summary1,
						summary2: summaryData.summary2,
						tables: summaryData.tables,
						created_at: summaryData.created_at,
						type: 'report',
						category: 'AI Summary',
						bestSimilarity: item.similarity || 0,
						chunks: [item],
						// Th√™m c√°c tr∆∞·ªùng kh√°c t·ª´ summaryData n·∫øu c·∫ßn
						...summaryData,
					};
					console.log('üìä Full Data created:', fullData);
				} else {
					console.error('‚ùå No AI Summary data found for ID:', item.sourceId);
					console.error('‚ùå AI Summary response:', aiSummaryData);
				}
			}

			if (fullData) {
				// L·∫•y embedding data cho source n√†y
				const embeddingData = await getEmbedingDataBySourceId(item.sourceId, item.table);
				console.log('üìÑ Embedding data:', embeddingData);

				// K·∫øt h·ª£p th√¥ng tin t·ª´ embedding search v·ªõi d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
				const combinedData = {
					...fullData,
					embeddingData: embeddingData.data, // Th√™m embedding data
				};

				setEmbeddingDetailModal({ visible: true, data: combinedData });
			} else {
				console.error('‚ùå No fullData created for item:', item);
				message.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho t√†i li·ªáu n√†y');
			}
		} catch (error) {
			console.error('‚ùå Error fetching detail:', error);
			message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin chi ti·∫øt t√†i li·ªáu');
		} finally {
			setEmbeddingDetailLoading(false);
		}
	};

	// Function ƒë·ªÉ ƒë√≥ng popup
	const closeEmbeddingDetail = () => {
		setEmbeddingDetailModal({ visible: false, data: null });
	};

	return (
		<>
			{/* Toggle button and Current Session Info - moved above playgroundContainer */}
			<div className={styles.controlsContainer} style={{

				display: 'flex',
				alignItems: 'center',
				padding: '0 16px',
				// gap: '16px',
				justifyContent: 'space-between'
			}}>
				{/* Left side - Toggle buttons and session controls */}
				<div style={{
					display: 'flex',
					alignItems: 'center',
					gap: '8px'
				}}>
					{/* Toggle button for template sidebar - only show on mobile */}
					{isMobile && (
						<button
							className={`${styles.toggleButton} ${styles.mobileToggleButton}`}
							onClick={toggleTemplateSidebar}
							title={templateSidebarCollapsed ? 'M·ªü template sidebar' : 'ƒê√≥ng template sidebar'}
							style={{ left: '6px' }}
						>
							<BookOutlined />
						</button>
					)}

					{/* Toggle button for chat sessions sidebar - only show on mobile */}
					{isMobile && (
						<button
							className={`${styles.toggleButton} ${styles.mobileToggleButton}`}
							onClick={toggleSidebar}
							title={sidebarCollapsed ? 'M·ªü chat sidebar' : 'ƒê√≥ng chat sidebar'}
							style={{ left: '45px' }}
						>
							<MenuOutlined />
						</button>
					)}

					{/* Current Session Info */}

				</div>

				{/* Right side - Embedding Search Switch */}
				{/* {currentSessionId && (
					<div className={styles.embeddingSwitchContainer}>
						<Space>
							<Switch
								checked={useEmbeddingSearch}
								onChange={setUseEmbeddingSearch}
								loading={embeddingSearchLoading}
								size='small'
							/>
							<span className={styles.embeddingSwitchLabel}>
								{embeddingSearchLoading ? 'üîç ƒêang t√¨m ki·∫øm...' : 'üìö Kho d·ªØ li·ªáu'}
							</span>
						</Space>
					</div>
				)} */}
			</div>

			<div className={styles.playgroundContainer}>
				{/* Overlay for mobile when sidebar is open */}
				<div
					className={`${styles.sidebarOverlay} ${(!sidebarCollapsed || !templateSidebarCollapsed) && isMobile ? styles.mobileOpen : ''}`}
					onClick={() => { closeSidebar(); closeTemplateSidebar(); }}
				/>
				<div
					className={`${styles.playgroundContent} ${sidebarCollapsed && templateSidebarCollapsed && !isMobile ? styles.sidebarCollapsed : ''} ${(!sidebarCollapsed || !templateSidebarCollapsed) && isMobile ? styles.mobileSidebarOpen : ''}`}>

					{/* Template Sidebar - Left */}
					<div
						className={`${styles.templateSidebar} ${templateSidebarCollapsed ? styles.collapsed : ''} ${!templateSidebarCollapsed && isMobile ? styles.mobileOpen : ''}`}>
						<div className={styles.sidebarHeader}>
							<h3><BookOutlined /> Templates</h3>
							<div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
								{/* Mobile close button */}
								{isMobile && (
									<Button
										type="text"
										size="small"
										onClick={closeTemplateSidebar}
										className={styles.mobileCloseButton}
									>
										‚úï
									</Button>
								)}
							</div>
						</div>
						<div className={styles.templateList}>
							{templateList.length === 0 ? (
								<Empty description="Ch∆∞a c√≥ template n√†o" image={Empty.PRESENTED_IMAGE_SIMPLE} />
							) : (
								<List
									size="small"
									dataSource={templateList}
									renderItem={(template) => (
										<List.Item
											className={`${styles.templateItem} ${templateList.find(j => j.template === inputMessage)?.key === template.key ? styles.activeTemplate : ''}`}
											onClick={() => handleJobSelect(template.key)}
										>
											<div className={styles.templateContent}>
												<div className={styles.templateTitle}>{template.label}</div>
												<div className={styles.templatePreview}>
													{template.template.length > 60
														? template.template.substring(0, 60) + '...'
														: template.template
													}
												</div>
											</div>
										</List.Item>
									)}
								/>
							)}
						</div>

						{currentUser?.isAdmin && (
							<div style={{ padding: '16px 16px 8px 16px', width: '100%' }}>
								<Button
									icon={<SettingOutlined />}
									style={{ width: '100%' }}
									onClick={() => setTemplateModalVisible(true)}
								>
									C√†i ƒë·∫∑t Template
								</Button>
							</div>
						)}
					</div>

					{/* Chat Sessions Sidebar - Right */}
					<div
						className={`${styles.chatSessionsSidebar} ${sidebarCollapsed ? styles.collapsed : ''} ${!sidebarCollapsed && isMobile ? styles.mobileOpen : ''}`}>
						<div className={styles.sidebarHeader}>
							<h3><HistoryOutlined /> L·ªãch s·ª≠ Chat</h3>
							<div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
								{/* Mobile close button */}
								{isMobile && (
									<Button
										type="text"
										size="small"
										onClick={closeSidebar}
										className={styles.mobileCloseButton}
									>
										‚úï
									</Button>
								)}
							</div>
						</div>
						<div className={styles.sessionsList}>
							{loadingSessions ? (
								<div className={styles.loadingText}>ƒêang t·∫£i...</div>
							) : chatSessions.length === 0 ? (
								<Empty description="Ch∆∞a c√≥ chat session n√†o" image={Empty.PRESENTED_IMAGE_SIMPLE} />
							) : (
								<List
									size="small"
									dataSource={chatSessions}
									renderItem={(session) => (
										<List.Item
											className={`${styles.sessionItem} ${currentSessionId === session.id ? styles.activeSession : ''}`}
											onClick={() => selectChatSession(session.id)}
										>
											<div className={styles.sessionContent}>
												<div className={styles.sessionTitle}><MessageOutlined /> {session.title}
												</div>
												<div className={styles.sessionInfo}>
													<span className={styles.sessionTime}>
														{formatTimeAgo(session.createAt)}
													</span>
												</div>
											</div>
											<Popconfirm
												title="X√≥a chat session?"
												onConfirm={(e) => {
													e.stopPropagation();
													deleteChatSession(session.id);
												}}
												okText="X√≥a"
												cancelText="H·ªßy"
											>
												<Button type='text' icon={<DeleteOutlined />} size='small'
													className={styles.deleteButton}
													onClick={e => e.stopPropagation()} />
											</Popconfirm>
										</List.Item>
									)}
								/>
							)}
						</div>


						{(currentUser?.isAdmin || currentUser?.isSuperAdmin) && (
							<div style={{ padding: '16px 16px 8px 16px', width: '100%' }}>
								<Button
									icon={<SettingOutlined />}
									style={{ width: '100%', marginBottom: '8px' }}
									onClick={() => setAdvisorModalVisible(true)}
								>
									C√†i ƒë·∫∑t Advisor
								</Button>
								<Button
									icon={<SettingOutlined />}
									style={{ width: '100%', marginBottom: '8px' }}
									onClick={() => setPipelineModalVisible(true)}
								>
									C√†i ƒë·∫∑t Pipeline
								</Button>
								<Button
									icon={<SettingOutlined />}
									style={{ width: '100%' }}
									onClick={() => setTemplateModalVisible(true)}
								>
									C√†i ƒë·∫∑t Template
								</Button>
							</div>
						)}
					</div>
					{/* Main Chat Area */}
					<div className={`${styles.chatMainArea} ${sidebarCollapsed ? styles.expanded : ''}`}>
						{/* Chat Interface */}
						<div className={styles.chatContainer}>
							{currentSessionId && (
								<div className={styles.currentSessionInfo} style={{
									display: 'flex',
									alignItems: 'center',
									gap: '12px',
									marginTop: -10,
									position: 'absolute',
									top: '10px',
									left: '0',
								}}>
									<Button
										type='primary'
										icon={<PlusOutlined />}
										onClick={createNewSessionQuick}
										className={styles.createChatSmall}
									>
										Chat m·ªõi
									</Button>

									{/* Template selector removed - now in left sidebar */}
								</div>
							)}
							<div className={styles.messagesArea}>
								{messages.map((message) => (
									<div
										key={message.id}
										className={`${styles.messageWrapper} ${message.type === 'user' ? styles.userMessage :
												message.type === 'data-sources' ? styles.dataSourcesMessage :
													styles.assistantMessage
											}`}
									>
										<div className={styles.messageContent}>
											{message.type === 'assistant' && (
												<div className={styles.advisorInfo}>
													<span className={styles.advisorName}>
														{message.advisor?.name || 'AI Assistant'}
														{message.advisor?.enableWebsearch && (
															<GlobalOutlined
																style={{ marginLeft: 8, color: '#1890ff' }}
																title='S·ª≠ d·ª•ng Websearch'
															/>
														)}
														{message.advisor?.isPipeline && (
															<span style={{
																backgroundColor: '#52c41a',
																color: 'white',
																padding: '2px 6px',
																borderRadius: '4px',
																fontSize: '10px',
																marginLeft: 8,
															}}>
																Pipeline ({message.advisor?.steps?.length || 0} b∆∞·ªõc)
															</span>
														)}
													</span>
												</div>
											)}
											{message.type === 'data-sources' && (
												<div className={styles.dataSourcesInfo}>
													<span className={styles.dataSourcesName}>
														üìã Ngu·ªìn d·ªØ li·ªáu
													</span>
												</div>
											)}
											<div className={styles.messageText}>
												{message.type === 'assistant' ?
													<div
														className={styles.markdownContent}
														dangerouslySetInnerHTML={{
															__html: DOMPurify.sanitize(marked.parse(message.content || '')),
														}}
													/> :
													message.type === 'data-sources' ? (
														<div className={styles.dataSourcesContent}>
															<div className={styles.dataSourcesList}>
																{(() => {
																	// G·ªôp c√°c chunks theo sourceId
																	const groupedBySource = {};
																	message.embeddingResults.results.forEach(chunk => {
																		const sourceKey = `${chunk.table}_${chunk.sourceId}`;
																		if (!groupedBySource[sourceKey]) {
																			groupedBySource[sourceKey] = {
																				sourceId: chunk.sourceId,
																				table: chunk.table,
																				chunks: [],
																				bestSimilarity: 0,
																				title: chunk.chunkText.split('\n')[0] || `Ngu·ªìn ${chunk.table} ID ${chunk.sourceId}`,
																			};
																		}
																		groupedBySource[sourceKey].chunks.push(chunk);
																		// C·∫≠p nh·∫≠t similarity cao nh·∫•t
																		if (chunk.similarity > groupedBySource[sourceKey].bestSimilarity) {
																			groupedBySource[sourceKey].bestSimilarity = chunk.similarity;
																			groupedBySource[sourceKey].title = chunk.chunkText.split('\n')[0] || `Ngu·ªìn ${chunk.table} ID ${chunk.sourceId}`;
																		}
																	});

																	// Chuy·ªÉn th√†nh array v√† s·∫Øp x·∫øp theo similarity
																	const groupedResults = Object.values(groupedBySource)
																		.sort((a, b) => b.bestSimilarity - a.bestSimilarity);

																	return groupedResults.map((source, index) => (
																		<div
																			key={index}
																			className={styles.dataSourceItem}
																			onClick={() => showEmbeddingDetail({
																				sourceId: source.sourceId,
																				table: source.table,
																				title: source.title,
																				type: source.table,
																				category: 'Kho d·ªØ li·ªáu',
																				bestSimilarity: source.bestSimilarity,
																				chunks: source.chunks,
																			})}
																			title='Click ƒë·ªÉ xem chi ti·∫øt ngu·ªìn'
																		>
																			<div className={styles.dataSourceHeader}>
																				<span className={styles.dataSourceTitle}>
																					<SourceTitle
																						sourceId={source.sourceId}
																						table={source.table}
																						fallbackTitle={source.title}
																					/>
																				</span>
																				<span
																					className={styles.dataSourceSimilarity}>
																					{(source.bestSimilarity * 100).toFixed(1)}%
																				</span>
																			</div>
																			<div className={styles.dataSourceMeta}>
																				<span
																					className={styles.dataSourceType}>{source.table}</span>
																				<span
																					className={styles.dataSourceId}>ID: {source.sourceId}</span>
																				{source.chunks.length > 1 && (
																					<span
																						className={styles.dataSourceChunks}>
																						({source.chunks.length} ƒëo·∫°n)
																					</span>
																				)}
																			</div>
																			<div className={styles.dataSourcePreview}>
																				{/* Hi·ªÉn th·ªã preview t·ª´ chunk c√≥ similarity cao nh·∫•t */}
																				{(() => {
																					const bestChunk = source.chunks.reduce((best, chunk) =>
																						chunk.similarity > best.similarity ? chunk : best,
																					);
																					return bestChunk.chunkText.length > 150
																						? bestChunk.chunkText.substring(0, 150) + '...'
																						: bestChunk.chunkText;
																				})()}
																			</div>
																		</div>
																	));
																})()}
															</div>
														</div>
													) : (
														<>{message.content}</>
													)}
											</div>
											{message.citations && message.citations.groundingChunks && (
												<div className={styles.citationsSection}>
													<div className={styles.citationsTitle}>
														<GlobalOutlined style={{ marginRight: 4 }} />
														Ngu·ªìn tham kh·∫£o:
													</div>
													<div className={styles.citationsList}>
														{message.citations.groundingChunks.map((chunk, index) => (
															<div key={index} className={styles.citationItem}>
																<a
																	href={chunk.web?.uri}
																	target='_blank'
																	rel='noopener noreferrer'
																	className={styles.citationLink}
																	title={chunk.web?.uri || `Ngu·ªìn ${index + 1}`}
																>
																	{(() => {
																		const text = chunk.web?.uri || `Ngu·ªìn ${index + 1}`;
																		return chunk.web?.title + ' ( ' + text.substring(0, 70) + '...)';
																	})()}
																</a>
															</div>
														))}
													</div>
												</div>
											)}

											{/* Embedding Results Section - Only show when found */}
											{message.embeddingResults && message.embeddingResults.totalFound > 0 && (
												<div className={styles.embeddingResultsSection}>
													<div className={styles.embeddingResultsTitle}>
														üìö Th√¥ng tin t·ª´ kho d·ªØ li·ªáu
														({message.embeddingResults.totalFound} ngu·ªìn)
														{message.embeddingResults.searchMethod && (
															<span className={styles.searchMethodInfo}>
																- T√¨m ki·∫øm: {message.embeddingResults.searchMethod}
															</span>
														)}:
													</div>
													<div className={styles.embeddingResultsList}>
														{(() => {
															// G·ªôp c√°c chunks theo sourceId
															const groupedBySource = {};
															message.embeddingResults.results.forEach(item => {
																const sourceKey = `${item.table}_${item.sourceId}`;
																if (!groupedBySource[sourceKey]) {
																	groupedBySource[sourceKey] = {
																		sourceId: item.sourceId,
																		table: item.table,
																		chunks: [],
																		bestSimilarity: 0,
																		title: item?.chunkText?.split('\n')[0] || `Ngu·ªìn ${item.table} ID ${item.sourceId}` || '',
																	};
																}
																groupedBySource[sourceKey].chunks.push(item);
																// C·∫≠p nh·∫≠t similarity cao nh·∫•t
																if (item.similarity > groupedBySource[sourceKey].bestSimilarity) {
																	groupedBySource[sourceKey].bestSimilarity = item.similarity;
																	groupedBySource[sourceKey].title = item?.chunkText?.split('\n')[0] || `Ngu·ªìn ${item.table} ID ${item.sourceId}` || '';
																}
															});

															// Chuy·ªÉn th√†nh array v√† s·∫Øp x·∫øp theo similarity
															const groupedResults = Object.values(groupedBySource)
																.sort((a, b) => b.bestSimilarity - a.bestSimilarity);

															return groupedResults.map((source, index) => (
																<div
																	key={index}
																	className={styles.embeddingResultItem}
																	onClick={() => showEmbeddingDetail({
																		sourceId: source.sourceId,
																		table: source.table,
																		title: source.title,
																		type: source.table,
																		category: 'Kho d·ªØ li·ªáu',
																		bestSimilarity: source.bestSimilarity,
																		chunks: source.chunks,
																	})}
																	title='Click ƒë·ªÉ xem chi ti·∫øt'
																>
																	<div className={styles.embeddingResultTitle}>
																		<SourceTitle
																			sourceId={source.sourceId}
																			table={source.table}
																			fallbackTitle={source.title}
																		/>
																	</div>
																	<div className={styles.embeddingResultMeta}>
																		<span className={styles.embeddingResultType}>
																			{source.table}
																		</span>
																		<span className={styles.embeddingResultId}>
																			ID: {source.sourceId}
																		</span>
																		<span className={styles.embeddingResultSimilarity}>
																			{(source.bestSimilarity * 100).toFixed(1)}%
																		</span>
																		{source.chunks.length > 1 && (
																			<span className={styles.embeddingResultChunks}>
																				({source.chunks.length} ƒëo·∫°n)
																			</span>
																		)}
																	</div>
																</div>
															));
														})()}
													</div>
												</div>
											)}


											{/* No Embedding Results Notice - Only show when embedding search is enabled and no results found */}
											{useEmbeddingSearch && noEmbeddingResults && message.type === 'assistant' && (
												<div className={styles.noEmbeddingResultsSection}>
													<div className={styles.noEmbeddingResultsTitle}>
														üîç Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong kho d·ªØ li·ªáu
													</div>
													<div className={styles.noEmbeddingResultsText}>
														T√¥i ƒë√£ t√¨m ki·∫øm trong kho d·ªØ li·ªáu c·ªßa h·ªá th·ªëng nh∆∞ng kh√¥ng t√¨m th·∫•y
														th√¥ng tin ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa b·∫°n.
														Tr·∫£ l·ªùi tr√™n ƒë√¢y d·ª±a tr√™n ki·∫øn th·ª©c chung c·ªßa t√¥i.
													</div>
													<div className={styles.noEmbeddingResultsSuggestion}>
														üí° G·ª£i √Ω: Th·ª≠ ƒë·∫∑t c√¢u h·ªèi kh√°c ho·∫∑c s·ª≠ d·ª•ng t·ª´ kh√≥a kh√°c ƒë·ªÉ t√¨m ki·∫øm.
													</div>
												</div>
											)}
											<div className={styles.messageTime}>
												{/*N√∫t t·∫°o thesis ch·ªâ hi·ªÉn th·ªã cho tin nh·∫Øn assistant*/}
												{/* {message.type === 'assistant' && (
													<Button
														type='text'
														size='small'
														icon={<BookOutlined />}
														onClick={(e) => {
															e.stopPropagation();
															openThesisModal(message.content, message.id);
														}}
														title='T·∫°o S·ªï ng√†y t·ª´ n·ªôi dung n√†y'
														className={styles.thesisButton}
													>
														L∆∞u v√†o s·ªï c√° nh√¢n
													</Button>
												)} */}
												{message.timestamp.toLocaleTimeString('vi-VN', {
													hour: '2-digit',
													minute: '2-digit',
												})}
											</div>
										</div>
									</div>
								))}
								{isTyping && (
									<div className={`${styles.messageWrapper} ${styles.assistantMessage}`}>
										<Avatar size={32} icon={<RobotOutlined />} className={styles.messageAvatar}
											style={{ background: '#667eea' }} />
										<div className={styles.messageContent}>
											<div className={styles.typingIndicator}><span></span><span></span><span></span>
											</div>
										</div>
									</div>
								)}
							</div>
							{/* Advisor Selection Buttons */}
							{currentSessionId && (
								<div className={styles.advisorButtonsContainer}>
									<div className={styles.advisorButtons}>
										{/* Regular Advisors */}
										{advisorList.map((advisor) => (
											<Button
												key={advisor.key}
												type={selectedAdvisor == advisor.key ? 'primary' : 'default'}
												size='small'
												onClick={() => handleAdvisorChange(advisor.key)}
												className={`${styles.advisorButton} ${selectedAdvisor == advisor.key ? styles.advisorButtonSelected : ''}`}
											>
												<span
													style={{
														marginLeft: 4,
														fontWeight: selectedAdvisor == advisor.key ? '600' : '500',
													}}>
													{advisor.name}
													{advisor.enableWebsearch && (
														<GlobalOutlined
															title='S·ª≠ d·ª•ng Websearch'
															style={{ marginLeft: 4 }}
														/>
													)}
													{advisor.description && (
														<Tooltip title={advisor.description} placement="top">
															<QuestionCircleOutlined
																style={{ marginLeft: 4, fontSize: '12px', color: '#8c8c8c' }}
															/>
														</Tooltip>
													)}</span>
											</Button>
										))}

										{/* Pipeline Advisors */}
										{pipelineList.map((pipeline) => (
											<Button
												key={pipeline.key}
												type={selectedAdvisor == pipeline.key ? 'primary' : 'default'}
												size='small'
												onClick={() => handleAdvisorChange(pipeline.key)}
												className={`${styles.advisorButton} ${pipeline.isPipeline ? styles.pipelineButton : ''} ${selectedAdvisor == pipeline.key ? (pipeline.isPipeline ? styles.pipelineButtonSelected : styles.advisorButtonSelected) : ''}`}
											>
												<span
													style={{
														marginLeft: 4,
														fontWeight: selectedAdvisor == pipeline.key ? '600' : '500',
													}}>
													{pipeline.name}
													{pipeline.isPipeline && (
														<svg width="10" height="10" viewBox="0 0 41 45" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ marginLeft: '4px' }}>
															<path d="M8.0971 14.1239C9.71415 14.1239 11.265 13.4815 12.4084 12.3381C13.5518 11.1947 14.1942 9.64384 14.1942 8.02678C14.1942 6.40973 13.5518 4.85891 12.4084 3.71549C11.265 2.57206 9.71415 1.92969 8.0971 1.92969C6.48005 1.92969 4.92923 2.57206 3.7858 3.71549C2.64237 4.85891 2 6.40973 2 8.02678C2 9.64384 2.64237 11.1947 3.7858 12.3381C4.92923 13.4815 6.48005 14.1239 8.0971 14.1239ZM8.0971 14.1239V30.3828M8.0971 30.3828C6.48005 30.3828 4.92923 31.0252 3.7858 32.1686C2.64237 33.312 2 34.8629 2 36.4799C2 38.097 2.64237 39.6478 3.7858 40.7912C4.92923 41.9346 6.48005 42.577 8.0971 42.577C9.71415 42.577 11.265 41.9346 12.4084 40.7912C13.5518 39.6478 14.1942 38.097 14.1942 36.4799C14.1942 34.8629 13.5518 33.312 12.4084 32.1686C11.265 31.0252 9.71415 30.3828 8.0971 30.3828ZM38.5826 26.3181C38.5826 27.9351 37.9402 29.4859 36.7968 30.6294C35.6534 31.7728 34.1025 32.4152 32.4855 32.4152C30.8684 32.4152 29.3176 31.7728 28.1742 30.6294C27.0308 29.4859 26.3884 27.9351 26.3884 26.3181C26.3884 24.701 27.0308 23.1502 28.1742 22.0068C29.3176 20.8633 30.8684 20.221 32.4855 20.221C34.1025 20.221 35.6534 20.8633 36.7968 22.0068C37.9402 23.1502 38.5826 24.701 38.5826 26.3181Z" stroke="#7D7D7D" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round" />
															<path d="M26.3889 26.3192H20.2919C17.0577 26.3192 13.9561 25.0345 11.6693 22.7476C9.3824 20.4607 8.09766 17.3591 8.09766 14.125" stroke="#7D7D7D" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round" />
														</svg>
													)}
													{pipeline.description && (
														<Tooltip title={pipeline.description} placement="top">
															<QuestionCircleOutlined
																style={{ marginLeft: 4, fontSize: '12px', color: '#8c8c8c' }}
															/>
														</Tooltip>
													)}
												</span>
											</Button>
										))}
									</div>
								</div>
							)}
							<div className={styles.inputArea}>
								<div className={styles.inputWrapper} style={{ position: 'relative' }}>
									<TextArea
										value={inputMessage}
										onChange={handleInputChange}
										onKeyDown={handleKeyPress}
										placeholder={currentSessionId ? 'Nh·∫≠p c√¢u h·ªèi... (G√µ @ ƒë·ªÉ ch·ªçn template)' : 'T·∫°o chat ƒë·ªÉ b·∫Øt ƒë·∫ßu...'}
										autoSize={{ minRows: 1, maxRows: 4, minWidth: 120 }}
										className={`${styles.messageInput} ${templateError ? styles.templateError : ''}`}
										disabled={!currentSessionId}
									/>
									{showTemplateSuggestions && (
										<div className={styles.templateSuggestions} ref={suggestionsRef}>
											{templateSuggestions.map((template, index) => (
												<div
													key={template.key}
													className={`${styles.suggestionItem} ${
														index === selectedSuggestionIndex ? styles.suggestionItemSelected : ''
													}`}
													onClick={() => handleTemplateSuggestionClick(template)}
												>
													<div className={styles.suggestionLabel}>{template.label}</div>
													<div className={styles.suggestionPreview}>
														{template.template.length > 50
															? template.template.substring(0, 50) + '...'
															: template.template
														}
													</div>
												</div>
											))}
										</div>
									)}
									<div className={styles.inputButtons}>
										{/* N√∫t l∆∞u to√†n b·ªô cu·ªôc tr√≤ chuy·ªán v√†o thesis */}
										<Button
											type='primary'
											icon={<SendOutlined />}
											onClick={sendMessage}
											disabled={!inputMessage.trim() || isTyping || !currentSessionId || templateError}
											className={styles.sendButton}
											title={templateError ? '' : ''}
										/>
										{currentSessionId && messages.length > 1 && (
											<Button
												type='default'
												icon={<BookOutlined />}
												onClick={openChatThesisModal}
												disabled={isTyping}
												className={styles.chatThesisButton}
												title='L∆∞u to√†n b·ªô cu·ªôc tr√≤ chuy·ªán v√†o s·ªï c√° nh√¢n'
												size='small'
											>
												L∆∞u
											</Button>
										)}
									</div>
								</div>
							</div>
							<i>
								<small style={{ fontSize: 11.5 }}>
									* C·∫ßn ƒëi·ªÅn/ thay th·∫ø th√¥ng tin trong &&& tr∆∞·ªõc khi g·ª≠i. Prompt kh√¥ng h·ªó tr·ª£ k√≠ t·ª± &
								</small>
							</i>
						</div>
						{!currentSessionId && (
							<div className={styles.welcomeSection}>
								<div className={styles.welcomeText}>
									<h3>Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Chat</h3>
									<p>T·∫°o chat m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán
										<br />v·ªõi AI advisor</p>
								</div>
								<Button
									size='large'
									icon={<PlusOutlined />}
									onClick={createNewSessionQuick}
									className={styles.createChatBtn}
								>
									CHAT M·ªöI
								</Button>
							</div>
						)}
					</div>
				</div>
			</div>
			{
				(currentUser?.isAdmin || currentUser?.isSuperAdmin) && (
					<>
						<AdvisorSettingModal
							visible={advisorModalVisible}
							onClose={() => setAdvisorModalVisible(false)}
							onAdvisorUpdate={handleAdvisorUpdate}
						/>
						<TemplateSettingModal
							visible={templateModalVisible}
							onClose={() => setTemplateModalVisible(false)}
							onTemplateUpdate={handleTemplateUpdate}
						/>
						<AiPipelineSettingModal
							visible={pipelineModalVisible}
							onClose={() => setPipelineModalVisible(false)}
							onPipelineUpdate={handlePipelineUpdate}
						/>
					</>
				)

			}


			{/* Thesis Creation Modal */}
			<Modal
				title={
					<div className={styles.thesisModalTitle}>
						<BookOutlined />
						{isCreatingNewThesis ? 'T·∫°o S·ªï ng√†y m·ªõi' : 'Th√™m v√†o S·ªï ng√†y'}
					</div>
				}
				open={thesisModalVisible}
				onCancel={closeThesisModal}
				footer={[
					<Button key='cancel' onClick={closeThesisModal}>
						H·ªßy
					</Button>,
					<Button
						key='submit'
						type='primary'
						loading={creatingThesis}
						onClick={() => thesisForm.submit()}
					>
						{isCreatingNewThesis ? 'T·∫°o S·ªï ng√†y' : 'Th√™m v√†o S·ªï ng√†y'}
					</Button>,
				]}
				width={700}
				confirmLoading={creatingThesis || generatingSummary}
			>
				<div style={{ marginBottom: 16 }}>
					<Alert
						message='Th√¥ng tin'
						description={generatingSummary
							? 'ƒêang t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông b·∫±ng AI...'
							: isChatThesis
								? 'ƒêang l∆∞u to√†n b·ªô cu·ªôc tr√≤ chuy·ªán v·ªõi ch·∫ø ƒë·ªô r√∫t g·ªçn m·∫∑c ƒë·ªãnh.'
								: 'N·ªôi dung v√† t√≥m t·∫Øt ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ c√¢u tr·∫£ l·ªùi c·ªßa AI. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a tr∆∞·ªõc khi l∆∞u.'
						}
						type='info'
						showIcon
						style={{ marginBottom: 16 }}
					/>
				</div>

				{/* Mode Selection - ch·ªâ hi·ªÉn th·ªã cho l∆∞u 1 chat */}
				{!isChatThesis && (
					<div style={{ marginBottom: 16 }}>
						<div style={{ fontWeight: 500, marginBottom: 8 }}>Ch·∫ø ƒë·ªô l∆∞u:</div>
						<Space>
							<Button
								type={thesisMode === 'original' ? 'primary' : 'default'}
								onClick={() => setThesisMode('original')}
								size='small'
							>
								üìù Nguy√™n vƒÉn
							</Button>
							<Button
								type={thesisMode === 'summarized' ? 'primary' : 'default'}
								onClick={() => setThesisMode('summarized')}
								size='small'
							>
								üìã R√∫t g·ªçn
							</Button>
						</Space>
						<div style={{ fontSize: 12, color: '#666', marginTop: 4 }}>
							{thesisMode === 'original'
								? 'L∆∞u n·ªôi dung nguy√™n vƒÉn kh√¥ng thay ƒë·ªïi'
								: 'S·ª≠ d·ª•ng AI ƒë·ªÉ r√∫t g·ªçn n·ªôi dung tr∆∞·ªõc khi l∆∞u'
							}
						</div>
					</div>
				)}

				{/* Prompt Setting cho r√∫t g·ªçn */}
				{thesisMode === 'summarized' && (
					<div style={{ marginBottom: 16 }}>
						<div style={{ fontWeight: 500, marginBottom: 4 }}>Prompt r√∫t g·ªçn:</div>
						<Input.TextArea
							value={summarizePrompt}
							onChange={(e) => setSummarizePrompt(e.target.value)}
							rows={6}
							placeholder="Nh·∫≠p prompt ƒë·ªÉ AI r√∫t g·ªçn n·ªôi dung..."
							style={{ fontSize: '13px', lineHeight: '1.4' }}
						/>
						<div style={{ fontSize: 12, color: '#666', marginTop: 4 }}>
							Prompt n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ AI r√∫t g·ªçn n·ªôi dung th√†nh ƒë·ªãnh d·∫°ng Markdown c√≥ c·∫•u tr√∫c
						</div>
					</div>
				)}

				{/* Thesis Selection */}
				<div style={{ marginBottom: 16 }}>
					<Space direction='vertical' style={{ width: '100%' }}>
						<div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
							<Switch
								checked={isCreatingNewThesis}
								onChange={(checked) => {
									setIsCreatingNewThesis(checked);
									if (checked) {
										setSelectedThesisId(null);
									}
								}}
								size='small'
							/>
							<span style={{ fontSize: '14px', fontWeight: 500 }}>
								{isCreatingNewThesis ? 'T·∫°o S·ªï ng√†y m·ªõi' : 'Th√™m v√†o S·ªï ng√†y s·∫µn c√≥'}
							</span>
						</div>

						{!isCreatingNewThesis && (
							<Select
								placeholder='Ch·ªçn S·ªï ng√†y ƒë·ªÉ th√™m v√†o...'
								value={selectedThesisId}
								onChange={setSelectedThesisId}
								style={{ width: '100%' }}
								showSearch
								filterOption={(input, option) =>
									option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
								}
							>
								{thesisList.filter(thesis => thesis.userCreated === (currentUser?.email || currentUser?.id)).map(thesis => (
									<Select.Option key={thesis.id} value={thesis.id}>
										{thesis.name || `S·ªï ng√†y #${thesis.id}`}
									</Select.Option>
								))}
							</Select>
						)}
					</Space>
				</div>

				<Form
					form={thesisForm}
					layout='vertical'
					onFinish={createThesisFromModal}
				>
					{/* Tr∆∞·ªùng t√™n thesis - ch·ªâ hi·ªÉn th·ªã khi t·∫°o m·ªõi */}
					{isCreatingNewThesis && (
						<Form.Item
							name='name'
							label='T√™n thesis'
							rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n thesis' }]}
						>
							<Input
								placeholder='Nh·∫≠p t√™n S·ªï ng√†y...'
								onChange={(e) => {
									setThesisData(prev => ({ ...prev, name: e.target.value }));
								}}
							/>
						</Form.Item>
					)}

					<Form.Item
						name='content'
						label={
							<div style={{ display: 'flex', alignItems: 'end', gap: 8 }}>
								<span>N·ªôi dung</span>
								<span style={{ fontSize: '12px', color: '#666' }}>
									{thesisData.content.length} k√Ω t·ª±
								</span>
							</div>
						}
						rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p n·ªôi dung' }]}
					>
						<TextArea
							rows={10}
							placeholder='N·ªôi dung S·ªï ng√†y s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª´ c√¢u tr·∫£ l·ªùi c·ªßa AI'
							style={{
								fontFamily: 'monospace',
								fontSize: '13px',
								lineHeight: '1.5',
							}}
							onChange={(e) => {
								setThesisData(prev => ({ ...prev, content: e.target.value }));
							}}
						/>
					</Form.Item>

					{/* T·∫°m ·∫©n ph·∫ßn T√≥m t·∫Øt */}
					{false && (
						<Form.Item
							name='summary'
							label={
								<div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
									<span>T√≥m t·∫Øt</span>
									<span style={{ fontSize: '12px', color: '#666' }}>
										{thesisData.summary.length} k√Ω t·ª±
									</span>
									<Button
										type='text'
										size='small'
										icon={<Sparkles size={14} />}
										onClick={generateSummaryWithAI}
										loading={generatingSummary}
										title='S·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông'
										className={styles.aiSummaryButton}
									>
										AI T√≥m t·∫Øt
									</Button>
								</div>
							}
							rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√≥m t·∫Øt' }]}
						>
							<TextArea
								rows={4}
								placeholder={generatingSummary
									? 'ƒêang t·∫°o t√≥m t·∫Øt t·ª± ƒë·ªông...'
									: 'T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ n·ªôi dung S·ªï ng√†y (ho·∫∑c click n√∫t AI T√≥m t·∫Øt ƒë·ªÉ t·∫°o t·ª± ƒë·ªông)'
								}
								disabled={generatingSummary}
								onChange={(e) => {
									setThesisData(prev => ({ ...prev, summary: e.target.value }));
								}}
							/>
						</Form.Item>
					)}
				</Form>
			</Modal>

			{/* Embedding Detail Modal */}
			<Modal
				title={
					<div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
						üìö Chi ti·∫øt t√†i li·ªáu
					</div>
				}
				open={embeddingDetailModal.visible}
				onCancel={closeEmbeddingDetail}
				footer={[
					<Button key='close' onClick={closeEmbeddingDetail}>
						ƒê√≥ng
					</Button>,
				]}
				width={'80vw'}
				confirmLoading={embeddingDetailLoading}
			>
				<div style={{ height: '90vh' }}>
					{embeddingDetailLoading ? (
						<div style={{ textAlign: 'center', padding: '40px 20px' }}>
							<div className={styles.typingIndicator}>
								<span></span><span></span><span></span>
							</div>
							<p style={{ marginTop: '16px', color: '#666' }}>ƒêang t·∫£i th√¥ng tin chi ti·∫øt...</p>
						</div>
					) : embeddingDetailModal.data && (
						<div className={styles.embeddingDetailContent}>
							<div className={styles.embeddingDetailHeader}>
								<div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
									<h3>{embeddingDetailModal.data.title}</h3>

								</div>
								<div className={styles.embeddingDetailMeta}>
									<span className={styles.embeddingDetailType}>
										Lo·∫°i: {embeddingDetailModal.data.type}
									</span>
									<span className={styles.embeddingDetailCategory}>
										Danh m·ª•c: {embeddingDetailModal.data.category}
									</span>
									<span className={styles.embeddingDetailSimilarity}>
										ƒê·ªô t∆∞∆°ng ƒë·ªìng: {(embeddingDetailModal.data.chunks[0].bestSimilarity * 100).toFixed(1)}%
									</span>
									{embeddingDetailModal.data.createdAt && (
										<span className={styles.embeddingDetailDate}>
											Ng√†y t·∫°o: {new Date(embeddingDetailModal.data.createdAt).toLocaleDateString('vi-VN')}
										</span>
									)}
									{embeddingDetailModal.data.source && (
										<span className={styles.embeddingDetailSource}>
											Ngu·ªìn: {embeddingDetailModal.data.source}
										</span>
									)}
									{embeddingDetailModal.data.emoji && (
										<span className={styles.embeddingDetailEmoji}>
											Emoji: {embeddingDetailModal.data.emoji}
										</span>
									)}
								</div>
							</div>
							<div style={{ height: 'calc(85vh - 370px)', overflow: 'auto' }}>
								{/* Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt d·ª±a tr√™n lo·∫°i t√†i li·ªáu */}
								{embeddingDetailModal.data.type === 'report' ? (
									// Hi·ªÉn th·ªã th√¥ng tin AI Summary cho report
									<div style={{ fontSize: 15 }}>
										<div><b>ID:</b> {embeddingDetailModal.data.id}</div>
										<div><b>Title:</b> {(() => {
											try {
												const info = typeof embeddingDetailModal.data.info === 'string' ? JSON.parse(embeddingDetailModal.data.info) : embeddingDetailModal.data.info;
												return info?.title || '-';
											} catch {
												return '-';
											}
										})()}</div>
										<div><b>URLReport:</b> {(() => {
											try {
												const info = typeof embeddingDetailModal.data.info === 'string' ? JSON.parse(embeddingDetailModal.data.info) : embeddingDetailModal.data.info;
												return info?.URLReport ? <a href={info.URLReport} target='_blank'
													rel='noopener noreferrer'>{info.URLReport}</a> : '-';
											} catch {
												return '-';
											}
										})()}</div>
										<div style={{ margin: '12px 0' }}><b>Summary:</b><br />
											<div style={{
												background: '#f6f8fa',
												padding: 10,
												borderRadius: 6,
												whiteSpace: 'pre-wrap',
											}}>{embeddingDetailModal.data.summary1 || '-'}</div>
										</div>
										<div style={{ margin: '12px 0' }}><b>Detail:</b><br />
											<div style={{
												background: '#f6f8fa',
												padding: 10,
												borderRadius: 6,
												whiteSpace: 'pre-wrap',
											}}>{embeddingDetailModal.data.summary2 || '-'}</div>
										</div>

										{/* Display Tables */}
										{embeddingDetailModal.data.tables && (() => {
											try {
												const tables = typeof embeddingDetailModal.data.tables === 'string' ? JSON.parse(embeddingDetailModal.data.tables) : embeddingDetailModal.data.tables;
												if (Array.isArray(tables) && tables.length > 0) {
													return (
														<div style={{ margin: '12px 0' }}>
															<b>üìä B·∫£ng th√¥ng s·ªë:</b><br />
															<div style={{ marginTop: '8px' }}>
																{tables.map((table, index) => (
																	<div key={table.id || index} style={{
																		background: '#f6f8fa',
																		padding: '12px',
																		borderRadius: '6px',
																		marginBottom: '12px',
																		border: '1px solid #e1e4e8',
																	}}>
																		<div style={{
																			display: 'flex',
																			justifyContent: 'space-between',
																			alignItems: 'center',
																			marginBottom: '8px',
																		}}>
																			<h4 style={{ margin: 0, color: '#1890ff' }}>
																				{table.name || `B·∫£ng ${index + 1}`}
																			</h4>
																			<span style={{
																				padding: '2px 8px',
																				backgroundColor: '#e6f7ff',
																				borderRadius: '4px',
																				fontSize: '12px',
																				color: '#1890ff',
																			}}>
																				{table.type === 'quarterly' ? 'Theo qu√Ω' :
																					table.type === 'monthly' ? 'Theo th√°ng' :
																						'Theo nƒÉm'}
																			</span>
																		</div>

																		{table.data && Object.keys(table.data).length > 0 ? (
																			<div style={{
																				display: 'grid',
																				gridTemplateColumns:
																					table.type === 'quarterly' ? 'repeat(4, 1fr)' :
																						table.type === 'monthly' ? 'repeat(6, 1fr)' :
																							'repeat(3, 1fr)',
																				gap: '8px',
																				backgroundColor: '#fff',
																				padding: '12px',
																				borderRadius: '4px',
																			}}>
																				{Object.entries(table.data).map(([key, value]) => (
																					<div key={key} style={{
																						textAlign: 'center',
																						padding: '8px',
																						backgroundColor: '#f5f5f5',
																						borderRadius: '3px',
																					}}>
																						<div style={{
																							fontWeight: 'bold',
																							fontSize: '12px',
																						}}>{key}</div>
																						<div style={{
																							fontSize: '14px',
																							color: '#1890ff',
																						}}>
																							{value || '-'}
																						</div>
																					</div>
																				))}
																			</div>
																		) : (
																			<div style={{
																				textAlign: 'center',
																				color: '#999',
																				padding: '20px',
																				backgroundColor: '#fff',
																				borderRadius: '4px',
																			}}>
																				Ch∆∞a c√≥ d·ªØ li·ªáu
																			</div>
																		)}
																	</div>
																))}
															</div>
														</div>
													);
												}
											} catch (e) {
												console.error('Error parsing tables:', e);
											}
											return null;
										})()}

										<div><b>Created
											At:</b> {embeddingDetailModal.data.created_at ? new Date(embeddingDetailModal.data.created_at).toLocaleString() : '-'}
										</div>
									</div>
								) : (
									// Hi·ªÉn th·ªã th√¥ng tin th√¥ng th∆∞·ªùng cho c√°c lo·∫°i kh√°c
									<>
										{embeddingDetailModal.data.summary && (
											<div className={styles.embeddingDetailSummary}>
												<h4>üìã T√≥m t·∫Øt:</h4>
												<p>{embeddingDetailModal.data.summary}</p>
											</div>
										)}

										{embeddingDetailModal.data.detail && (
											<div className={styles.embeddingDetailBody}>
												<h4>üìÑ N·ªôi dung chi ti·∫øt:</h4>
												<div
													className={styles.markdownContent}
													dangerouslySetInnerHTML={{
														__html: DOMPurify.sanitize(marked.parse(embeddingDetailModal.data.detail || '')),
													}}
												/>
											</div>
										)}

										{!embeddingDetailModal.data.detail && !embeddingDetailModal.data.summary && (
											<div className={styles.embeddingDetailEmpty}>
												<p>Kh√¥ng c√≥ n·ªôi dung chi ti·∫øt cho t√†i li·ªáu n√†y.</p>
											</div>
										)}
									</>
								)}
							</div>
						</div>
					)}
				</div>
			</Modal>

			{/* Template Edit Modal */}
			<TemplateEditModal
				visible={templateEditModalVisible}
				onCancel={handleTemplateEditCancel}
				onConfirm={handleTemplateEditConfirm}
				template={selectedTemplate}
			/>
		</>
	);
};

export default AiChatTab;
