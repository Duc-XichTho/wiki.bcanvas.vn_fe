import { Input, Button, Modal, message, Select, Switch } from 'antd';
import { createSetting, getSettingByType, updateSetting } from '../../apis/settingService.jsx';
import { useState, useEffect } from 'react';
import { MODEL_AI_LIST } from '../../CONST.js';
import { defaultMessage3 } from './default.js';
import { createTemplateSettingAIReportBuilder, getAllTemplateSettingAIReportBuilder, updateTemplateSettingAIReportBuilder } from '../../apis/templateSettingAIReportBuilder';
import { log } from 'mathjs';

export default function AIForm({
    isOpen,
    onClose,
    prompt,
    setPrompt,
    systemMessage1,
    setSystemMessage1,
    systemMessage2,
    setSystemMessage2,
    systemMessage3,
    setSystemMessage3,
    onAnalyze,
    onViewData,
    ai2ConfigText,
    setAi2ConfigText,
    autoGeneratedPrompt
}) {
    const [tempSystemMessage1, setTempSystemMessage1] = useState(systemMessage1);
    const [tempSystemMessage2, setTempSystemMessage2] = useState(systemMessage2);
    const [tempSystemMessage3, setTempSystemMessage3] = useState(systemMessage3);
    const [tempSystemMessage0, setTempSystemMessage0] = useState(defaultMessage3);
    const [systemMessage0, setSystemMessage0] = useState('');
    const [tempModel0, setTempModel0] = useState(MODEL_AI_LIST[0].value);
    const [tempModel1, setTempModel1] = useState(MODEL_AI_LIST[0].value);
    const [tempModel2, setTempModel2] = useState(MODEL_AI_LIST[0].value);
    const [tempModel3, setTempModel3] = useState(MODEL_AI_LIST[0].value);
    const [saveTemplateModal, setSaveTemplateModal] = useState(false);
    const [templateName, setTemplateName] = useState('');
    const [templateList, setTemplateList] = useState([]);
    const [selectedTemplateId, setSelectedTemplateId] = useState(null);
    const [manualConfigEnabled, setManualConfigEnabled] = useState(false);

    useEffect(() => {
        if (isOpen) {
            setTempSystemMessage1(systemMessage1);
            setTempSystemMessage2(systemMessage2);
            setTempSystemMessage3(systemMessage3);
            loadSystemMessage0();
            loadModels();
            fetchTemplates();
            loadManualConfigSetting();
        }
    }, [isOpen, systemMessage1, systemMessage2, systemMessage3]);

    const loadManualConfigSetting = async () => {
        try {
            const setting = await getSettingByType('AI_REPORT_BUILDER_MANUAL_CONFIG');
            if (setting) {
                setManualConfigEnabled(setting.setting === true);
            }
        } catch (error) {
            console.error('Error loading manual config setting:', error);
        }
    };

    const saveManualConfigSetting = async (enabled) => {
        try {
            const setting = await getSettingByType('AI_REPORT_BUILDER_MANUAL_CONFIG');
            if (setting) {
                await updateSetting({ ...setting, setting: enabled });
            } else {
                await createSetting({
                    type: 'AI_REPORT_BUILDER_MANUAL_CONFIG',
                    setting: enabled,
                });
            }
            message.success('Đã lưu cài đặt cấu hình thủ công');
        } catch (error) {
            console.error('Error saving manual config setting:', error);
            message.error('Lỗi khi lưu cài đặt');
        }
    };

    const handleManualConfigChange = (enabled) => {
        setManualConfigEnabled(enabled);
        saveManualConfigSetting(enabled);
    };

    const handleAnalyzeClick = () => {
        onAnalyze(manualConfigEnabled);
        onClose();
    };

    const loadModels = async () => {
        try {
            const model0 = await getSettingByType('MODEL_AI_0');
            if (model0) {
                setTempModel0(model0.setting);
            }
            const model1 = await getSettingByType('MODEL_AI_1');
            if (model1) {
                setTempModel1(model1.setting);
            }
            const model2 = await getSettingByType('MODEL_AI_2');
            if (model2) {
                setTempModel2(model2.setting);
            }
            const model3 = await getSettingByType('MODEL_AI_3');
            if (model3) {
                setTempModel3(model3.setting);
            }
        } catch (error) {
            console.error('Error loading models:', error);
        }
    };

    const saveModel = async (type, value) => {
        try {
            const settings = await getSettingByType(type);
            if (settings) {
                await updateSetting({ ...settings, setting: value });
            } else {
                await createSetting({
                    type: type,
                    setting: value,
                });
            }
            message.success('Đã lưu Model AI')
        } catch (error) {
            console.error('Error saving model:', error);
        }
    };

    const loadSystemMessage0 = async () => {
        try {
            const message = await getSettingByType('SYSTEM_MESSAGE_0');
            if (message) {
                setSystemMessage0(message.setting);
                setTempSystemMessage0(message.setting);
            }
        } catch (error) {
            console.error('Error loading system message 0:', error);
        }
    };

    const saveSystemMessage0 = async () => {
        try {
            const settings = await getSettingByType('SYSTEM_MESSAGE_0');
            if (settings) {
                await updateSetting({ ...settings, setting: tempSystemMessage0 });
            } else {
                await createSetting({
                    type: 'SYSTEM_MESSAGE_0',
                    setting: tempSystemMessage0,
                });
            }
            setSystemMessage0(tempSystemMessage0);
            message.success('Đã lưu System Message 0')
        } catch (error) {
            console.error('Error saving system message 0:', error);
        }
    };

    const saveSystemMessage1 = async () => {
        try {
            const settings = await getSettingByType('SYSTEM_MESSAGE_1');
            if (settings) {
                await updateSetting({ ...settings, setting: tempSystemMessage1 });
            } else {
                await createSetting({
                    type: 'SYSTEM_MESSAGE_1',
                    setting: tempSystemMessage1,
                });
            }
            setSystemMessage1(tempSystemMessage1);
            message.success('Đã lưu System Message 1')
        } catch (error) {
            console.error('Error saving system message 1:', error);
        }
    };

    const saveSystemMessage2 = async () => {
        try {
            const settings = await getSettingByType('SYSTEM_MESSAGE_2');
            if (settings) {
                await updateSetting({ ...settings, setting: tempSystemMessage2 });
            } else {
                await createSetting({
                    type: 'SYSTEM_MESSAGE_2',
                    setting: tempSystemMessage2,
                });
            }
            setSystemMessage2(tempSystemMessage2);
            message.success('Đã lưu System Message 2')
        } catch (error) {
            console.error('Error saving system message 2:', error);
        }
    };

    const saveSystemMessage3 = async () => {
        try {
            const settings = await getSettingByType('SYSTEM_MESSAGE_3');
            if (settings) {
                await updateSetting({ ...settings, setting: tempSystemMessage3 });
            } else {
                await createSetting({
                    type: 'SYSTEM_MESSAGE_3',
                    setting: tempSystemMessage3,
                });
            }
            setSystemMessage3(tempSystemMessage3);
            message.success('Đã lưu System Message 3')
        } catch (error) {
            console.error('Error saving system message 3:', error);
        }
    };

    const handleSaveTemplate = async () => {
        try {
            const user = JSON.parse(localStorage.getItem('currentUser'));
            const setting = {
                model0: tempModel0,
                model1: tempModel1,
                model2: tempModel2,
                model3: tempModel3,
                systemMessage0: tempSystemMessage0,
                systemMessage1: tempSystemMessage1,
                systemMessage2: tempSystemMessage2,
                systemMessage3: tempSystemMessage3,
            };
            await createTemplateSettingAIReportBuilder({
                name: templateName,
                setting,
                user_create: user?.email || '',
                create_at: new Date().toISOString(),
                show: true,
            });
            message.success('Đã lưu template cấu hình!');
            setSaveTemplateModal(false);
            setTemplateName('');
        } catch (error) {
            message.error('Lưu template thất bại!');
        }
    };

    const fetchTemplates = async () => {
        try {
            const data = await getAllTemplateSettingAIReportBuilder();
            setTemplateList(Array.isArray(data.data) ? data.data : []);
        } catch (error) {
            setTemplateList([]);
        }
    };

    const handleSelectTemplate = (templateId) => {
        setSelectedTemplateId(templateId);
        const template = templateList.find(t => t.id === templateId);
        if (template && template.setting) {
            setTempModel0(template.setting.model0 || MODEL_AI_LIST[0].value);
            setTempModel1(template.setting.model1 || MODEL_AI_LIST[0].value);
            setTempModel2(template.setting.model2 || MODEL_AI_LIST[0].value);
            setTempModel3(template.setting.model3 || MODEL_AI_LIST[0].value);
            setTempSystemMessage0(template.setting.systemMessage0 || '');
            setTempSystemMessage1(template.setting.systemMessage1 || '');
            setTempSystemMessage2(template.setting.systemMessage2 || '');
            setTempSystemMessage3(template.setting.systemMessage3 || '');
        }
    };

    const handleUpdateTemplate = async () => {
        if (!selectedTemplateId) return;
        try {
            const user = JSON.parse(localStorage.getItem('currentUser'));
            const setting = {
                model0: tempModel0,
                model1: tempModel1,
                model2: tempModel2,
                model3: tempModel3,
                systemMessage0: tempSystemMessage0,
                systemMessage1: tempSystemMessage1,
                systemMessage2: tempSystemMessage2,
                systemMessage3: tempSystemMessage3,
            };
            const template = templateList.find(t => t.id === selectedTemplateId);
            await updateTemplateSettingAIReportBuilder({
                id: selectedTemplateId,
                name: template?.name || '',
                setting,
                user_create: user?.email || '',
                create_at: new Date().toISOString(),
                show: true,
            });
            message.success('Đã cập nhật template!');
            fetchTemplates();
        } catch (error) {
            message.error('Cập nhật template thất bại!');
        }
    };

    return (
        <Modal
            title="Cài đặt System Message"
            open={isOpen}
            onCancel={onClose}
            footer={null}
            width={'90vw'}
            centered
        >

            <div style={{ display: 'flex', alignItems: 'center', gap: 16, marginBottom: 16, justifyContent: 'space-between' }}>
                {Array.isArray(templateList) && templateList.length > 0 && (
                    <div>
                        <span>Chọn template:</span>
                        <Select
                            style={{ minWidth: 220 }}
                            placeholder="Chọn template..."
                            value={selectedTemplateId}
                            onChange={handleSelectTemplate}
                            options={(Array.isArray(templateList) ? templateList : []).map(t => ({ label: t.name, value: t.id }))}
                            allowClear
                        />
                        {selectedTemplateId && (
                            <Button style={{ marginLeft: 8 }} onClick={handleUpdateTemplate} type="dashed">
                                Cập nhật cấu hình template
                            </Button>
                        )}
                    </div>
                )}
                <Button type="primary" onClick={() => setSaveTemplateModal(true)}>
                    Lưu template cấu hình
                </Button>
            </div>

            <div style={{ display: 'flex', gap: 20 }}>
                <div style={{ flex: 1 }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>
                            <h3 style={{ margin: 0 }}>Bot tạo Mô tả:</h3>
                            <Select
                                style={{ width: 200 }}
                                value={tempModel0}
                                onChange={(value) => setTempModel0(value)}
                                options={MODEL_AI_LIST}
                            />
                        </div>
                        <Button type="primary" onClick={() => {
                            saveSystemMessage0();
                            saveModel('MODEL_AI_0', tempModel0);
                        }}>Lưu</Button>
                    </div>
                    <Input.TextArea
                        value={tempSystemMessage0}
                        onChange={(e) => setTempSystemMessage0(e.target.value)}
                        style={{ height: '75vh' }}
                    />
                </div>
                <div style={{ flex: 1 }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>
                            <h3 style={{ margin: 0 }}>Bot lọc dữ liệu:</h3>
                            <Select
                                style={{ width: 200 }}
                                value={tempModel1}
                                onChange={(value) => setTempModel1(value)}
                                options={MODEL_AI_LIST}
                            />
                        </div>
                        <Button type="primary" onClick={() => {
                            saveSystemMessage1();
                            saveModel('MODEL_AI_1', tempModel1);
                        }}>Lưu</Button>
                    </div>
                    <Input.TextArea
                        value={tempSystemMessage1}
                        onChange={(e) => setTempSystemMessage1(e.target.value)}
                        style={{ height: '75vh' }}
                    />
                  
                </div>
                <div style={{ flex: 1 }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>
                            <h3 style={{ margin: 0 }}>Bot phân tích:</h3>
                            <Select
                                style={{ width: 200 }}
                                value={tempModel2}
                                onChange={(value) => setTempModel2(value)}
                                options={MODEL_AI_LIST}
                            />
                        </div>
                        <Button type="primary" onClick={() => {
                            saveSystemMessage2();
                            saveModel('MODEL_AI_2', tempModel2);
                        }}>Lưu</Button>
                    </div>
                    <Input.TextArea
                        value={tempSystemMessage2}
                        onChange={(e) => setTempSystemMessage2(e.target.value)}
                        style={{ height: '75vh' }}
                    />
                
                </div>
                <div style={{ flex: 1 }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>
                            <h3 style={{ margin: 0 }}>Bot tạo biểu đồ:</h3>
                            <Select
                                style={{ width: 200 }}
                                value={tempModel3}
                                onChange={(value) => setTempModel3(value)}
                                options={MODEL_AI_LIST}
                            />
                        </div>
                        <Button type="primary" onClick={() => {
                            saveSystemMessage3();
                            saveModel('MODEL_AI_3', tempModel3);
                        }}>Lưu</Button>
                    </div>
                    <Input.TextArea
                        value={tempSystemMessage3}
                        onChange={(e) => setTempSystemMessage3(e.target.value)}
                        style={{ height: '75vh' }}
                    />
                </div>
            </div>

            <Modal
                title="Lưu template cấu hình"
                open={saveTemplateModal}
                onCancel={() => setSaveTemplateModal(false)}
                onOk={handleSaveTemplate}
                footer={null}
                centered
            >
                <div style={{ marginBottom: 16 }}>
                    <Input
                        placeholder="Nhập tên template..."
                        value={templateName}
                        onChange={e => setTemplateName(e.target.value)}
                    />
                </div>
                <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 8 }}>
                    <Button onClick={() => setSaveTemplateModal(false)}>Hủy</Button>
                    <Button type="primary" onClick={handleSaveTemplate} disabled={!templateName.trim()}>
                        Lưu
                    </Button>
                </div>
            </Modal>
        </Modal>
    );
}
