import React, { useState, useEffect, useCallback, useMemo } from 'react';
import styles from '../../AnalysisReview.module.css';
import Editor from 'react-simple-code-editor';
import { Checkbox, Input, Modal  } from 'antd';
import { getAllUserClass } from '../../../../apis/userClassService.jsx';
import OutputConfigurator from './OutputConfigurator';
// import 'prismjs/themes/prism.css';

export default function NewTemplateModal({ 
  showNewTemplate, 
  newTemplate, 
  setNewTemplate, 
  onSave, 
  onCancel,
  fileNotesFull = [],
  kpi2Calculators = [],
  onAutoGeneratedPromptCreated
}) {
  const [allUserClasses, setAllUserClasses] = useState([]);
  const [userClassSearchText, setUserClassSearchText] = useState('');
  const [selectedUserClasses, setSelectedUserClasses] = useState(new Set());
  const [outputConfig, setOutputConfig] = useState({ sections: [], generatedPrompt: '' });
  const [originalPrompt, setOriginalPrompt] = useState('');

  // Filter user classes based on search - memoized to prevent unnecessary recalculations
  const filteredUserClasses = useMemo(() => {
    return allUserClasses
      .filter(userClass => userClass.module === 'DASHBOARD')
      .filter(userClass => 
        userClass.name.toLowerCase().includes(userClassSearchText.toLowerCase())
      );
  }, [allUserClasses, userClassSearchText]);

  // Memoize the selected user classes display
  const selectedUserClassesDisplay = useMemo(() => {
    if (selectedUserClasses.size === 0) return null;
    
    return (
      <div style={{
        marginTop: '8px',
        padding: '6px 8px',
        backgroundColor: '#f6ffed',
        border: '1px solid #b7eb8f',
        borderRadius: '4px',
        fontSize: '12px'
      }}>
        <strong>ƒê√£ ch·ªçn:</strong> {Array.from(selectedUserClasses).map(id => {
          const userClass = allUserClasses.find(uc => uc.id === id);
          return userClass ? userClass.name : `ID: ${id}`;
        }).join(', ')}
      </div>
    );
  }, [selectedUserClasses, allUserClasses]);

  // Fetch all user classes
  useEffect(() => {
    async function fetchUserClasses() {
      try {
        console.log('üîç [NewTemplateModal] Fetching user classes...');
        const userClasses = await getAllUserClass();
        console.log('‚úÖ [NewTemplateModal] User classes loaded:', {
          totalUserClasses: userClasses.length,
          userClasses: userClasses.map(uc => ({ name: uc.name, module: uc.module }))
        });
        setAllUserClasses(userClasses);
      } catch (error) {
        console.error('‚ùå [NewTemplateModal] Error fetching user classes:', error);
      }
    }
    if (showNewTemplate) {
      fetchUserClasses();
    }
  }, [showNewTemplate]);

  // Initialize modal state when it opens
  useEffect(() => {
    if (showNewTemplate) {
      console.log('üîç [NewTemplateModal] Initializing with template:', {
        templateName: newTemplate.name,
        hasOutputConfig: !!newTemplate.outputConfig,
        outputConfigSections: newTemplate.outputConfig?.sections?.length || 0,
        outputConfig: newTemplate.outputConfig,
        showNewTemplate: showNewTemplate
      });

      setOriginalPrompt(newTemplate.prompt || '');
      setSelectedUserClasses(new Set(newTemplate.userClass || []));
      
      // Initialize output config if exists
      if (newTemplate.outputConfig) {
        setOutputConfig(newTemplate.outputConfig);
      } else {
        setOutputConfig({ sections: [], generatedPrompt: '' });
      }
    }
  }, [showNewTemplate, newTemplate.prompt, newTemplate.outputConfig, newTemplate.userClass]);

  const handleSave = useCallback(() => {
    if (newTemplate.name?.trim() && originalPrompt?.trim()) {
      // Only use the original prompt, don't add generated prompt
      let finalPrompt = originalPrompt;
      
      // Add selected user classes and output config to template
      const templateWithUserClass = {
        ...newTemplate,
        prompt: finalPrompt,
        userClass: Array.from(selectedUserClasses),
        outputConfig: outputConfig
      };
      
      console.log('üíæ [NewTemplateModal] Saving template with userClass and outputConfig:', {
        templateName: templateWithUserClass.name,
        selectedUserClasses: Array.from(selectedUserClasses),
        userClassLength: templateWithUserClass.userClass.length,
        outputConfigSections: outputConfig.sections.length,
        finalPromptLength: finalPrompt.length
      });
      
      // Pass the updated template directly to onSave instead of setting state first
      onSave(templateWithUserClass);
    }
  }, [newTemplate, originalPrompt, selectedUserClasses, outputConfig, onSave]);

  const handleCancel = useCallback(() => {
    setNewTemplate({ name: '', prompt: '' });
    setSelectedUserClasses(new Set());
    setUserClassSearchText('');
    setOutputConfig({ sections: [], generatedPrompt: '' });
    setOriginalPrompt('');
    onCancel();
  }, [setNewTemplate, onCancel]);

  const highlightPrompt = useCallback((code) => {
    let html = code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
    html = html.replace(/(&lt;[^&]*&gt;)/g, '<span class="highlight-special">$1</span>');
    html = html.replace(/(_[^_\s]*_)/g, '<span class="highlight-special">$1</span>');
    html = html.replace(/(#[^#\s]*#)/g, '<span class="highlight-special">$1</span>');
    html = html.replace(/(@[^@\s]*@)/g, '<span class="highlight-special">$1</span>');
    return html;
  }, []);

  const handleUserClassChange = useCallback((userClassId) => {
    setSelectedUserClasses(prev => {
      const newSet = new Set(prev);
      if (newSet.has(userClassId)) {
        newSet.delete(userClassId);
      } else {
        newSet.add(userClassId);
      }
      return newSet;
    });
  }, []);

  const handleSelectAllVisible = useCallback(() => {
    setSelectedUserClasses(prev => {
      const visibleUserClassIds = filteredUserClasses.map(uc => uc.id);
      return new Set([...prev, ...visibleUserClassIds]);
    });
  }, [filteredUserClasses]);

  const handleDeselectAllVisible = useCallback(() => {
    setSelectedUserClasses(prev => {
      const visibleUserClassIds = filteredUserClasses.map(uc => uc.id);
      const newSet = new Set(prev);
      visibleUserClassIds.forEach(id => newSet.delete(id));
      return newSet;
    });
  }, [filteredUserClasses]);

  return (
    <Modal
      open={showNewTemplate}
      title="New Template"
      onCancel={handleCancel}
      onOk={handleSave}
      saveText="Create"
      cancelText="Cancel"
      saveDisabled={!newTemplate.name?.trim() || !originalPrompt?.trim()}
      centered
      width={'80vw'}
    >
      <div className={styles.formGroup}>
        <label className={styles.formLabel}>
          Template Name *
        </label>
        <input
          type="text"
          value={newTemplate.name}
          onChange={(e) => setNewTemplate(prev => ({...prev, name: e.target.value}))}
          className={styles.formInput}
          placeholder="Enter template name"
          autoFocus
        />
      </div>
      
      <div className={styles.formGroup}>
        <label className={styles.formLabel}>
          Template Prompt *
        </label>
        <div style={{
          fontSize: '12px',
          color: '#888',
          marginBottom: '6px',
          lineHeight: 1.5
        }}>
          <strong>Ch√∫ th√≠ch:</strong> B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë·ªÉ t·∫°o bi·∫øn ƒë·ªông trong prompt:<br/>
          <span style={{color:'#ff4d4f'}}>&lt;...&gt;</span> cho tr∆∞·ªùng c·∫ßn nh·∫≠p li·ªáu, <span style={{color:'#ff4d4f'}} >_..._</span>, <span style={{color:'#ff4d4f'}} >#...#</span>, <span style={{color:'#ff4d4f'}} >@...@</span> cho c√°c bi·∫øn ho·∫∑c th√¥ng tin ƒë·∫∑c bi·ªát.<br/>
          V√≠ d·ª•: <span style={{color:'#ff4d4f'}}>&lt;ƒêi·ªÅn th√°ng&gt;</span>, <span style={{color:'#ff4d4f'}} >_T√™n ph√≤ng ban_</span>
        </div>
        <Editor
          value={originalPrompt}
          onValueChange={setOriginalPrompt}
          highlight={highlightPrompt}
          padding={8}
          style={{
            minHeight: 80,
            fontFamily: 'inherit',
            fontSize: 14,
            background: '#fff',
            border: '1px solid #d9d9d9',
            borderRadius: 4,
            outline: 'none',
            width: '100%'
          }}
          className={styles.formTextarea}
          placeholder="Enter template prompt"
        />
      </div>

      <div className={styles.formGroup}>
        <label className={styles.formLabel}>
          Ph√¢n quy·ªÅn truy c·∫≠p (User Classes)
        </label>
        <div style={{
          fontSize: '12px',
          color: '#888',
          marginBottom: '6px',
          lineHeight: 1.5
        }}>
          Ch·ªçn c√°c nh√≥m ng∆∞·ªùi d√πng c√≥ quy·ªÅn s·ª≠ d·ª•ng template n√†y. ƒê·ªÉ tr·ªëng ƒë·ªÉ cho ph√©p t·∫•t c·∫£.
        </div>
        
        <Input
          placeholder="T√¨m ki·∫øm user class..."
          value={userClassSearchText}
          onChange={(e) => setUserClassSearchText(e.target.value)}
          style={{ marginBottom: 8 }}
          size="small"
        />
        
        <div style={{ display: 'flex', gap: 4, marginBottom: 8 }}>
          <button
            type="button"
            onClick={handleSelectAllVisible}
            disabled={filteredUserClasses.length === 0}
            style={{
              fontSize: '11px',
              padding: '2px 6px',
              border: '1px solid #d9d9d9',
              borderRadius: '3px',
              background: '#fff',
              cursor: 'pointer'
            }}
          >
            Ch·ªçn t·∫•t c·∫£
          </button>
          <button
            type="button"
            onClick={handleDeselectAllVisible}
            disabled={filteredUserClasses.length === 0}
            style={{
              fontSize: '11px',
              padding: '2px 6px',
              border: '1px solid #d9d9d9',
              borderRadius: '3px',
              background: '#fff',
              cursor: 'pointer'
            }}
          >
            B·ªè ch·ªçn t·∫•t c·∫£
          </button>
        </div>

        <div style={{
          maxHeight: '150px',
          overflowY: 'auto',
          border: '1px solid #d9d9d9',
          borderRadius: '4px',
          padding: '8px',
        }}>
          {filteredUserClasses.length > 0 ? (
            filteredUserClasses.map((userClass) => (
              <div key={userClass.id} style={{ marginBottom: '4px' }}>
                <Checkbox
                  checked={selectedUserClasses.has(userClass.id)}
                  onChange={() => handleUserClassChange(userClass.id)}
                  style={{ fontSize: '12px' }}
                >
                  {userClass.name}
                </Checkbox>
              </div>
            ))
          ) : (
            <div style={{ textAlign: 'center', color: '#999', padding: '20px', fontSize: '12px' }}>
              {userClassSearchText ? 'Kh√¥ng t√¨m th·∫•y user class n√†o ph√π h·ª£p' : 'Kh√¥ng c√≥ user class n√†o'}
            </div>
          )}
        </div>
        
        {selectedUserClassesDisplay}
      </div>

      <OutputConfigurator
        outputConfig={outputConfig}
        setOutputConfig={setOutputConfig}
        onAutoGeneratedPromptCreated={onAutoGeneratedPromptCreated}
        selectedTemplate={newTemplate}
        fileNotesFull={fileNotesFull}
        kpi2Calculators={kpi2Calculators}
      />

      
      <style>{`
  .highlight-special {
    color: #ff4d4f;
    background: #fff2f0;
    font-weight: 600;
    border-radius: 3px;
  }
  .react-simple-code-editor {
    white-space: pre-wrap;
    word-break: break-word;
  }
`}</style>
    </Modal>
  );
} 