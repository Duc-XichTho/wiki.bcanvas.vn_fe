class FileNoteQueueService {
    constructor() {
        this.queue = [];
        this.isProcessing = false;
        this.currentRunning = null;
        this.runningFileNotes = new Set(); // ch·ªâ ch·ª©a c√°c filenote ƒëang ch·∫°y th·ª±c s·ª±
        this.callbacks = {
            onStart: null,
            onComplete: null,
            onError: null,
            onQueueUpdate: null,
            onAllCompleteForFileNote: null
        };
    }

    // Th√™m v√†o queue
    addToQueue(fileNoteId, stepId, onStart, onComplete, onError) {
        const queueItem = {
            id: `${fileNoteId}_${stepId}_${Date.now()}`,
            fileNoteId: String(fileNoteId),
            stepId,
            onStart,
            onComplete,
            onError,
            timestamp: Date.now()
        };

        // Ki·ªÉm tra xem ƒë√£ c√≥ trong queue ch∆∞a
        const existingIndex = this.queue.findIndex(item => 
            item.fileNoteId == queueItem.fileNoteId && item.stepId == stepId
        );

        if (existingIndex !== -1) {
            console.log(`Item ƒë√£ c√≥ trong queue: ${fileNoteId}_${stepId}`);
            return;
        }

        this.queue.push(queueItem);
        // ƒê√°nh d·∫•u filenote n√†y ƒëang c√≥ job (ƒë·ªÉ Sidebar hi·ªÉn th·ªã spinner ngay c·∫£ khi ƒëang ch·ªù)
        this.runningFileNotes.add(String(fileNoteId));
        console.log(`‚úÖ ƒê√£ th√™m v√†o queue: ${fileNoteId}_${stepId}`, this.queue.length);
        
        // Th√¥ng b√°o queue ƒë√£ c·∫≠p nh·∫≠t
        if (this.callbacks.onQueueUpdate) {
            this.callbacks.onQueueUpdate(this.getQueueStatus());
        }

        // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω n·∫øu ch∆∞a ƒëang ch·∫°y
        if (!this.isProcessing) {
            this.processQueue();
        }
    }

    // X·ª≠ l√Ω queue
    async processQueue() {
        if (this.isProcessing || this.queue.length === 0) {
            return;
        }

        this.isProcessing = true;
        console.log(`üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω queue, c√≤n ${this.queue.length} items`);

        while (this.queue.length > 0) {
            const item = this.queue.shift();
            this.currentRunning = item;
            
            console.log(`üîÑ ƒêang x·ª≠ l√Ω: ${item.fileNoteId}_${item.stepId}`);

            try {
                // Th√¥ng b√°o b·∫Øt ƒë·∫ßu
                // ƒê∆∞a v√†o danh s√°ch ƒëang ch·∫°y th·ª±c s·ª±
                this.runningFileNotes.add(String(item.fileNoteId));
                if (item.onStart) {
                    item.onStart(item.fileNoteId, item.stepId);
                }
                if (this.callbacks.onStart) {
                    this.callbacks.onStart(item.fileNoteId, item.stepId);
                }

                // Th√¥ng b√°o queue ƒë√£ c·∫≠p nh·∫≠t
                if (this.callbacks.onQueueUpdate) {
                    this.callbacks.onQueueUpdate(this.getQueueStatus());
                }

                // G·ªçi executeStep t·ª´ PipelineSteps
                if (this.executeStep) {
                    await this.executeStep(item.fileNoteId, item.stepId);
                }

                // Th√¥ng b√°o ho√†n th√†nh
                if (item.onComplete) {
                    item.onComplete(item.fileNoteId, item.stepId);
                }
                if (this.callbacks.onComplete) {
                    this.callbacks.onComplete(item.fileNoteId, item.stepId);
                }

                console.log(`‚úÖ Ho√†n th√†nh: ${item.fileNoteId}_${item.stepId}`);

                // N·∫øu kh√¥ng c√≤n item n√†o thu·ªôc c√πng fileNote trong queue, th√¥ng b√°o ho√†n th√†nh to√†n b·ªô cho fileNote n√†y
                const hasMoreForThisFile = this.queue.some(q => q.fileNoteId == item.fileNoteId);
                if (!hasMoreForThisFile && this.callbacks.onAllCompleteForFileNote) {
                    this.callbacks.onAllCompleteForFileNote(item.fileNoteId);
                }

            } catch (error) {
                console.error(`‚ùå L·ªói khi x·ª≠ l√Ω: ${item.fileNoteId}_${item.stepId}`, error);
                
                // Th√¥ng b√°o l·ªói
                if (item.onError) {
                    item.onError(item.fileNoteId, item.stepId, error);
                }
                if (this.callbacks.onError) {
                    this.callbacks.onError(item.fileNoteId, item.stepId, error);
                }
            }
            
            // D√π ho√†n th√†nh hay l·ªói, ch·ªâ lo·∫°i kh·ªèi danh s√°ch ƒëang ch·∫°y n·∫øu kh√¥ng c√≤n job n√†o c·ªßa c√πng fileNote trong queue
            const stillHasForThisFile = this.queue.some(q => q.fileNoteId == item.fileNoteId);
            if (!stillHasForThisFile) {
                this.runningFileNotes.delete(String(item.fileNoteId));
            }

            // Th√¥ng b√°o queue ƒë√£ c·∫≠p nh·∫≠t
            if (this.callbacks.onQueueUpdate) {
                this.callbacks.onQueueUpdate(this.getQueueStatus());
            }
        }

        this.currentRunning = null;
        this.isProcessing = false;
        console.log(`üèÅ Ho√†n th√†nh x·ª≠ l√Ω queue`);
        // Th√¥ng b√°o tr·∫°ng th√°i m·ªõi (ƒë·ªÉ UI clear spinner)
        if (this.callbacks.onQueueUpdate) {
            this.callbacks.onQueueUpdate(this.getQueueStatus());
        }
    }

    // ƒêƒÉng k√Ω executeStep function
    setExecuteStep(executeStepFn) {
        this.executeStep = executeStepFn;
    }

    // ƒêƒÉng k√Ω callbacks
    setCallbacks(callbacks) {
        this.callbacks = { ...this.callbacks, ...callbacks };
    }

    // L·∫•y tr·∫°ng th√°i queue
    getQueueStatus() {
        return {
            queue: [...this.queue],
            isProcessing: this.isProcessing,
            currentRunning: this.currentRunning,
            queueLength: this.queue.length
        };
    }

    // L·∫•y danh s√°ch fileNoteId ƒëang ch·∫°y th·ª±c s·ª±
    getRunningFileNotes() {
        return new Set(this.runningFileNotes);
    }

    // X√≥a kh·ªèi queue
    removeFromQueue(fileNoteId, stepId) {
        const initialLength = this.queue.length;
        this.queue = this.queue.filter(item => 
            !(item.fileNoteId == String(fileNoteId) && item.stepId == stepId)
        );
        
        if (this.queue.length !== initialLength) {
            console.log(`üóëÔ∏è ƒê√£ x√≥a kh·ªèi queue: ${fileNoteId}_${stepId}`);
            if (this.callbacks.onQueueUpdate) {
                this.callbacks.onQueueUpdate(this.getQueueStatus());
            }
        }
    }

    // X√≥a t·∫•t c·∫£ items c·ªßa m·ªôt fileNote
    removeFileNoteFromQueue(fileNoteId) {
        const initialLength = this.queue.length;
        this.queue = this.queue.filter(item => item.fileNoteId !== String(fileNoteId));
        
        if (this.queue.length !== initialLength) {
            console.log(`üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ items c·ªßa fileNote: ${fileNoteId}`);
            if (this.callbacks.onQueueUpdate) {
                this.callbacks.onQueueUpdate(this.getQueueStatus());
            }
        }
    }

    // D·ª´ng queue
    stopQueue() {
        this.queue = [];
        this.isProcessing = false;
        this.currentRunning = null;
        console.log(`‚èπÔ∏è ƒê√£ d·ª´ng queue`);
        
        if (this.callbacks.onQueueUpdate) {
            this.callbacks.onQueueUpdate(this.getQueueStatus());
        }
    }
}

// Export singleton instance
const fileNoteQueueService = new FileNoteQueueService();
export default fileNoteQueueService;
